<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recent posts to Doubt:buffer_encoder or encoder</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/28e7fc82df/</link><description>Recent posts to Doubt:buffer_encoder or encoder</description><language>en</language><lastBuildDate>Thu, 14 Nov 2019 20:08:59 -0000</lastBuildDate><atom:link href="https://sourceforge.net/p/lzmautils/discussion/708858/thread/28e7fc82df/feed.rss" rel="self" type="application/rss+xml"></atom:link><item><title>Doubt:buffer_encoder or encoder</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/28e7fc82df/?limit=25#02a7</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;It's true that the RAM usage could be lower for buffer-to-buffer encoding when only the LZMA2 filter is used (the common case), saving dict_size bytes of RAM (or about 10 %), I don't plan to improve it for now. Internally liblzma works on streams and the buffer-to-buffer API is wrapped on top of it as a convenience.&lt;/p&gt;
&lt;p&gt;Similar RAM savings could be done in threaded compression in a more complicated way, lowering the RAM usage by a few percent. Again, no plans to improve its RAM usage for now.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Thu, 14 Nov 2019 20:08:59 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net012a80af6a42bfaa205ea91d39baf8f2e8d3e2b8</guid></item><item><title>Doubt:buffer_encoder or encoder</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/28e7fc82df/?limit=25#e332</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;I find that there are two different methods when I use the XZ Utils, for example, stream_encoder and stream_buffer_encoder.&lt;/p&gt;
&lt;p&gt;And I read text in TODO:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Buffer-to-buffer coding could use less RAM
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Can I think in this way:&lt;br/&gt;
The coder (include lzma_next_coder) will be deprecated in the future.&lt;br/&gt;
It is better to use the buffer coder, and the buffer-to-buffer coding will be expanded in the future features (Now, just expand in stream/block compression, except filter coder).&lt;/p&gt;
&lt;p&gt;Is there a short term planning that implementing buffer-to-buffer coding in  filter coder (lzma1/lzma2/lz...)?&lt;br/&gt;
RAM is expensive.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Stark</dc:creator><pubDate>Thu, 11 Jul 2019 08:36:13 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net8dd21f30313feed766d81373347a123e9be1cfd3</guid></item></channel></rss>