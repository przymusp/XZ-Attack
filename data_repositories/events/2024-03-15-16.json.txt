{"id":"36592238541","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":17563236730,"size":10,"distinct_size":5,"ref":"refs/heads/master","head":"8a25ba024d55610c448c6e4f1400a00bae51b493","before":"a4f2e20d8466369b1bb277c66f75c9e4ba9cc378","commits":[{"sha":"f56ed6fac6619b56b005878d3b5210e2f0d721c0","author":{"email":"sergey.kosukhin@mpimet.mpg.de","name":"Sergey Kosukhin"},"message":"Build: Let the users override the symbol versioning variant.\n\nThere are cases when the users want to decide themselves whether\nthey want to have the generic (even on GNU/Linux) or the linux\n(even if we do not recommend that) symbol versioning variant.\nThe former might be needed to circumvent compiler issues (i.e.\nthe compiler does not support all features that are required\nfor the linux versioning), the latter might help in overriding\nthe assumptions made in the configure script.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f56ed6fac6619b56b005878d3b5210e2f0d721c0"},{"sha":"45d33bfc45e4295b8ad743bc2ae61cc724f98076","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Style tweaks to configure.ac.\n\nThe AC_MSG_ERROR line is overlong anyway as are a few other\nAC_MSG_ERROR lines already.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/45d33bfc45e4295b8ad743bc2ae61cc724f98076"},{"sha":"82f0c0d39eb2c026b1d96ee706f70ace868d4ed4","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Make symbol versioning configurable.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/82f0c0d39eb2c026b1d96ee706f70ace868d4ed4"},{"sha":"2ad7fad67080e88fa7fc191f9d613d8b7add9c62","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Disable symbol versioning on non-glibc Linux.\n\nThis better matches what configure.ac does. For example, musl has\nonly basic symbol versioning support:\n\nhttps://wiki.musl-libc.org/functional-differences-from-glibc.html#Symbol_versioning\n\nconfigure.ac tries to enable symbol versioning only with glibc\nso now CMake does the same.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2ad7fad67080e88fa7fc191f9d613d8b7add9c62"},{"sha":"096bc0e3f8fb4bfc4d2f3f64a7f219401ffb4c31","author":{"email":"sergey.kosukhin@mpimet.mpg.de","name":"Sergey Kosukhin"},"message":"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).\n\nNVHPC compiler has several issues that make it impossible to\nbuild liblzma:\n  - the compiler cannot handle unions that contain pointers that\n    are not the first members;\n  - the compiler cannot handle the assembler code in range_decoder.h\n    (LZMA_RANGE_DECODER_CONFIG has to be set to zero);\n  - the compiler fails to produce valid code for delta_decode if the\n    vectorization is enabled, which results in failed tests.\n\nThis introduces NVHPC-specific workarounds that address the issues.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/096bc0e3f8fb4bfc4d2f3f64a7f219401ffb4c31"},{"sha":"3217b82b3ec023bf8338249134a076bea0ea30ec","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Minor comment edits.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3217b82b3ec023bf8338249134a076bea0ea30ec"},{"sha":"df7f487648d18a3992386a59b8a061edca862d17","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/df7f487648d18a3992386a59b8a061edca862d17"},{"sha":"c273123ed0ebaebf49994057a7fe98aae7f42c40","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Use only the generic symbol versioning with NVIDIA HPC Compiler.\n\nIt doesn't support the __symver__ attribute or __asm__(\".symver ...\").\nThe generic symbol versioning can still be used since it only needs\nlinker support.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c273123ed0ebaebf49994057a7fe98aae7f42c40"},{"sha":"49324b711f9d42b3543bf2f3ae598eaa03360bd5","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Use only the generic symbol versioning with NVIDIA HPC Compiler.\n\nThis does the previous commit with CMake.\n\nAC_EGREP_CPP uses AC_REQUIRE so the outermost if-commands must\nbe changed to AS_IF to ensure that things wont break some day.\nSee 5a5bd7f871818029d5ccbe189f087f591258c294.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/49324b711f9d42b3543bf2f3ae598eaa03360bd5"},{"sha":"8a25ba024d55610c448c6e4f1400a00bae51b493","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"INSTALL: Document arguments of --enable-symbol-versions.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8a25ba024d55610c448c6e4f1400a00bae51b493"}]},"public":true,"created_at":"2024-03-15T16:06:28Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"36592294204","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/91","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/91/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/91/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/91/events","html_url":"https://github.com/tukaani-project/xz/pull/91","id":2183979010,"node_id":"PR_kwDOIQBEvs5pgS85","number":91,"title":"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","user":{"login":"skosukhin","id":19591868,"node_id":"MDQ6VXNlcjE5NTkxODY4","avatar_url":"https://avatars.githubusercontent.com/u/19591868?v=4","gravatar_id":"","url":"https://api.github.com/users/skosukhin","html_url":"https://github.com/skosukhin","followers_url":"https://api.github.com/users/skosukhin/followers","following_url":"https://api.github.com/users/skosukhin/following{/other_user}","gists_url":"https://api.github.com/users/skosukhin/gists{/gist_id}","starred_url":"https://api.github.com/users/skosukhin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/skosukhin/subscriptions","organizations_url":"https://api.github.com/users/skosukhin/orgs","repos_url":"https://api.github.com/users/skosukhin/repos","events_url":"https://api.github.com/users/skosukhin/events{/privacy}","received_events_url":"https://api.github.com/users/skosukhin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2024-03-13T13:06:26Z","updated_at":"2024-03-15T16:08:17Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/91","html_url":"https://github.com/tukaani-project/xz/pull/91","diff_url":"https://github.com/tukaani-project/xz/pull/91.diff","patch_url":"https://github.com/tukaani-project/xz/pull/91.patch","merged_at":null},"body":"NVHPC compiler has several issues that make it impossible to build liblzma:\r\n  - the compiler cannot handle unions that contain pointers that are not the first members (in some cases);\r\n  - the compiler cannot handle the assembler code in range_decoder.h (LZMA_RANGE_DECODER_CONFIG has to be set to zero);\r\n  - the compiler fails to produce valid code for delta_decode if the vectorization is enabled, which results in failed tests.\r\n\r\nThis introduces NVHPC-specific workarounds that address the issues.\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [ ] Build was run locally and without warnings or errors\r\n- [x] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\nPlease check the type of change your PR introduces:\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] Documentation content changes\r\n- [x] Other (please describe): workarounds for the compiler\r\n\r\n\r\n## What is the current behavior?\r\nIt's not possible to build and get the tests pass with any existing release of the NVHPC compiler even when configuring as follows:\r\n```console\r\n$ ./configure --disable-symbol-versions CPPFLAGS='-DLZMA_RANGE_DECODER_CONFIG=0' CFLAGS='-O'\r\n```\r\n(`-O` is the same as the default `-O2` but without SIMD)\r\n\r\n\r\n## What is the new behavior?\r\nIt is possible to build and get the tests pass with any existing release of the NVHPC compiler when configuring as follows:\r\n```console\r\n$ ./configure --disable-symbol-versions\r\n```\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\n\r\nI don't know if there is any interest in supporting NVHPC and I'd understand if there's none.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/91/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/91/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1999984957","html_url":"https://github.com/tukaani-project/xz/pull/91#issuecomment-1999984957","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/91","id":1999984957,"node_id":"IC_kwDOIQBEvs53NVk9","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2024-03-15T16:08:15Z","updated_at":"2024-03-15T16:08:15Z","author_association":"MEMBER","body":"The code selected with 0x100 is the simplest assembly piece and it has\nfewer input and output variables too. So it could be something about\nthe number of variables or the length of the assembly code but this is\njust a guess.\n\nKeeping the code disabled with NVIDIA HPC seems the simplest solution\nfor now. I like to make the code portable as in \"works reliably\" but\ngetting the best speed has some bias towards FOSS toolchains and\noperating systems.\n\nThe PRs #90 and #91 are now merged to master along with related commits\nthat should make the symbol version autodetection work too.\n\nThank you for reporting the issues and for the patches!\n","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1999984957/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-03-15T16:08:17Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
