{"id":"27541822418","type":"IssueCommentEvent","actor":{"id":1045626,"login":"delphij","display_login":"delphij","gravatar_id":"","url":"https://api.github.com/users/delphij","avatar_url":"https://avatars.githubusercontent.com/u/1045626?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/43","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/43/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/43/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/43/events","html_url":"https://github.com/tukaani-project/xz/pull/43","id":1610442947,"node_id":"PR_kwDOIQBEvs5LUTCK","number":43,"title":"xz: Improve compatibility with systems without capability mode support","user":{"login":"delphij","id":1045626,"node_id":"MDQ6VXNlcjEwNDU2MjY=","avatar_url":"https://avatars.githubusercontent.com/u/1045626?v=4","gravatar_id":"","url":"https://api.github.com/users/delphij","html_url":"https://github.com/delphij","followers_url":"https://api.github.com/users/delphij/followers","following_url":"https://api.github.com/users/delphij/following{/other_user}","gists_url":"https://api.github.com/users/delphij/gists{/gist_id}","starred_url":"https://api.github.com/users/delphij/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/delphij/subscriptions","organizations_url":"https://api.github.com/users/delphij/orgs","repos_url":"https://api.github.com/users/delphij/repos","events_url":"https://api.github.com/users/delphij/events{/privacy}","received_events_url":"https://api.github.com/users/delphij/received_events","type":"User","site_admin":false},"labels":[{"id":4687621022,"node_id":"LA_kwDOIQBEvs8AAAABF2drng","url":"https://api.github.com/repos/tukaani-project/xz/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":5016626567,"node_id":"LA_kwDOIQBEvs8AAAABKwOlhw","url":"https://api.github.com/repos/tukaani-project/xz/labels/5.4.2","name":"5.4.2","color":"006b75","default":false,"description":"Item earmarked for 5.4.2 release"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-03-05T23:55:38Z","updated_at":"2023-03-07T09:05:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/43","html_url":"https://github.com/tukaani-project/xz/pull/43","diff_url":"https://github.com/tukaani-project/xz/pull/43.diff","patch_url":"https://github.com/tukaani-project/xz/pull/43.patch","merged_at":null},"body":"When the kernel is built without capability mode support, or when using an emulator like qemu-user-static that does not translate system calls, these calls will return a negative number and set the errno to ENOSYS. However, this error does not indicate a real programming or runtime error and is generally ignored by base system applications built with capability mode sandboxing.\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [X] Build was run locally and without warnings or errors\r\n- [X] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\nPlease check the type of change your PR introduces:\r\n- [X] Bugfix\r\n\r\n## What is the current behavior?\r\n\r\nxz would abort execution with `Failed to enable the sandbox` when capability mode system calls failed, regardless if the host system have capability mode support.\r\n\r\nIt is advisable that binaries with capability mode sandbox enabled to ignore capability mode errors when they are solely because the system does not have the support, this is done on many applications including OpenSSH and base system utilities.  In fact, FreeBSD have a set of macros called [capsicum_helpers(3)](https://man.freebsd.org/cgi/man.cgi?query=capsicum_helpers&sektion=3) which [wraps](https://cgit.freebsd.org/src/tree/lib/libcapsicum/capsicum_helpers.h#n153) this anti-pattern.\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=269185\r\n\r\n\r\n## What is the new behavior?\r\n\r\nxz will ignore sandbox failures caused by the kernel lacking support of capsicum mode.\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n## Other information\r\n\r\nThe proposed patch modified `cap_*` calls to also check if the failure was caused by the lack of support (ENOSYS) and make it ignore it.  If possible, it's probably reasonable to just use `caph_*` calls found in `capsicum_helpers(3)`.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/43/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/43/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1457803504","html_url":"https://github.com/tukaani-project/xz/pull/43#issuecomment-1457803504","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/43","id":1457803504,"node_id":"IC_kwDOIQBEvs5W5FDw","user":{"login":"delphij","id":1045626,"node_id":"MDQ6VXNlcjEwNDU2MjY=","avatar_url":"https://avatars.githubusercontent.com/u/1045626?v=4","gravatar_id":"","url":"https://api.github.com/users/delphij","html_url":"https://github.com/delphij","followers_url":"https://api.github.com/users/delphij/followers","following_url":"https://api.github.com/users/delphij/following{/other_user}","gists_url":"https://api.github.com/users/delphij/gists{/gist_id}","starred_url":"https://api.github.com/users/delphij/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/delphij/subscriptions","organizations_url":"https://api.github.com/users/delphij/orgs","repos_url":"https://api.github.com/users/delphij/repos","events_url":"https://api.github.com/users/delphij/events{/privacy}","received_events_url":"https://api.github.com/users/delphij/received_events","type":"User","site_admin":false},"created_at":"2023-03-07T09:05:28Z","updated_at":"2023-03-07T09:05:28Z","author_association":"NONE","body":"> > Hi @delphij! Thanks for the notifying us about the issue and for the PR. I solved it a slightly different way with the newest commits on master to avoid unneeded function calls after ENOSYS and to issue a warning message. Can you verify this solves the problem? Additionally, an extra check should be added to ax_check_capsicum.m4, but that can be added later.\r\n> \r\n> Hi @JiaT75 thanks for the quick response! Yes I _think_ your solution would work too. I'll test it tonight (it would take several hours for the test to complete) and post an update here.\r\n\r\nbuild would fail if compiled with `-Wunused-label` as `error:` is not longer used.  Maybe hide it in a `#else` clause of `HAVE_CAPSICUM`, or have an explicit `goto error` after the `if` clause checking for `ENOSYS`?","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1457803504/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-07T09:05:29Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
