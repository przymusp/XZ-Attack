{"id":"29199888484","type":"PushEvent","actor":{"id":5628451,"login":"Sibras","display_login":"Sibras","gravatar_id":"","url":"https://api.github.com/users/Sibras","avatar_url":"https://avatars.githubusercontent.com/u/5628451?"},"repo":{"id":23569153,"name":"ShiftMediaProject/liblzma","url":"https://api.github.com/repos/ShiftMediaProject/liblzma"},"payload":{"repository_id":23569153,"push_id":13702749760,"size":22,"distinct_size":22,"ref":"refs/heads/master","head":"c495c4d73b5e3a53f453452349d50be4d1544f15","before":"8b55331fa5de8e0d5173fec88e78341daaddfdd0","commits":[{"sha":"0673c9ec98b6bae12b33dc295564514aaa26e2fc","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Silence -Wsign-conversion in SSE2 code in memcmplen.h.\n\nThanks to Christian Hesse for reporting the issue.\nFixes: https://github.com/tukaani-project/xz/issues/44","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/0673c9ec98b6bae12b33dc295564514aaa26e2fc"},{"sha":"c775ba1602a74f29dbc2088bbe4d02c23fc32ba1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Fix --disable-threads breaking the building of shared libs.\n\nThis is broken in the releases 5.2.6 to 5.4.2. A workaround\nfor these releases is to pass EGREP='grep -E' as an argument\nto configure in addition to --disable-threads.\n\nThe problem appeared when m4/ax_pthread.m4 was updated in\nthe commit 6629ed929cc7d45a11e385f357ab58ec15e7e4ad which\nintroduced the use of AC_EGREP_CPP. AC_EGREP_CPP calls\nAC_REQUIRE([AC_PROG_EGREP]) to set the shell variable EGREP\nbut this was only executed if POSIX threads were enabled.\nLibtool code also has AC_REQUIRE([AC_PROG_EGREP]) but Autoconf\nomits it as AC_PROG_EGREP has already been required earlier.\nThus, if not using POSIX threads, the shell variable EGREP\nwould be undefined in the Libtool code in configure.\n\nax_pthread.m4 is fine. The bug was in configure.ac which called\nAX_PTHREAD conditionally in an incorrect way. Using AS_CASE\nensures that all AC_REQUIREs get always run.\n\nThanks to Frank Busse for reporting the bug.\nFixes: https://github.com/tukaani-project/xz/issues/45","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/c775ba1602a74f29dbc2088bbe4d02c23fc32ba1"},{"sha":"b848c039586ed2cddb6fb033680dac107cc5143f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/b848c039586ed2cddb6fb033680dac107cc5143f"},{"sha":"915d4f6058d52f84d2b58b0a5f3c8272eaa6c1bd","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: configure.ac: Use AS_IF and AS_CASE where required.\n\nThis makes no functional difference in the generated configure\n(at least with the Autotools versions I have installed) but this\nchange might prevent future bugs like the one that was just\nfixed in the commit 5a5bd7f871818029d5ccbe189f087f591258c294.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/915d4f6058d52f84d2b58b0a5f3c8272eaa6c1bd"},{"sha":"0c053f97337fa4ead77acefb577e8e86f8ef388d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Add a comment that AC_PROG_CC_C99 is needed for Autoconf 2.69.\n\nIt's obsolete in Autoconf >= 2.70 and just an alias for AC_PROG_CC\nbut Autoconf 2.69 requires AC_PROG_CC_C99 to get a C99 compiler.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/0c053f97337fa4ead77acefb577e8e86f8ef388d"},{"sha":"3e2dc523c596cd770a6a7c58cacc0d0d8761e853","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Allow configuring features as cache variables.\n\nThis allows users to change the features they build either in\nCMakeCache.txt or by using a CMake GUI. The sources built for\nliblzma are affected by this too, so only the necessary files\nwill be compiled.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/3e2dc523c596cd770a6a7c58cacc0d0d8761e853"},{"sha":"622d0fdc02d5f565c2872d79bc70c669c95c8284","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Conditionally build xz list.* files if decoders are enabled.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/622d0fdc02d5f565c2872d79bc70c669c95c8284"},{"sha":"54a2fd8c850e626343b79c4cc8fcac2f638ec890","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Bump maximum policy version to 3.26.\n\nIt adds only one new policy related to FOLDERS which we don't use.\nThis makes it clear that the code is compatible with the policies\nup to 3.26.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/54a2fd8c850e626343b79c4cc8fcac2f638ec890"},{"sha":"c99d697df800e9bc47e09facf88bcfdb9e0264a5","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Removes redundant check for LZMA1 filter support.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/c99d697df800e9bc47e09facf88bcfdb9e0264a5"},{"sha":"ba176d77cbb164b13006516660fc1ff6c59dedb5","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Only build xzdec if decoders are enabled.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/ba176d77cbb164b13006516660fc1ff6c59dedb5"},{"sha":"023907faa965476fb921a6344253c50e0ba795f9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Allows setting thread method.\n\nThe thread method is now configurable for the CMake build. It matches\nthe Autotools build by allowing ON (pick the best threading method),\nOFF (no threading), posix, win95, and vista. If both Windows and\nposix threading are both available, then ON will choose Windows\nthreading. Windows threading will also not use:\n\ntarget_link_libraries(liblzma Threads::Threads)\n\nsince on systems like MinGW-w64 it would link the posix threads\nwithout purpose.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/023907faa965476fb921a6344253c50e0ba795f9"},{"sha":"32980d1562bc031013306be1c787761fa63da87d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Update liblzma-config.cmake generation.\n\nNow that the threading is configurable, the liblzma CMake package only\nneeds the threading library when using POSIX threads.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/32980d1562bc031013306be1c787761fa63da87d"},{"sha":"8204c5d1304e1e3b7487801b4acaf8e3179a6c52","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Cleans up old commented out code.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/8204c5d1304e1e3b7487801b4acaf8e3179a6c52"},{"sha":"d1f0e01c395960efd6c29ff144eda4f4c8c1c6d3","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Update project maintainers in lzma.h.\n\nAUTHORS was updated earlier, lzma.h was simply forgotten.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/d1f0e01c395960efd6c29ff144eda4f4c8c1c6d3"},{"sha":"12321a9390acc076b414035a46df9d7545ac379f","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"tuklib_integer: Use __builtin_clz() with Clang.\n\nClang has support for __builtin_clz(), but previously Clang would\nfallback to either the MSVC intrinsic or the regular C code. This was\ndiscovered due to a bug where a new version of Clang required the\n<intrin.h> header file in order to use the MSVC intrinsics.\n\nThanks to Anton Kochkov for notifying us about the bug.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/12321a9390acc076b414035a46df9d7545ac379f"},{"sha":"9e343a46cf87a345799222c0b0b3a6f3358dde0c","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Windows: Include <intrin.h> when needed.\n\nLegacy Windows did not need to #include <intrin.h> to use the MSVC\nintrinsics. Newer versions likely just issue a warning, but the MSVC\ndocumentation says to include the header file for the intrinsics we use.\n\nGCC and Clang can \"pretend\" to be MSVC on Windows, so extra checks are\nneeded in tuklib_integer.h to only include <intrin.h> when it will is\nactually needed.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/9e343a46cf87a345799222c0b0b3a6f3358dde0c"},{"sha":"be6e39a8622f0d905072874ec25b1ffd155b12e1","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/be6e39a8622f0d905072874ec25b1ffd155b12e1"},{"sha":"e9b9ea953179502d5245b4e6ca4f5ffe9d5797b1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer.h: Fix a recent copypaste error in Clang detection.\n\nWrong line was changed in 7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7.\nAlso, this has >= instead of == since ints larger than 32 bits would\nwork too even if not relevant in practice.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/e9b9ea953179502d5245b4e6ca4f5ffe9d5797b1"},{"sha":"01f937ea9a49005c5091c0165fa0c1e572dd1749","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Add NEWS for 5.4.3.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/01f937ea9a49005c5091c0165fa0c1e572dd1749"},{"sha":"0cee63c3c6c4f9084a5e7fa7c15a1863ac8e5ffc","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Bump version and soname for 5.4.3.","distinct":true,"url":"https://api.github.com/repos/ShiftMediaProject/liblzma/commits/0cee63c3c6c4f9084a5e7fa7c15a1863ac8e5ffc"}]},"public":true,"created_at":"2023-05-20T17:07:50Z","org":{"id":5629346,"login":"ShiftMediaProject","gravatar_id":"","url":"https://api.github.com/orgs/ShiftMediaProject","avatar_url":"https://avatars.githubusercontent.com/u/5629346?"}}
