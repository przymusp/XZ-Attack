{"id":"21185466066","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":453091377,"name":"JiaT75/XZ_Utils_Unofficial","url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial"},"payload":{"push_id":9574099969,"size":7,"distinct_size":7,"ref":"refs/heads/test_multithreaded_decoder","head":"7a8c7824ce4b8bf12a25e7d4a44a0a7fa0fd9932","before":"d5352967bdf988a3ddaafe2c701849ecec3cff9d","commits":[{"sha":"69d1b3fc29677af8ade8dc15dba83f0589cb63d6","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xzgrep: Fix escaping of malicious filenames (ZDI-CAN-16587).\n\nMalicious filenames can make xzgrep to write to arbitrary files\nor (with a GNU sed extension) lead to arbitrary code execution.\n\nxzgrep from XZ Utils versions up to and including 5.2.5 are\naffected. 5.3.1alpha and 5.3.2alpha are affected as well.\nThis patch works for all of them.\n\nThis bug was inherited from gzip's zgrep. gzip 1.12 includes\na fix for zgrep.\n\nThe issue with the old sed script is that with multiple newlines,\nthe N-command will read the second line of input, then the\ns-commands will be skipped because it's not the end of the\nfile yet, then a new sed cycle starts and the pattern space\nis printed and emptied. So only the last line or two get escaped.\n\nOne way to fix this would be to read all lines into the pattern\nspace first. However, the included fix is even simpler: All lines\nexcept the last line get a backslash appended at the end. To ensure\nthat shell command substitution doesn't eat a possible trailing\nnewline, a colon is appended to the filename before escaping.\nThe colon is later used to separate the filename from the grep\noutput so it is fine to add it here instead of a few lines later.\n\nThe old code also wasn't POSIX compliant as it used \\n in the\nreplacement section of the s-command. Using \\<newline> is the\nPOSIX compatible method.\n\nLC_ALL=C was added to the two critical sed commands. POSIX sed\nmanual recommends it when using sed to manipulate pathnames\nbecause in other locales invalid multibyte sequences might\ncause issues with some sed implementations. In case of GNU sed,\nthese particular sed scripts wouldn't have such problems but some\nother scripts could have, see:\n\n    info '(sed)Locale Considerations'\n\nThis vulnerability was discovered by:\ncleemy desu wayo working with Trend Micro Zero Day Initiative\n\nThanks to Jim Meyering and Paul Eggert discussing the different\nways to fix this and for coordinating the patch release schedule\nwith gzip.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/69d1b3fc29677af8ade8dc15dba83f0589cb63d6"},{"sha":"2ba8173e27be4793edb46497e499ac2ae753a316","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/2ba8173e27be4793edb46497e499ac2ae753a316"},{"sha":"e671bc8828b9c0c5406c3a22c541301d0eb54518","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Threaded decoder: Support zpipe.c-style decoding loop.\n\nThis makes it possible to call lzma_code() in a loop that only\nreads new input when lzma_code() didn't fill the output buffer\ncompletely. That isn't the calling style suggested by the\nliblzma example program 02_decompress.c so perhaps the usefulness\nof this feature is limited.\n\nAlso, it is possible to write such a loop so that it works\nwith the single-threaded decoder but not with the threaded\ndecoder even after this commit, or so that it works only if\nlzma_mt.timeout = 0.\n\nThe zlib tutorial <https://zlib.net/zlib_how.html> is a well-known\nexample of a loop where more input is read only when output isn't\nfull. Porting this as is to liblzma would work with the\nsingle-threaded decoder (if LZMA_CONCATENATED isn't used) but it\nwouldn't work with threaded decoder even after this commit because\nthe loop assumes that no more output is possible when it cannot\nread more input (\"if (strm.avail_in == 0) break;\"). This cannot\nbe fixed at liblzma side; the loop has to be modified at least\na little.\n\nI'm adding this in any case because the actual code is simple\nand short and should have no harmful side-effects in other\nsituations.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/e671bc8828b9c0c5406c3a22c541301d0eb54518"},{"sha":"64b6d496dc815a176d8307f418f6834a26783484","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Threaded decoder: Always wait for output if LZMA_FINISH is used.\n\nThis makes the behavior consistent with the single-threaded\ndecoder when handling truncated .xz files.\n\nThanks to Jia Tan for finding this issue.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/64b6d496dc815a176d8307f418f6834a26783484"},{"sha":"90621da7f6e1bfd6d91d60415eae04b2bca274c2","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add a new flag LZMA_FAIL_FAST for threaded decoder.\n\nIn most cases if the input file is corrupt the application won't\ncare about the uncompressed content at all. With this new flag\nthe threaded decoder will return an error as soon as any thread\nhas detected an error; it won't wait to copy out the data before\nthe location of the error.\n\nI don't plan to use this in xz to keep the behavior consistent\nbetween single-threaded and multi-threaded modes.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/90621da7f6e1bfd6d91d60415eae04b2bca274c2"},{"sha":"fe87b4cd5364f5bbb6a75a0299f1500c852d7c9a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Threaded decoder: Improve setting of pending_error.\n\nIt doesn't need to be done conditionally. The comments try\nto explain it.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/fe87b4cd5364f5bbb6a75a0299f1500c852d7c9a"},{"sha":"7a8c7824ce4b8bf12a25e7d4a44a0a7fa0fd9932","author":{"email":"jiat0218@gmail.com","name":"jiat75"},"message":"Merge branch 'master' into test_multithreaded_decoder","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/7a8c7824ce4b8bf12a25e7d4a44a0a7fa0fd9932"}]},"public":true,"created_at":"2022-04-08T12:17:46Z"}
{"id":"21185526569","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":453091377,"name":"JiaT75/XZ_Utils_Unofficial","url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial"},"payload":{"push_id":9574129669,"size":1,"distinct_size":1,"ref":"refs/heads/test_multithreaded_decoder","head":"23dd353ac33215e2ee8b8f8e51a5366fff4de319","before":"7a8c7824ce4b8bf12a25e7d4a44a0a7fa0fd9932","commits":[{"sha":"23dd353ac33215e2ee8b8f8e51a5366fff4de319","author":{"email":"jiat0218@gmail.com","name":"jiat75"},"message":"Simplified decode_expect_broken test because of mt decoder improvements","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/23dd353ac33215e2ee8b8f8e51a5366fff4de319"}]},"public":true,"created_at":"2022-04-08T12:21:24Z"}
