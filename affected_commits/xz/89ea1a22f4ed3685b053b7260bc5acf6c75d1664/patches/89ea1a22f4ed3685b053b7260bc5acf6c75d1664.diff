commit 89ea1a22f4ed3685b053b7260bc5acf6c75d1664
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 13 22:38:58 2024 +0800

    Tests: Add RISC-V filter support in a few places.

diff --git a/tests/test_filter_flags.c b/tests/test_filter_flags.c
index 6d9f0b93..a8893239 100644
--- a/tests/test_filter_flags.c
+++ b/tests/test_filter_flags.c
@@ -1,527 +1,533 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       test_filter_flags.c
 /// \brief      Tests Filter Flags coders
 //
 //  Authors:    Jia Tan
 //              Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "tests.h"
 
 // FIXME: This is from src/liblzma/common/common.h but it cannot be
 // included here. This constant is needed in only a few files, perhaps
 // move it to some other internal header or create a new one?
 #define LZMA_FILTER_RESERVED_START (LZMA_VLI_C(1) << 62)
 
 
 #if defined(HAVE_ENCODERS)
 // No tests are run without encoders, so init the global filters
 // only when the encoders are enabled.
 static lzma_filter lzma1_filter = { LZMA_FILTER_LZMA1, NULL };
 static lzma_filter lzma2_filter = { LZMA_FILTER_LZMA2, NULL };
 static lzma_filter delta_filter = { LZMA_FILTER_DELTA, NULL };
 
 static lzma_filter bcj_filters_encoders[] = {
 #ifdef HAVE_ENCODER_X86
 	{ LZMA_FILTER_X86, NULL },
 #endif
 #ifdef HAVE_ENCODER_POWERPC
 	{ LZMA_FILTER_POWERPC, NULL },
 #endif
 #ifdef HAVE_ENCODER_IA64
 	{ LZMA_FILTER_IA64, NULL },
 #endif
 #ifdef HAVE_ENCODER_ARM
 	{ LZMA_FILTER_ARM, NULL },
 #endif
 #ifdef HAVE_ENCODER_ARM64
 	{ LZMA_FILTER_ARM64, NULL },
 #endif
 #ifdef HAVE_ENCODER_ARMTHUMB
 	{ LZMA_FILTER_ARMTHUMB, NULL },
 #endif
 #ifdef HAVE_ENCODER_SPARC
 	{ LZMA_FILTER_SPARC, NULL },
 #endif
+#ifdef HAVE_ENCODER_RISCV
+	{ LZMA_FILTER_RISCV, NULL },
+#endif
 };
 
 // HAVE_ENCODERS ifdef not terminated here because decoders are
 // only used if encoders are, but encoders can still be used
 // even if decoders are not.
 
 #ifdef HAVE_DECODERS
 static lzma_filter bcj_filters_decoders[] = {
 #ifdef HAVE_DECODER_X86
 	{ LZMA_FILTER_X86, NULL },
 #endif
 #ifdef HAVE_DECODER_POWERPC
 	{ LZMA_FILTER_POWERPC, NULL },
 #endif
 #ifdef HAVE_DECODER_IA64
 	{ LZMA_FILTER_IA64, NULL },
 #endif
 #ifdef HAVE_DECODER_ARM
 	{ LZMA_FILTER_ARM, NULL },
 #endif
 #ifdef HAVE_DECODER_ARM64
 	{ LZMA_FILTER_ARM64, NULL },
 #endif
 #ifdef HAVE_DECODER_ARMTHUMB
 	{ LZMA_FILTER_ARMTHUMB, NULL },
 #endif
 #ifdef HAVE_DECODER_SPARC
 	{ LZMA_FILTER_SPARC, NULL },
 #endif
+#ifdef HAVE_DECODER_RISCV
+	{ LZMA_FILTER_RISCV, NULL },
+#endif
 };
 #endif
 #endif
 
 
 static void
 test_lzma_filter_flags_size(void)
 {
 #ifndef HAVE_ENCODERS
 	assert_skip("Encoder support disabled");
 #else
 	// For each supported filter, test that the size can be calculated
 	// and that the size calculated is reasonable. A reasonable size
 	// must be greater than 0, but less than the maximum size for the
 	// block header.
 	uint32_t size = 0;
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_LZMA1)) {
 		assert_lzma_ret(lzma_filter_flags_size(&size,
 				&lzma1_filter), LZMA_PROG_ERROR);
 	}
 
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_LZMA2)) {
 		assert_lzma_ret(lzma_filter_flags_size(&size,
 				&lzma2_filter), LZMA_OK);
 		assert_true(size != 0 && size < LZMA_BLOCK_HEADER_SIZE_MAX);
 	}
 
 	// Do not use macro ARRAY_SIZE() in the for loop condition directly.
 	// If the BCJ filters are not configured and built, then ARRAY_SIZE()
 	// will return 0 and cause a warning because the for loop will never
 	// execute since any unsigned number cannot be < 0 (-Werror=type-limits).
 	const uint32_t bcj_array_size = ARRAY_SIZE(bcj_filters_encoders);
 	for (uint32_t i = 0; i < bcj_array_size; i++) {
 		assert_lzma_ret(lzma_filter_flags_size(&size,
 				&bcj_filters_encoders[i]), LZMA_OK);
 		assert_true(size != 0 && size < LZMA_BLOCK_HEADER_SIZE_MAX);
 	}
 
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_DELTA)) {
 		assert_lzma_ret(lzma_filter_flags_size(&size,
 				&delta_filter), LZMA_OK);
 		assert_true(size != 0 && size < LZMA_BLOCK_HEADER_SIZE_MAX);
 	}
 
 	// Test invalid Filter IDs
 	lzma_filter bad_filter = { 2, NULL };
 
 	assert_lzma_ret(lzma_filter_flags_size(&size, &bad_filter),
 			LZMA_OPTIONS_ERROR);
 	bad_filter.id = LZMA_VLI_MAX;
 	assert_lzma_ret(lzma_filter_flags_size(&size, &bad_filter),
 			LZMA_PROG_ERROR);
 	bad_filter.id = LZMA_FILTER_RESERVED_START;
 	assert_lzma_ret(lzma_filter_flags_size(&size, &bad_filter),
 			LZMA_PROG_ERROR);
 #endif
 }
 
 
 // Helper function for test_lzma_filter_flags_encode.
 // The should_encode parameter represents if the encoding operation
 // is expected to fail.
 // Avoid data -> encode -> decode -> compare to data.
 // Instead create expected encoding and compare to result from
 // lzma_filter_flags_encode.
 // Filter Flags in .xz are encoded as:
 // |Filter ID (VLI)|Size of Properties (VLI)|Filter Properties|
 #if defined(HAVE_ENCODERS) && defined(HAVE_DECODERS)
 static void
 verify_filter_flags_encode(lzma_filter *filter, bool should_encode)
 {
 	uint32_t size = 0;
 
 	// First calculate the size of Filter Flags to know how much
 	// memory to allocate to hold the encoded Filter Flags
 	assert_lzma_ret(lzma_filter_flags_size(&size, filter), LZMA_OK);
 	uint8_t *encoded_out = tuktest_malloc(size * sizeof(uint8_t));
 	size_t out_pos = 0;
 	if (!should_encode) {
 		assert_false(lzma_filter_flags_encode(filter, encoded_out,
 				&out_pos, size) == LZMA_OK);
 		return;
 	}
 
 	// Next encode the Filter Flags for the provided filter
 	assert_lzma_ret(lzma_filter_flags_encode(filter, encoded_out,
 			&out_pos, size), LZMA_OK);
 	assert_uint_eq(size, out_pos);
 
 	// Next decode the VLI for the Filter ID and verify it matches
 	// the expected Filter ID
 	size_t filter_id_vli_size = 0;
 	lzma_vli filter_id = 0;
 	assert_lzma_ret(lzma_vli_decode(&filter_id, NULL, encoded_out,
 			&filter_id_vli_size, size), LZMA_OK);
 	assert_uint_eq(filter->id, filter_id);
 
 	// Next decode the Size of Properties and ensure it equals
 	// the expected size.
 	// Expected size should be:
 	// total filter flag length - size of filter id VLI + size of
 	//                            property size VLI
 	// Not verifying the contents of Filter Properties since
 	// that belongs in a different test
 	size_t size_of_properties_vli_size = 0;
 	lzma_vli size_of_properties = 0;
 	assert_lzma_ret(lzma_vli_decode(&size_of_properties, NULL,
 			encoded_out + filter_id_vli_size,
 			&size_of_properties_vli_size, size), LZMA_OK);
 	assert_uint_eq(size - (size_of_properties_vli_size +
 			filter_id_vli_size), size_of_properties);
 }
 #endif
 
 
 static void
 test_lzma_filter_flags_encode(void)
 {
 #if !defined(HAVE_ENCODERS) || !defined(HAVE_DECODERS)
 	assert_skip("Encoder or decoder support disabled");
 #else
 	// No test for LZMA1 since the .xz format does not support LZMA1
 	// and so the flags cannot be encoded for that filter
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_LZMA2)) {
 		// Test with NULL options that should fail
 		lzma_options_lzma *options = lzma2_filter.options;
 		lzma2_filter.options = NULL;
 		verify_filter_flags_encode(&lzma2_filter, false);
 
 		// Place options back in the filter, and test should pass
 		lzma2_filter.options = options;
 		verify_filter_flags_encode(&lzma2_filter, true);
 	}
 
 	// NOTE: Many BCJ filters require that start_offset is a multiple
 	// of some power of two. The Filter Flags encoder and decoder don't
 	// completely validate the options and thus 257 passes the tests
 	// with all BCJ filters. It would be caught when initializing
 	// a filter chain encoder or decoder.
 	lzma_options_bcj bcj_options = {
 		.start_offset = 257
 	};
 
 	const uint32_t bcj_array_size = ARRAY_SIZE(bcj_filters_encoders);
 	for (uint32_t i = 0; i < bcj_array_size; i++) {
 		// NULL options should pass for bcj filters
 		verify_filter_flags_encode(&bcj_filters_encoders[i], true);
 		lzma_filter bcj_with_options = {
 				bcj_filters_encoders[i].id, &bcj_options };
 		verify_filter_flags_encode(&bcj_with_options, true);
 	}
 
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_DELTA)) {
 		lzma_options_delta delta_opts_below_min = {
 			.type = LZMA_DELTA_TYPE_BYTE,
 			.dist = LZMA_DELTA_DIST_MIN - 1
 		};
 
 		lzma_options_delta delta_opts_above_max = {
 			.type = LZMA_DELTA_TYPE_BYTE,
 			.dist = LZMA_DELTA_DIST_MAX + 1
 		};
 
 		verify_filter_flags_encode(&delta_filter, true);
 
 		lzma_filter delta_filter_bad_options = {
 				LZMA_FILTER_DELTA, &delta_opts_below_min };
 
 		// Next test error case using minimum - 1 delta distance
 		verify_filter_flags_encode(&delta_filter_bad_options, false);
 
 		// Next test error case using maximum + 1 delta distance
 		delta_filter_bad_options.options = &delta_opts_above_max;
 		verify_filter_flags_encode(&delta_filter_bad_options, false);
 
 		// Next test NULL case
 		delta_filter_bad_options.options = NULL;
 		verify_filter_flags_encode(&delta_filter_bad_options, false);
 	}
 
 	// Test expected failing cases
 	lzma_filter bad_filter = { LZMA_FILTER_RESERVED_START, NULL };
 	size_t out_pos = 0;
 	size_t out_size = LZMA_BLOCK_HEADER_SIZE_MAX;
 	uint8_t out[LZMA_BLOCK_HEADER_SIZE_MAX];
 
 
 	// Filter ID outside of valid range
 	assert_lzma_ret(lzma_filter_flags_encode(&bad_filter, out, &out_pos,
 			out_size), LZMA_PROG_ERROR);
 	out_pos = 0;
 	bad_filter.id = LZMA_VLI_MAX + 1;
 	assert_lzma_ret(lzma_filter_flags_encode(&bad_filter, out, &out_pos,
 			out_size), LZMA_PROG_ERROR);
 	out_pos = 0;
 
 	// Invalid Filter ID
 	bad_filter.id = 2;
 	assert_lzma_ret(lzma_filter_flags_encode(&bad_filter, out, &out_pos,
 			out_size), LZMA_OPTIONS_ERROR);
 	out_pos = 0;
 
 	// Out size too small
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_LZMA2)) {
 		uint32_t bad_size = 0;
 
 		// First test with 0 output size
 		assert_lzma_ret(lzma_filter_flags_encode(
 				&lzma2_filter, out, &out_pos, 0),
 				LZMA_PROG_ERROR);
 
 		// Next calculate the size needed to encode and
 		// use less than that
 		assert_lzma_ret(lzma_filter_flags_size(&bad_size,
 				&lzma2_filter), LZMA_OK);
 
 		assert_lzma_ret(lzma_filter_flags_encode(
 				&lzma2_filter, out, &out_pos,
 				bad_size - 1), LZMA_PROG_ERROR);
 		out_pos = 0;
 	}
 
 	// Invalid options
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_DELTA)) {
 		bad_filter.id = LZMA_FILTER_DELTA;
 
 		// First test with NULL options
 		assert_lzma_ret(lzma_filter_flags_encode(&bad_filter, out,
 				&out_pos, out_size), LZMA_PROG_ERROR);
 		out_pos = 0;
 
 		// Next test with invalid options
 		lzma_options_delta bad_options = {
 			.dist = LZMA_DELTA_DIST_MAX + 1,
 			.type = LZMA_DELTA_TYPE_BYTE
 		};
 		bad_filter.options = &bad_options;
 
 		assert_lzma_ret(lzma_filter_flags_encode(&bad_filter, out,
 				&out_pos, out_size), LZMA_PROG_ERROR);
 	}
 #endif
 }
 
 
 // Helper function for test_lzma_filter_flags_decode.
 // Encodes the filter_in without using lzma_filter_flags_encode.
 // Leaves the specific assertions of filter_out options to the caller
 // because it is agnostic to the type of options used in the call
 #if defined(HAVE_ENCODERS) && defined(HAVE_DECODERS)
 static void
 verify_filter_flags_decode(lzma_filter *filter_in, lzma_filter *filter_out)
 {
 	uint32_t total_size = 0;
 
 	assert_lzma_ret(lzma_filter_flags_size(&total_size, filter_in),
 			LZMA_OK);
 	assert_uint(total_size, >, 0);
 	uint8_t *filter_flag_buffer = tuktest_malloc(total_size);
 
 	uint32_t properties_size = 0;
 	size_t out_pos = 0;
 	size_t in_pos = 0;
 	assert_lzma_ret(lzma_properties_size(&properties_size, filter_in),
 			LZMA_OK);
 	assert_lzma_ret(lzma_vli_encode(filter_in->id, NULL,
 			filter_flag_buffer, &out_pos, total_size), LZMA_OK);
 	assert_lzma_ret(lzma_vli_encode(properties_size, NULL,
 			filter_flag_buffer, &out_pos, total_size),
 			LZMA_OK);
 	assert_lzma_ret(lzma_properties_encode(filter_in,
 			filter_flag_buffer + out_pos), LZMA_OK);
 	assert_lzma_ret(lzma_filter_flags_decode(filter_out, NULL,
 			filter_flag_buffer, &in_pos, total_size),
 			LZMA_OK);
 	assert_uint_eq(filter_in->id, filter_out->id);
 }
 #endif
 
 
 static void
 test_lzma_filter_flags_decode(void)
 {
 #if !defined(HAVE_ENCODERS) || !defined(HAVE_DECODERS)
 	assert_skip("Encoder or decoder support disabled");
 #else
 	// For each filter, only run the decoder test if both the encoder
 	// and decoder are enabled. This is because verify_filter_flags_decode
 	// uses lzma_filter_flags_size which requires the encoder.
 	if (lzma_filter_decoder_is_supported(LZMA_FILTER_LZMA2) &&
 			lzma_filter_encoder_is_supported(LZMA_FILTER_LZMA2)) {
 		lzma_filter lzma2_decoded = { LZMA_FILTER_LZMA2, NULL };
 
 		verify_filter_flags_decode(&lzma2_filter, &lzma2_decoded);
 
 		lzma_options_lzma *expected = lzma2_filter.options;
 		lzma_options_lzma *decoded = lzma2_decoded.options;
 
 		// Only the dictionary size is encoded and decoded
 		// so only compare those
 		assert_uint_eq(decoded->dict_size, expected->dict_size);
 
 		// The decoded options must be freed by the caller
 		free(decoded);
 	}
 
 	const uint32_t bcj_array_size = ARRAY_SIZE(bcj_filters_decoders);
 	for (uint32_t i = 0; i < bcj_array_size; i++) {
 		if (lzma_filter_encoder_is_supported(
 				bcj_filters_decoders[i].id)) {
 			lzma_filter bcj_decoded = {
 					bcj_filters_decoders[i].id, NULL };
 
 			lzma_filter bcj_encoded = {
 					bcj_filters_decoders[i].id, NULL };
 
 			// First test without options
 			verify_filter_flags_decode(&bcj_encoded,
 					&bcj_decoded);
 			assert_true(bcj_decoded.options == NULL);
 
 			// Next test with offset
 			lzma_options_bcj options = {
 				.start_offset = 257
 			};
 
 			bcj_encoded.options = &options;
 			verify_filter_flags_decode(&bcj_encoded,
 					&bcj_decoded);
 			lzma_options_bcj *decoded_opts = bcj_decoded.options;
 			assert_uint_eq(decoded_opts->start_offset,
 					options.start_offset);
 			free(decoded_opts);
 		}
 	}
 
 	if (lzma_filter_decoder_is_supported(LZMA_FILTER_DELTA) &&
 			lzma_filter_encoder_is_supported(LZMA_FILTER_DELTA)) {
 		lzma_filter delta_decoded = { LZMA_FILTER_DELTA, NULL };
 
 		verify_filter_flags_decode(&delta_filter, &delta_decoded);
 		lzma_options_delta *expected = delta_filter.options;
 		lzma_options_delta *decoded = delta_decoded.options;
 		assert_uint_eq(expected->dist, decoded->dist);
 		assert_uint_eq(expected->type, decoded->type);
 
 		free(decoded);
 	}
 
 	// Test expected failing cases
 	uint8_t bad_encoded_filter[LZMA_BLOCK_HEADER_SIZE_MAX];
 	lzma_filter bad_filter;
 
 	// Filter ID outside of valid range
 	lzma_vli bad_filter_id = LZMA_FILTER_RESERVED_START;
 	size_t bad_encoded_out_pos = 0;
 	size_t in_pos = 0;
 
 	assert_lzma_ret(lzma_vli_encode(bad_filter_id, NULL,
 			bad_encoded_filter, &bad_encoded_out_pos,
 			LZMA_BLOCK_HEADER_SIZE_MAX), LZMA_OK);
 
 	assert_lzma_ret(lzma_filter_flags_decode(&bad_filter, NULL,
 			bad_encoded_filter, &in_pos,
 			LZMA_BLOCK_HEADER_SIZE_MAX), LZMA_DATA_ERROR);
 
 	bad_encoded_out_pos = 0;
 	in_pos = 0;
 
 	// Invalid Filter ID
 	bad_filter_id = 2;
 	bad_encoded_out_pos = 0;
 	in_pos = 0;
 
 	assert_lzma_ret(lzma_vli_encode(bad_filter_id, NULL,
 			bad_encoded_filter, &bad_encoded_out_pos,
 			LZMA_BLOCK_HEADER_SIZE_MAX), LZMA_OK);
 
 	// Next encode Size of Properties with the value of 0
 	assert_lzma_ret(lzma_vli_encode(0, NULL,
 			bad_encoded_filter, &bad_encoded_out_pos,
 			LZMA_BLOCK_HEADER_SIZE_MAX), LZMA_OK);
 
 	// Decode should fail on bad Filter ID
 	assert_lzma_ret(lzma_filter_flags_decode(&bad_filter, NULL,
 			bad_encoded_filter, &in_pos,
 			LZMA_BLOCK_HEADER_SIZE_MAX), LZMA_OPTIONS_ERROR);
 	bad_encoded_out_pos = 0;
 	in_pos = 0;
 
 	// Outsize too small
 	// Encode the LZMA2 filter normally, but then set
 	// the out size when decoding as too small
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_LZMA2) &&
 			lzma_filter_decoder_is_supported(LZMA_FILTER_LZMA2)) {
 		uint32_t filter_flag_size = 0;
 		assert_lzma_ret(lzma_filter_flags_size(&filter_flag_size,
 				&lzma2_filter), LZMA_OK);
 
 		assert_lzma_ret(lzma_filter_flags_encode(&lzma2_filter,
 				bad_encoded_filter, &bad_encoded_out_pos,
 				LZMA_BLOCK_HEADER_SIZE_MAX), LZMA_OK);
 
 		assert_lzma_ret(lzma_filter_flags_decode(&bad_filter, NULL,
 				bad_encoded_filter, &in_pos,
 				filter_flag_size - 1), LZMA_DATA_ERROR);
 	}
 #endif
 }
 
 
 extern int
 main(int argc, char **argv)
 {
 	tuktest_start(argc, argv);
 
 #ifdef HAVE_ENCODERS
 	// Only init filter options if encoder is supported because decoder
 	// tests requires encoder support, so the decoder tests will only
 	// run if for a given filter both the encoder and decoder are enabled.
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_LZMA1)) {
 		lzma_options_lzma *options = tuktest_malloc(
 				sizeof(lzma_options_lzma));
 		lzma_lzma_preset(options, LZMA_PRESET_DEFAULT);
 		lzma1_filter.options = options;
 	}
 
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_LZMA2)) {
 		lzma_options_lzma *options = tuktest_malloc(
 				sizeof(lzma_options_lzma));
 		lzma_lzma_preset(options, LZMA_PRESET_DEFAULT);
 		lzma2_filter.options = options;
 	}
 
 	if (lzma_filter_encoder_is_supported(LZMA_FILTER_DELTA)) {
 		lzma_options_delta *options = tuktest_malloc(
 				sizeof(lzma_options_delta));
 		options->dist = LZMA_DELTA_DIST_MIN;
 		options->type = LZMA_DELTA_TYPE_BYTE;
 		delta_filter.options = options;
 	}
 #endif
 
 	tuktest_run(test_lzma_filter_flags_size);
 	tuktest_run(test_lzma_filter_flags_encode);
 	tuktest_run(test_lzma_filter_flags_decode);
 	return tuktest_end();
 }
diff --git a/tests/test_filter_str.c b/tests/test_filter_str.c
index 15aee55a..c57473ae 100644
--- a/tests/test_filter_str.c
+++ b/tests/test_filter_str.c
@@ -1,593 +1,599 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       test_filter_str.c
 /// \brief      Tests Filter string functions
 //
 //  Author:    Jia Tan
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "tests.h"
 
 
 static void
 test_lzma_str_to_filters(void)
 {
 	lzma_filter filters[LZMA_FILTERS_MAX + 1];
 	int error_pos;
 
 	// Test with NULL string.
 	assert_true(lzma_str_to_filters(NULL, &error_pos, filters, 0,
 			NULL) != NULL);
 
 	// Test with NULL filter array.
 	assert_true(lzma_str_to_filters("lzma2", &error_pos, NULL, 0,
 			NULL) != NULL);
 
 	// Test with unsupported flags.
 	assert_true(lzma_str_to_filters("lzma2", &error_pos, filters,
 			UINT32_MAX, NULL) != NULL);
 
 	assert_true(lzma_str_to_filters("lzma2", &error_pos, filters,
 			LZMA_STR_NO_SPACES << 1, NULL) != NULL);
 
 	assert_true(lzma_str_to_filters("lzma2", &error_pos, filters,
 			LZMA_STR_NO_SPACES, NULL) != NULL);
 
 	// Test with empty string.
 	assert_true(lzma_str_to_filters("", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 0);
 
 	// Test with invalid filter name and missing filter name.
 	assert_true(lzma_str_to_filters("lzma2 abcd", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 6);
 
 	assert_true(lzma_str_to_filters("lzma2--abcd", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 7);
 
 	assert_true(lzma_str_to_filters("lzma2--", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 7);
 
 	// Test LZMA_STR_ALL_FILTERS flag (should work with LZMA1 if built).
 #if defined(HAVE_ENCODER_LZMA1) || defined(HAVE_DECODER_LZMA1)
 	// Using LZMA1 as a Filter should fail without LZMA_STR_ALL_FILTERS.
 	assert_true(lzma_str_to_filters("lzma1", &error_pos, filters,
 			0, NULL) != NULL);
 	assert_int_eq(error_pos, 0);
 
 	assert_true(lzma_str_to_filters("lzma1", &error_pos, filters,
 			LZMA_STR_ALL_FILTERS, NULL) == NULL);
 
 	// Verify Filters array IDs are correct. The array should contain
 	// only two elements:
 	// 1. LZMA1 Filter
 	// 2. LZMA_VLI_UNKNOWN filter array terminator
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA1);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 #endif
 
 	// Test LZMA_STR_NO_VALIDATION flag. This should allow having the
 	// same Filter multiple times in the chain and having a non-last
 	// Filter like lzma2 appear before another Filter.
 	// Without the flag, "lzma2 lzma2" must fail.
 	assert_true(lzma_str_to_filters("lzma2 lzma2", &error_pos, filters,
 			0, NULL) != NULL);
 
 	assert_true(lzma_str_to_filters("lzma2 lzma2", &error_pos, filters,
 			LZMA_STR_NO_VALIDATION, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[2].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 
 	// Should fail with invalid Filter options (lc + lp must be <= 4).
 	assert_true(lzma_str_to_filters("lzma2:lc=3,lp=3", &error_pos, filters,
 			LZMA_STR_NO_VALIDATION, NULL) != NULL);
 
 	// Test invalid option name.
 	assert_true(lzma_str_to_filters("lzma2:foo=1,bar=2", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 6);
 
 	// Test missing option value.
 	assert_true(lzma_str_to_filters("lzma2:lc=", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 9);
 
 	assert_true(lzma_str_to_filters("lzma2:=,pb=1", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 6);
 
 	// Test unsupported preset value.
 	assert_true(lzma_str_to_filters("-10", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 2);
 
 	assert_true(lzma_str_to_filters("-5f", &error_pos,
 			filters, 0, NULL) != NULL);
 	assert_int_eq(error_pos, 2);
 
 	// Test filter chain too long.
 	assert_true(lzma_str_to_filters("lzma2 lzma2 lzma2 lzma2 lzma2",
 			&error_pos, filters, LZMA_STR_NO_VALIDATION,
 			NULL) != NULL);
 	assert_int_eq(error_pos, 24);
 
 #if defined(HAVE_ENCODER_LZMA1) || defined(HAVE_DECODER_LZMA1)
 	// Should fail with a Filter not supported in the .xz format (lzma1).
 	assert_true(lzma_str_to_filters("lzma1", &error_pos, filters,
 			LZMA_STR_NO_VALIDATION, NULL) != NULL);
 #endif
 
 	// Test setting options with the "=" format.
 	assert_true(lzma_str_to_filters("lzma2=dict=4096,lc=2,lp=2,pb=1,"
 			"mode=fast,nice=3,mf=hc3,depth=10", &error_pos,
 			filters, 0, NULL) == NULL);
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_options_lzma *opts = filters[0].options;
 	assert_uint_eq(opts->dict_size, 4096);
 	assert_uint_eq(opts->lc, 2);
 	assert_uint_eq(opts->lp, 2);
 	assert_uint_eq(opts->pb, 1);
 	assert_uint_eq(opts->mode, LZMA_MODE_FAST);
 	assert_uint_eq(opts->nice_len, 3);
 	assert_uint_eq(opts->mf, LZMA_MF_HC3);
 	assert_uint_eq(opts->depth, 10);
 
 	lzma_filters_free(filters, NULL);
 
 #if defined(HAVE_ENCODER_X86) || defined(HAVE_DECODER_X86)
 	// Test BCJ Filter options.
 	assert_true(lzma_str_to_filters("x86:start=16", &error_pos, filters,
 			LZMA_STR_NO_VALIDATION, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_X86);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_options_bcj *bcj_opts = filters[0].options;
 	assert_uint_eq(bcj_opts->start_offset, 16);
 
 	lzma_filters_free(filters, NULL);
 #endif
 
 #if defined(HAVE_ENCODER_DELTA) || defined(HAVE_DECODER_DELTA)
 	// Test Delta Filter options.
 	assert_true(lzma_str_to_filters("delta:dist=20", &error_pos, filters,
 			LZMA_STR_NO_VALIDATION, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_DELTA);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_options_delta *delta_opts = filters[0].options;
 	assert_uint_eq(delta_opts->dist, 20);
 
 	lzma_filters_free(filters, NULL);
 #endif
 
 	// Test skipping leading spaces.
 	assert_true(lzma_str_to_filters("    lzma2", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 
 	// Test skipping trailing spaces.
 	assert_true(lzma_str_to_filters("lzma2    ", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 
 	// Test with "--" instead of space separating.
 	assert_true(lzma_str_to_filters("lzma2--lzma2", &error_pos, filters,
 			LZMA_STR_NO_VALIDATION, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[2].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 
 	// Test preset with and without leading "-", and with "e".
 	assert_true(lzma_str_to_filters("-3", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 
 	assert_true(lzma_str_to_filters("4", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 
 	assert_true(lzma_str_to_filters("9e", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 
 	// Test using a preset as an lzma2 option.
 	assert_true(lzma_str_to_filters("lzma2:preset=9e", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	lzma_filters_free(filters, NULL);
 
 	// Test setting dictionary size with invalid modifier suffix.
 	assert_true(lzma_str_to_filters("lzma2:dict=4096ZiB", &error_pos, filters,
 			0, NULL) != NULL);
 
 	assert_true(lzma_str_to_filters("lzma2:dict=4096KiBs", &error_pos, filters,
 			0, NULL) != NULL);
 
 	// Test option that cannot have multiplier modifier.
 	assert_true(lzma_str_to_filters("lzma2:pb=1k", &error_pos, filters,
 			0, NULL) != NULL);
 
 	// Test option value too large.
 	assert_true(lzma_str_to_filters("lzma2:dict=4096GiB", &error_pos, filters,
 			0, NULL) != NULL);
 
 	// Test valid uses of multiplier modifiers (k,m,g).
 	assert_true(lzma_str_to_filters("lzma2:dict=4096KiB", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	opts = filters[0].options;
 	assert_uint_eq(opts->dict_size, 4096 << 10);
 
 	lzma_filters_free(filters, NULL);
 
 	assert_true(lzma_str_to_filters("lzma2:dict=40Mi", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	opts = filters[0].options;
 	assert_uint_eq(opts->dict_size, 40 << 20);
 
 	lzma_filters_free(filters, NULL);
 
 	assert_true(lzma_str_to_filters("lzma2:dict=1g", &error_pos, filters,
 			0, NULL) == NULL);
 
 	assert_uint_eq(filters[0].id, LZMA_FILTER_LZMA2);
 	assert_uint_eq(filters[1].id, LZMA_VLI_UNKNOWN);
 
 	opts = filters[0].options;
 	assert_uint_eq(opts->dict_size, 1 << 30);
 
 	lzma_filters_free(filters, NULL);
 }
 
 
 static void
 test_lzma_str_from_filters(void)
 {
 	lzma_filter filters[LZMA_FILTERS_MAX];
 	filters[0].id = LZMA_VLI_UNKNOWN;
 
 	char *output_str = NULL;
 
 	// Test basic NULL inputs.
 	assert_lzma_ret(lzma_str_from_filters(NULL, filters, 0, NULL),
 			LZMA_PROG_ERROR);
 
 	assert_lzma_ret(lzma_str_from_filters(&output_str, NULL, 0, NULL),
 			LZMA_PROG_ERROR);
 
 	// Test with empty filters array.
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters, 0, NULL),
 			LZMA_OPTIONS_ERROR);
 
 	// Create a simple filter array only containing an LZMA2 Filter.
 	assert_true(lzma_str_to_filters("lzma2", NULL, filters, 0, NULL)
 			== NULL);
 
 	// Test with bad flags.
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters,
 			LZMA_STR_ALL_FILTERS, NULL), LZMA_OPTIONS_ERROR);
 
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters,
 			LZMA_STR_NO_VALIDATION, NULL), LZMA_OPTIONS_ERROR);
 
 	// Test with no flags.
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters, 0, NULL),
 			LZMA_OK);
 
 	assert_str_eq(output_str, "lzma2");
 	free(output_str);
 
 	// Test LZMA_STR_ENCODER flag.
 	// Only the the return value is checked since the actual string
 	// may change in the future (even though it is unlikely).
 	// The order of options or the inclusion of new options could
 	// cause a change in output, so we will avoid hardcoding an
 	// expected result.
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters,
 			LZMA_STR_ENCODER, NULL), LZMA_OK);
 	free(output_str);
 
 	// Test LZMA_STR_DECODER flag.
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters,
 			LZMA_STR_DECODER, NULL), LZMA_OK);
 	free(output_str);
 
 	// Test LZMA_STR_GETOPT_LONG flag.
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters,
 			LZMA_STR_GETOPT_LONG, NULL), LZMA_OK);
 	free(output_str);
 
 	// Test LZMA_STR_NO_SPACES flag.
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters,
 			LZMA_STR_NO_SPACES, NULL), LZMA_OK);
 
 	// Check to be sure there are no spaces.
 	assert_true(strchr(output_str, ' ') == NULL);
 
 	free(output_str);
 
 	lzma_filters_free(filters, NULL);
 
 #if defined(HAVE_ENCODER_X86) || defined(HAVE_DECODER_X86)
 	assert_true(lzma_str_to_filters("x86 lzma2", NULL, filters, 0, NULL)
 			== NULL);
 
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters, 0, NULL),
 			LZMA_OK);
 
 	assert_str_eq(output_str, "x86 lzma2");
 
 	free(output_str);
 
 	// Test setting BCJ option to NULL.
 	assert_false(filters[0].options == NULL);
 	free(filters[0].options);
 
 	filters[0].options = NULL;
 
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters, 0, NULL),
 			LZMA_OK);
 
 	assert_str_eq(output_str, "x86 lzma2");
 
 	lzma_filters_free(filters, NULL);
 	free(output_str);
 #endif
 
 	lzma_options_lzma opts;
 	assert_false(lzma_lzma_preset(&opts, LZMA_PRESET_DEFAULT));
 	// Test with too many Filters (array terminated after 4+ filters).
 	lzma_filter oversized_filters[LZMA_FILTERS_MAX + 2];
 
 	for (uint32_t i = 0; i < ARRAY_SIZE(oversized_filters) - 1; i++) {
 		oversized_filters[i].id = LZMA_FILTER_LZMA2;
 		oversized_filters[i].options = &opts;
 	}
 
 	oversized_filters[LZMA_FILTERS_MAX + 1].id = LZMA_VLI_UNKNOWN;
 	oversized_filters[LZMA_FILTERS_MAX + 1].options = NULL;
 
 	assert_lzma_ret(lzma_str_from_filters(&output_str, oversized_filters,
 			0, NULL), LZMA_OPTIONS_ERROR);
 
 	// Test with NULL filter options (when they cannot be NULL).
 	filters[0].id = LZMA_FILTER_LZMA2;
 	filters[0].options = NULL;
 	filters[1].id = LZMA_VLI_UNKNOWN;
 
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters,
 			LZMA_STR_ENCODER, NULL), LZMA_OPTIONS_ERROR);
 
 	// Test with bad Filter ID.
 	filters[0].id = LZMA_VLI_UNKNOWN - 1;
 	assert_lzma_ret(lzma_str_from_filters(&output_str, filters,
 			LZMA_STR_ENCODER, NULL), LZMA_OPTIONS_ERROR);
 }
 
 
 static const char supported_encoders[][9] = {
 	"lzma2",
 #ifdef HAVE_ENCODER_X86
 	"x86",
 #endif
 #ifdef HAVE_ENCODER_POWERPC
 	"powerpc",
 #endif
 #ifdef HAVE_ENCODER_IA64
 	"ia64",
 #endif
 #ifdef HAVE_ENCODER_ARM
 	"arm",
 #endif
 #ifdef HAVE_ENCODER_ARMTHUMB
 	"armthumb",
 #endif
 #ifdef HAVE_ENCODER_SPARC
 	"sparc",
 #endif
 #ifdef HAVE_ENCODER_ARM64
 	"arm64",
 #endif
 #ifdef HAVE_ENCODER_DELTA
 	"delta",
 #endif
 };
 
 static const char supported_decoders[][9] = {
 	"lzma2",
 #ifdef HAVE_DECODER_X86
 	"x86",
 #endif
 #ifdef HAVE_DECODER_POWERPC
 	"powerpc",
 #endif
 #ifdef HAVE_DECODER_IA64
 	"ia64",
 #endif
 #ifdef HAVE_DECODER_ARM
 	"arm",
 #endif
 #ifdef HAVE_DECODER_ARMTHUMB
 	"armthumb",
 #endif
 #ifdef HAVE_DECODER_SPARC
 	"sparc",
 #endif
 #ifdef HAVE_DECODER_ARM64
 	"arm64",
 #endif
+#ifdef HAVE_DECODER_RISCV
+	"riscv",
+#endif
 #ifdef HAVE_DECODER_DELTA
 	"delta",
 #endif
 };
 
 static const char supported_filters[][9] = {
 	"lzma2",
 #if defined(HAVE_ENCODER_X86) || defined(HAVE_DECODER_X86)
 	"x86",
 #endif
 #if defined(HAVE_ENCODER_POWERPC) || defined(HAVE_DECODER_POWERPC)
 	"powerpc",
 #endif
 #if defined(HAVE_ENCODER_IA64) || defined(HAVE_DECODER_IA64)
 	"ia64",
 #endif
 #if defined(HAVE_ENCODER_ARM) || defined(HAVE_DECODER_ARM)
 	"arm",
 #endif
 #if defined(HAVE_ENCODER_ARMTHUMB) || defined(HAVE_DECODER_ARMTHUMB)
 	"armthumb",
 #endif
 #if defined(HAVE_ENCODER_SPARC) || defined(HAVE_DECODER_SPARC)
 	"sparc",
 #endif
 #if defined(HAVE_ENCODER_ARM64) || defined(HAVE_DECODER_ARM64)
 	"arm64",
 #endif
+#if defined(HAVE_ENCODER_RISCV) || defined(HAVE_DECODER_RISCV)
+	"riscv",
+#endif
 #if defined(HAVE_ENCODER_DELTA) || defined(HAVE_DECODER_DELTA)
 	"delta",
 #endif
 };
 
 
 static void
 test_lzma_str_list_filters(void)
 {
 	// Test with basic NULL inputs.
 	assert_lzma_ret(lzma_str_list_filters(NULL, LZMA_VLI_UNKNOWN, 0,
 			NULL), LZMA_PROG_ERROR);
 
 	char *str = NULL;
 
 	// Test with bad flags.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_VLI_UNKNOWN,
 			LZMA_STR_NO_VALIDATION , NULL), LZMA_OPTIONS_ERROR);
 
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_VLI_UNKNOWN,
 			LZMA_STR_NO_SPACES, NULL), LZMA_OPTIONS_ERROR);
 
 	// Test with bad Filter ID.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_VLI_UNKNOWN - 1,
 			0, NULL), LZMA_OPTIONS_ERROR);
 
 	// Test LZMA_STR_ENCODER flag.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_VLI_UNKNOWN,
 			LZMA_STR_ENCODER, NULL), LZMA_OK);
 
 	for (uint32_t i = 0; i < ARRAY_SIZE(supported_encoders); i++)
 		assert_str_contains(str, supported_encoders[i]);
 
 	free(str);
 
 	// Test LZMA_STR_DECODER flag.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_VLI_UNKNOWN,
 			LZMA_STR_DECODER, NULL), LZMA_OK);
 
 	for (uint32_t i = 0; i < ARRAY_SIZE(supported_decoders); i++)
 		assert_str_contains(str, supported_decoders[i]);
 
 	free(str);
 
 	// Test LZMA_STR_GETOPT_LONG flag.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_VLI_UNKNOWN,
 			LZMA_STR_GETOPT_LONG, NULL), LZMA_OK);
 
 	free(str);
 
 	// Test LZMA_STR_ALL_FILTERS flag.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_VLI_UNKNOWN,
 			LZMA_STR_ALL_FILTERS, NULL), LZMA_OK);
 #if defined(HAVE_ENCODER_LZMA1) || defined(HAVE_DECODER_LZMA1)
 	// With the flag, the string should contain the LZMA1 Filter.
 	assert_str_contains(str, "lzma1");
 
 	free(str);
 
 	// If a non .xz filter is specified, it should still list the Filter.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_FILTER_LZMA1,
 			0, NULL), LZMA_OK);
 	assert_str_eq(str, "lzma1");
 #endif
 	free(str);
 
 	// Test with no flags.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_VLI_UNKNOWN,
 			0, NULL), LZMA_OK);
 
 	for (uint32_t i = 0; i < ARRAY_SIZE(supported_filters); i++)
 		assert_str_contains(str, supported_filters[i]);
 
 	assert_str_doesnt_contain(str, "lzma1");
 
 	free(str);
 
 	// Test providing a Filter ID.
 	assert_lzma_ret(lzma_str_list_filters(&str, LZMA_FILTER_LZMA2,
 			LZMA_STR_ALL_FILTERS, NULL), LZMA_OK);
 	assert_str_eq(str, "lzma2");
 
 	free(str);
 }
 
 
 extern int
 main(int argc, char **argv)
 {
 	tuktest_start(argc, argv);
 
 	tuktest_run(test_lzma_str_to_filters);
 	tuktest_run(test_lzma_str_from_filters);
 	tuktest_run(test_lzma_str_list_filters);
 
 	return tuktest_end();
 }