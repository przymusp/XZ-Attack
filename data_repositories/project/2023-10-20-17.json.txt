{"id":"32729128350","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15503657864,"size":30,"distinct_size":7,"ref":"refs/heads/sandbox_update","head":"67cb0d4d53d031e0eff36394c85ab40799362a56","before":"5b77b15b5c3df9c8ae234666df8ec95c737ced4d","commits":[{"sha":"f74f1740067b75042497edbfa6ea457ff75484b9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Update visibility.m4 from Gnulib.\n\nUpdating from version 6 -> 8 from upstream. Declarations for variables\nand function bodies were added to avoid unnecessary failures with\n-Werror.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f74f1740067b75042497edbfa6ea457ff75484b9"},{"sha":"f28cc9bd481ce493da11f98c18526d324211599a","author":{"email":"gabigutierrez@google.com","name":"Gabriela Gutierrez"},"message":"CI: Bump and ref actions by commit SHA in ci.yml\n\nReferencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.\n\nIt's important to make sure the SHA's are from the original repositories and not forks.\n\nFor reference:\n\nhttps://github.com/actions/checkout/releases/tag/v4.1.0\nhttps://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608\n\nhttps://github.com/actions/upload-artifact/releases/tag/v3.1.3\nhttps://github.com/actions/upload-artifact/commit/a8a3f3ad30e3422c9c7b888a15615d19a852ae32\n\nSigned-off-by: Gabriela Gutierrez <gabigutierrez@google.com>","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f28cc9bd481ce493da11f98c18526d324211599a"},{"sha":"37947d4a7565b87e4cec8b89229d35b0a3f8d2cd","author":{"email":"gabigutierrez@google.com","name":"Gabriela Gutierrez"},"message":"CI: Bump and ref actions by commit SHA in windows-ci.yml\n\nReferencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.\n\nIt's important to make sure the SHA's are from the original repositories and not forks.\n\nFor reference:\n\nhttps://github.com/msys2/setup-msys2/releases/tag/v2.20.1\nhttps://github.com/msys2/setup-msys2/commit/27b3aa77f672cb6b3054121cfd80c3d22ceebb1d\n\nhttps://github.com/actions/checkout/releases/tag/v4.1.0\nhttps://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608\n\nhttps://github.com/actions/upload-artifact/releases/tag/v3.1.3\nhttps://github.com/actions/upload-artifact/commit/a8a3f3ad30e3422c9c7b888a15615d19a852ae32\n\nSigned-off-by: Gabriela Gutierrez <gabigutierrez@google.com>","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/37947d4a7565b87e4cec8b89229d35b0a3f8d2cd"},{"sha":"233885a437f8b55a5c8442984ebc0aaa579e92de","author":{"email":"hansjansen162@outlook.com","name":"Hans Jansen"},"message":"liblzma: Rename crc_macros.h to crc_common.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/233885a437f8b55a5c8442984ebc0aaa579e92de"},{"sha":"93e6fb08b22c7c13be2dd1e7274fe78413436254","author":{"email":"hansjansen162@outlook.com","name":"Hans Jansen"},"message":"liblzma: Moved CLMUL CRC logic to crc_common.h.\n\ncrc64_fast.c was updated to use the code from crc_common.h instead.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/93e6fb08b22c7c13be2dd1e7274fe78413436254"},{"sha":"f1cd9d7194f005cd66ec03c6635ceae75f90ef17","author":{"email":"hansjansen162@outlook.com","name":"Hans Jansen"},"message":"liblzma: Added crc32_clmul to crc32_fast.c.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f1cd9d7194f005cd66ec03c6635ceae75f90ef17"},{"sha":"a3ebc2c516b09616638060806c841bd4bcf7bce3","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Define CRC_USE_IFUNC in crc_common.h.\n\nWhen ifunc is supported, we can define a simpler macro instead of\nrepeating the more complex check in both crc32_fast.c and crc64_fast.c.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a3ebc2c516b09616638060806c841bd4bcf7bce3"},{"sha":"8c0f9376f58c0696d5d6719705164d35542dd891","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Create crc_clmul.c.\n\nBoth crc32_clmul() and crc64_clmul() are now exported from\ncrc32_clmul.c as lzma_crc32_clmul() and lzma_crc64_clmul(). This\nensures that is_clmul_supported() (now lzma_is_clmul_supported()) is\nnot duplicated between crc32_fast.c and crc64_fast.c.\n\nAlso, it encapsulates the complexity of the CLMUL implementations into a\nsingle file and reduces the complexity of crc32_fast.c and crc64_fast.c.\nBefore, CLMUL code was present in crc32_fast.c, crc64_fast.c, and\ncrc_common.h.\n\nDuring the conversion, various cleanups were applied to code (thanks to\nLasse Collin) including:\n\n- Require using semicolons with MASK_/L/H/LH macros.\n- Variable typing and const handling improvements.\n- Improvements to comments.\n- Fixes to the pragmas used.\n- Removed unneeded variables.\n- Whitespace improvements.\n- Fixed CRC_USE_GENERIC_FOR_SMALL_INPUTS handling.\n- Silenced warnings and removed the need for some #pragmas","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8c0f9376f58c0696d5d6719705164d35542dd891"},{"sha":"96b663f67c0e738a99ba8f35d9f4ced9add74544","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Refactor CRC comments.\n\nA detailed description of the three dispatch methods was added. Also,\nduplicated comments now only appear in crc32_fast.c or were removed from\nboth crc32_fast.c and crc64_fast.c if they appeared in crc_clmul.c.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/96b663f67c0e738a99ba8f35d9f4ced9add74544"},{"sha":"a5966c276bd6fa975f0389f8a8dc61393de750b0","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Create crc_always_inline macro.\n\nThis macro must be used instead of the inline keyword. On MSVC, it is\na replacement for __forceinline which is an MSVC specific keyword that\nshould not be used with inline (it will issue a warning if it is).\n\nIt does not use a build system check to determine if\n__attribute__((__always_inline__)) since all compilers that can use\nCLMUL extensions (except the special case for MSVC) should support this\nattribute. If this assumption is incorrect then it will result in a bug\nreport instead of silently producing slow code.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a5966c276bd6fa975f0389f8a8dc61393de750b0"},{"sha":"40abd88afcc61a8157fcd12d78d491caeb8e12be","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Add the crc_always_inline macro to crc_simd_body().\n\nForcing this to be inline has a significant speed improvement at the\ncost of a few repeated instructions. The compilers tested on did not\ninline this function since it is large and is used twice in the same\ntranslation unit.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/40abd88afcc61a8157fcd12d78d491caeb8e12be"},{"sha":"e13b7947b92355c334edd594295d3a2c99c4bca1","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Add include guards to crc_common.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e13b7947b92355c334edd594295d3a2c99c4bca1"},{"sha":"27735380491bb5ce0d0f41d5244d89c1d0825f6b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Include common.h in crc_common.h.\n\ncrc_common.h depends on common.h. The headers include common.h except\nwhen there is a reason to not do so.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/27735380491bb5ce0d0f41d5244d89c1d0825f6b"},{"sha":"5ce0f7a48bdf5c3b45430850a4487307afac6143","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC_USE_GENERIC_FOR_SMALL_INPUTS cannot be used with ifunc.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5ce0f7a48bdf5c3b45430850a4487307afac6143"},{"sha":"1c8884f0af28b3a4690bb573cdf3240a8ec73416","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Set the MSVC optimization fix to only cover lzma_crc64_clmul().\n\nAfter testing a 32-bit Release build on MSVC, only lzma_crc64_clmul()\nhas the bug. crc_simd_body() and lzma_crc32_clmul() do not need the\noptimizations disabled.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1c8884f0af28b3a4690bb573cdf3240a8ec73416"},{"sha":"6828242735cbf61b93d140383336e1e51a006f2d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer: Add missing write64be and write64le fallback functions.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6828242735cbf61b93d140383336e1e51a006f2d"},{"sha":"c8f715f1bca4c30db814fcf1fd2fe88b8992ede2","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer: Revise unaligned reads and writes on strict-align archs.\n\nIn XZ Utils context this doesn't matter much because\nunaligned reads and writes aren't used in hot code\nwhen TUKLIB_FAST_UNALIGNED_ACCESS isn't #defined.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c8f715f1bca4c30db814fcf1fd2fe88b8992ede2"},{"sha":"2f81ac852bc5aafc91c8e2adc66b5114761703c4","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Enabled unaligned access by default on PowerPC64LE and some RISC-V.\n\nPowerPC64LE wasn't tested but it seems like a safe change.\nPOWER8 supports unaligned access in little endian mode. Testing\non godbolt.org shows that GCC uses unaligned access by default.\n\nThe RISC-V macro __riscv_misaligned_fast is very new and not\nin any stable compiler release yet.\n\nDocumentation in INSTALL was updated to match.\n\nDocumentation about an autodetection bug when using ARM64 GCC\nwith -mstrict-align was added to INSTALL.\n\nCMake files weren't updated yet.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2f81ac852bc5aafc91c8e2adc66b5114761703c4"},{"sha":"9a78971261bc67622cbd7dae02f6966968ac1393","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer: Update the CMake test for fast unaligned access.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/9a78971261bc67622cbd7dae02f6966968ac1393"},{"sha":"c60b25569d414bb73b705977a4dd342f8f9f1965","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix -fsanitize=address failure with crc_clmul functions.\n\nAfter forcing crc_simd_body() to always be inlined it caused\n-fsanitize=address to fail for lzma_crc32_clmul() and\nlzma_crc64_clmul(). The __no_sanitize_address__ attribute was added\nto lzma_crc32_clmul() and lzma_crc64_clmul(), but not removed from\ncrc_simd_body(). ASAN and inline functions behavior has changed over\nthe years for GCC specifically, so while strictly required we will\nkeep __attribute__((__no_sanitize_address__)) on crc_simd_body() in\ncase this becomes a requirement in the future.\n\nOlder GCC versions refuse to inline a function with ASAN if the\ncaller and callee do not agree on sanitization flags\n(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89124#c3). If the\nfunction was forced to be inlined, it will not compile if the callee\nfunction has __no_sanitize_address__ but the caller doesn't.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c60b25569d414bb73b705977a4dd342f8f9f1965"}]},"public":true,"created_at":"2023-10-20T17:01:24Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32729211993","type":"DeleteEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"ref":"crc_clmul","ref_type":"branch","pusher_type":"user"},"public":true,"created_at":"2023-10-20T17:05:14Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
