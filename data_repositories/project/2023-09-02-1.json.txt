{"id":"31549993849","type":"PushEvent","actor":{"id":39814207,"login":"pull[bot]","display_login":"pull","gravatar_id":"","url":"https://api.github.com/users/pull[bot]","avatar_url":"https://avatars.githubusercontent.com/u/39814207?"},"repo":{"id":551082309,"name":"SwannedLakee/llvm-project","url":"https://api.github.com/repos/SwannedLakee/llvm-project"},"payload":{"repository_id":551082309,"push_id":14895384946,"size":68,"distinct_size":68,"ref":"refs/heads/main","head":"69d79f1f77147e5787efc8aa0300ea12dec95932","before":"c389e37872ffa2ac528402b7f29a134254ade0a3","commits":[{"sha":"7c6544333eba516c1b569fb74288bbfe9ca54c1f","author":{"email":"david.spickett@linaro.org","name":"David Spickett"},"message":"[clang][Sema] Correct RUN line in fixit tests\n\nThese were missing the \":\" on the end.","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/7c6544333eba516c1b569fb74288bbfe9ca54c1f"},{"sha":"ef5219c18b252ac36815d5f322acab704259df08","author":{"email":"david.spickett@linaro.org","name":"David Spickett"},"message":"[clang][Driver] Correct OpenBSD UBSAN options test\n\nThe RUN here was mising \":\" and there was no check file passed\nto FileCheck. This has been the case since this was originally added.\n\nUBSAN is the only sanitizer that is available for OpenBSD,\nbut it does not add a simple \"-fsanitize=undefined\" instead\nit adds a bunch of smaller options. So check for those like\nthe existing tests do.","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/ef5219c18b252ac36815d5f322acab704259df08"},{"sha":"dc2c4fc784821bded8ef66198a68de9003edb3dd","author":{"email":"tobias.gysi@nextsilicon.com","name":"Tobias Gysi"},"message":"[mlir][llvm] Allow inlining for dbg label\n\nThe revision adds the dbg label intrinsic to the allow list of\noperations that are legal to inline.\n\nReviewed By: zero9178\n\nDifferential Revision: https://reviews.llvm.org/D159359","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/dc2c4fc784821bded8ef66198a68de9003edb3dd"},{"sha":"77d1032516e7057f185c5137071e4a97c3f3eb30","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm] Add assembly color highlighting\n\nAdd support for syntax highlighting assembly. The patch introduces new\nRAII helper called WithMarkup that takes care of both emitting colors\nand markup annotations. It makes adding markup easier and ensures colors\nand annotations remain consistent.\n\nThis patch adopts the new helper in the AArch64 backend. If your backend\nalready uses markup annotations, adoption is as easy as using the new\nMCInstPrinter::markup overload.\n\nDifferential revision: https://reviews.llvm.org/D159162","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/77d1032516e7057f185c5137071e4a97c3f3eb30"},{"sha":"46ea07bb140ee93f68f10b83b0b6f04aa2908129","author":{"email":"andrzej.warzynski@arm.com","name":"Andrzej Warzynski"},"message":"[mlir][transform] Extend `MaskedVectorizeOp` to work for regular vectorization too\n\nThis patch extends MaskedVectorizeOp so that it can be used for\n\"regular\" (as opposed to \"masked\") vectorization as well. While we can\nalready use VectorizeOp for \"regular\" vectorization, that Op will also\napply various patterns on top of vectorization. That means that at the\nmoment, when testing the vectorizer with VectorizeOp, we are effectively\ntesting \"vectorization + patterns\", i.e. 2 things at a time.\n\nWith these updates, you can trigger \"regular\" vectorization with\nMaskedVectorizeOp by simply skipping the vector sizes:\n\n  transform.structured.masked_vectorize %target : !transform.any_op\n\nFollowing this change we should probably also rename this Op.\n\nDifferential Revision: https://reviews.llvm.org/D157774","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/46ea07bb140ee93f68f10b83b0b6f04aa2908129"},{"sha":"8fb12f8aded6bb42c0e2c572fa805d67f0f1cb33","author":{"email":"amara@apple.com","name":"Amara Emerson"},"message":"[AArch64][GlobalISel] Re-generate stale test checks.","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/8fb12f8aded6bb42c0e2c572fa805d67f0f1cb33"},{"sha":"f41223eecaeb4d854500a13bd7f9be7529636cb5","author":{"email":"zhongyunde@huawei.com","name":"zhongyunde"},"message":"[AArch64][SVE2] Delete an unused parameter for isExtPartOfAvgExpr, NFC\n\nDepend on D157628, which set the cost of extends 0 because they will fold into\nthe s/urhadd.\n\nReviewed By: kmclaughlin\nDifferential Revision: https://reviews.llvm.org/D159273","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/f41223eecaeb4d854500a13bd7f9be7529636cb5"},{"sha":"1c35c1a73907a95ce54b5a0edca513591e2bc069","author":{"email":"pklausler@nvidia.com","name":"Peter Klausler"},"message":"[flang] Allow runtime build with AVOID_NATIVE_INT128_T=1\n\nThis patch enables the Fortran runtime support library to be\nbuilt without native 128-bit integer support in the C++ compiler.\n\nExperimental: do not merge yet.\n\nDifferential Revision: https://reviews.llvm.org/D154660","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/1c35c1a73907a95ce54b5a0edca513591e2bc069"},{"sha":"b6310e65f61c07e90fdbdc7f7158065fb0c94656","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Add lifetimebound attributes to clamp\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, arichardson, libcxx-commits\n\nDifferential Revision: https://reviews.llvm.org/D158327","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/b6310e65f61c07e90fdbdc7f7158065fb0c94656"},{"sha":"8eb34700c2b1847ec6dfb8f92b305b65278d2ec0","author":{"email":"ellis.sparky.hoag@gmail.com","name":"Ellis Hoag"},"message":"[SpecialCaseList] Add option to use Globs instead of Regex to match patterns\n\nAdd an option in `SpecialCaseList` to use Globs instead of Regex to match patterns. `GlobPattern` was extended in https://reviews.llvm.org/D153587 to support brace expansions which allows us to use patterns like `*/src/foo.{c,cpp}`. It turns out that most patterns only take advantage of `*` so using Regex was overkill and required lots of escaping in practice. This often led to bugs due to forgetting to escape special characters.\n\nSince this would be a breaking change, we temporarily support Regex by default and use Globs when `#!special-case-list-v2` is the first line in the file. Users should switch to the glob format described in https://llvm.org/doxygen/classllvm_1_1GlobPattern.html. For example, `(abc|def)` should become `{abc,def}`.\n\nSee discussion in https://reviews.llvm.org/D152762 and https://discourse.llvm.org/t/use-glob-instead-of-regex-for-specialcaselists/71666.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D154014","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/8eb34700c2b1847ec6dfb8f92b305b65278d2ec0"},{"sha":"0b8c636211b89ba721f060d30290e8a1992879b7","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"[MLIR] Move builtin.module LLVM IR translation to before nested operations\n\nThis patch moves the call for translating an MLIR module to LLVM IR to the\nbeginning of the translation process. This enables the use of dialect\nattributes attached to `builtin.module` operations and the `amendOperation()`\nflow to initialize dialect-specific global configuration before translating\nthe contents of the module.\n\nCurrently, this patch does not impact the generated IR on its own. Testing\ninfrastructure to allow translating the Test dialect to LLVM IR is added, so\nthat it can be checked that the current behavior is not broken in the future.\n\nDifferential Revision: https://reviews.llvm.org/D158278","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/0b8c636211b89ba721f060d30290e8a1992879b7"},{"sha":"0a97720d0197e60a10c93f8af7d24e5f6d6a9807","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Assume that __BYTE_ORDER__ is always present\n\nBoth Clang and GCC always define __BYTE_ORDER__, so there is no need to test the byte order a million different ways.\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, libcxx-commits, krytarowski\n\nDifferential Revision: https://reviews.llvm.org/D158216","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/0a97720d0197e60a10c93f8af7d24e5f6d6a9807"},{"sha":"f93c271d4cc11b865b87da1402e1cb33449fe4bf","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Object] Change OffloadBinary::write to return SmallString<0>\n\nSmallString<0> is more flexible and avoids an unneeded copy in\nObjectYAML/OffloadEmitter.cpp.\n\nReviewed By: jhuber6\n\nDifferential Revision: https://reviews.llvm.org/D159335","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/f93c271d4cc11b865b87da1402e1cb33449fe4bf"},{"sha":"14c58cf5c39a39a335893bc98493c5edc75a91b3","author":{"email":"ajcbik@google.com","name":"Aart Bik"},"message":"[mlir][sparse] simplification of sparse runtime support lib\n\nIncorporated two header files directly into other since\nother parts were used (and it makes it hard to find the\ndefinitions). Removed TODOs that are less likely to be done.\n\nReviewed By: Peiming\n\nDifferential Revision: https://reviews.llvm.org/D159330","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/14c58cf5c39a39a335893bc98493c5edc75a91b3"},{"sha":"95062d74676b98a85e4d3db6628d239b15dbeb35","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Enable disassembly color highlighting\n\nEnable color highlighting of disassembly in llvm-objdump. This patch\nintroduces a new flag --disassembler-color=<mode> that enables or\ndisables highlighting disassembly with ANSI escape codes. The default\nmode is to enable color highlighting if outputting to a color-enabled\nterminal.\n\nDifferential revision: https://reviews.llvm.org/D159224","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/95062d74676b98a85e4d3db6628d239b15dbeb35"},{"sha":"885d7b759b5c166c07c07f4c58c6e0ba110fb0c2","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] [builtins] Remove unused/misnamed x86 chkstk functions\n\nFor both MSVC and MinGW targets, the compiler generates calls to\nfunctions for probing the stack, in functions that allocate a larger\namount of stack space.\n\nThe exact behaviour of these functions differ per architecture (some\ndecrement the stack, some actually decrement the stack pointer,\nsome only probe the stack). In MSVC mode, the compiler always\ngenerates calls to a symbol named \"__chkstk\". In MinGW mode, the\nsymbol is named \"__alloca\" on i386 and \"___chkstk_ms\" on x86_64,\nbut the functions behave exactly the same as their MSVC counterparts\ndespite the differing names.\n\n(On i386, these names are the raw symbol names - if considering\na C level function name with the extra implicit leading underscore,\nthey would be called \"_chkstk\" and \"_alloca\".)\n\nRemove the misleading duplicate and unused functions. These were\nadded in fbfed869106cc9c9cad7538db5e65bcd24f4d92e /\nc27de5b2790b65394c50ba13fab319995dbf5956 (adding \"___chkstk_ms\"\nfor both architectures, even if that symbol name only was used\non x86_64) and 40eb83ba56ba9c1d2e6de44deacf889ac0143cf7\n(adding \"__alloca\" and \"___chkstk\", even if the former only was\nused on i386, and the latter seeming like a misspelled form of\nthe MSVC function, with three underscores instead of two).\n\nThe x86_64 \"___chkstk\" was doubly surprising as that function had\nthe same behaviour as the function used on i386, while the\n\"__chkstk\" that MSVC emitted calls to should behave exactly like\nthe preexisting \"___chkstk_ms\".\n\nRemove the unused functions, and rename the misspelled MSVC-like\nsymbols to the correct name that MSVC mode actually uses.\n\nNote that these files aren't assembled at all when building\ncompiler-rt builtins in MSVC mode, as they are expected to be\nprovided by MSVC libraries when building code in MSVC mode.\n\nDifferential Revision: https://reviews.llvm.org/D159139","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2"},{"sha":"1f9eff100ce8faea1284d68b779d844c6e019b77","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] Rename the now lone i386/chkstk2.S to i386/chkstk.S\n\nThis step was omitted from the previous commit,\n885d7b759b5c166c07c07f4c58c6e0ba110fb0c2, for clarity.","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/1f9eff100ce8faea1284d68b779d844c6e019b77"},{"sha":"b5f041f1fe75b400d41998d9c07bf5185cf431e3","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 1f9eff100ce8","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/b5f041f1fe75b400d41998d9c07bf5185cf431e3"},{"sha":"79d06eba71d914a04aee3659b995c93611a3219e","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 885d7b759b5c","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/79d06eba71d914a04aee3659b995c93611a3219e"},{"sha":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223","distinct":true,"url":"https://api.github.com/repos/SwannedLakee/llvm-project/commits/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"}]},"public":true,"created_at":"2023-09-02T01:09:14Z"}
