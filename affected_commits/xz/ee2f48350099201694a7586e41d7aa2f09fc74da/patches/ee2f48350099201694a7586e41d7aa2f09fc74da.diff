commit ee2f48350099201694a7586e41d7aa2f09fc74da
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 6 18:30:25 2023 +0800

    Tests: Minor cleanups to OSS-Fuzz files.
    
    Most of these fixes are small typos and tweaks. A few were caused by bad
    advice from me. Here is the summary of what is changed:
    
    - Author line edits
    
    - Small comment changes/additions
    
    - Using the return value in the error messages in the fuzz targets'
      coder initialization code
    
    - Removed fuzz_encode_stream.options. This set a max length, which may
      prevent some worthwhile code paths from being properly exercised.
    
    - Removed the max_len option from fuzz_decode_stream.options for the
      same reason as fuzz_encode_stream. The alone decoder fuzz target still
      has this restriction.
    
    - Altered the dictionary contents for fuzz_lzma.dict. Instead of keeping
      the properties static and varying the dictionary size, the properties
      are varied and the dictionary size is kept small. The dictionary size
      doesn't have much impact on the code paths but the properties do.
    
    Closes: https://github.com/tukaani-project/xz/pull/73

diff --git a/tests/ossfuzz/Makefile b/tests/ossfuzz/Makefile
index 008cd7df..a25bd0db 100644
--- a/tests/ossfuzz/Makefile
+++ b/tests/ossfuzz/Makefile
@@ -1,12 +1,15 @@
 FUZZ_TARGET_SRCS = $(wildcard *.c)
 FUZZ_TARGET_BINS = $(FUZZ_TARGET_SRCS:.c=)
 
 all: $(FUZZ_TARGET_BINS)
 
 %: %.c
 	$(CC) $(CFLAGS) -c $< -I ../../src/liblzma/api/ ;
 	$(CXX) $(CXXFLAGS) $(LIB_FUZZING_ENGINE) $(<:.c=.o) -o $(OUT)/$@ \
 		../../src/liblzma/.libs/liblzma.a ;
 
+# The generated binaries are not removed, just the object files. The
+# binaries are created to the $(OUT) directory and must be removed by the
+# fuzzing framework.
 clean:
 	rm -f *.o
diff --git a/tests/ossfuzz/config/fuzz_decode_stream.options b/tests/ossfuzz/config/fuzz_decode_stream.options
index 61799737..d8f9edba 100644
--- a/tests/ossfuzz/config/fuzz_decode_stream.options
+++ b/tests/ossfuzz/config/fuzz_decode_stream.options
@@ -1,3 +1,2 @@
 [libfuzzer]
-max_len = 4096
 dict = fuzz_xz.dict
diff --git a/tests/ossfuzz/config/fuzz_lzma.dict b/tests/ossfuzz/config/fuzz_lzma.dict
index 38d4da3e..82a2b871 100644
--- a/tests/ossfuzz/config/fuzz_lzma.dict
+++ b/tests/ossfuzz/config/fuzz_lzma.dict
@@ -1,22 +1,20 @@
 # first 5 header bytes of .lzma archives based on the info from
-# https://github.com/tukaani-project/xz/blob/master/doc/lzma-file-format.txt
+# /doc/lzma-file-format.txt
 
-# byte 0 value (properties=0x5d) is created by encoding
-# common values (lc=3, lp=0, pb=2) using the algorithm,
-# described in the documentation above
+# byte 0 is created by encoding LZMA property values (lc, lp, pb)
+# using the algorithm described in the documentation above.
 
-
-# compression preset 1    (dictionary size = 0x00100000)
+# lc=3, lp=0, pb=2 and dictionary size = 0x00100000
 "\x5d\x00\x00\x10\x00"
-# compression preset 2    (dictionary size = 0x00200000)
-"\x5d\x00\x00\x20\x00"
-# compression preset 3, 4 (dictionary size = 0x00400000)
-"\x5d\x00\x00\x40\x00"
-# compression preset 5, 6 (dictionary size = 0x00800000)
-"\x5d\x00\x00\x80\x00"
-# compression preset 7    (dictionary size = 0x01000000)
-"\x5d\x00\x00\x00\x01"
-# compression preset 8    (dictionary size = 0x02000000)
-"\x5d\x00\x00\x00\x02"
-# compression preset 9    (dictionary size = 0x04000000)
-"\x5d\x00\x00\x00\x04"
+
+# lc=3, lp=1, pb=3 and dictionary size = 0x00100000
+"\x93\x00\x00\x10\x00"
+
+# lc=2, lp=2, pb=4 and dictionary size = 0x00100000
+"\xc8\x00\x00\x10\x00"
+
+# lc=1, lp=3, pb=1 and dictionary size = 0x00200000
+"\x49\x00\x00\x20\x00"
+
+# lc=0, lp=4, pb=0 and dictionary size = 0x00200000
+"\x24\x00\x00\x20\x00"
diff --git a/tests/ossfuzz/fuzz_common.h b/tests/ossfuzz/fuzz_common.h
index ce3f9345..14742f2e 100644
--- a/tests/ossfuzz/fuzz_common.h
+++ b/tests/ossfuzz/fuzz_common.h
@@ -1,56 +1,56 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
-/// \file       fuzz_decode_auto.c
-/// \brief      Fuzz test program for liblzma lzma_auto_decoder()
+/// \file       fuzz_common.h
+/// \brief      Common macros and functions needed by the fuzz targets
 //
-//  Author:     Maksym Vatsyk
+//  Authors:    Maksym Vatsyk
+//              Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include <inttypes.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include "lzma.h"
 
 // Some header values can make liblzma allocate a lot of RAM
 // (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
 // prevent extreme allocations when fuzzing.
 #define MEM_LIMIT (300 << 20) // 300 MiB
 
 
-// Output buffer for decompressed data. This is write only; nothing cares
-// about the actual data written here.
-static uint8_t outbuf[4096];
-
-
 static void
 fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {
+	// Output buffer for decompressed data. This is write only; nothing
+	// cares about the actual data written here.
+	uint8_t outbuf[4096];
+
 	// Give the whole input buffer at once to liblzma.
 	// Output buffer isn't initialized as liblzma only writes to it.
 	stream->next_in = inbuf;
 	stream->avail_in = inbuf_size;
 	stream->next_out = outbuf;
 	stream->avail_out = sizeof(outbuf);
 
 	lzma_ret ret;
 	while ((ret = lzma_code(stream, LZMA_FINISH)) == LZMA_OK) {
 		if (stream->avail_out == 0) {
 			// outbuf became full. We don't care about the
 			// uncompressed data there, so we simply reuse
 			// the outbuf and overwrite the old data.
 			stream->next_out = outbuf;
 			stream->avail_out = sizeof(outbuf);
 		}
 	}
 
 	// LZMA_PROG_ERROR should never happen as long as the code calling
 	// the liblzma functions is correct. Thus LZMA_PROG_ERROR is a sign
 	// of a bug in either this function or in liblzma.
 	if (ret == LZMA_PROG_ERROR) {
 		fprintf(stderr, "lzma_code() returned LZMA_PROG_ERROR\n");
 		abort();
 	}
 }
diff --git a/tests/ossfuzz/fuzz_decode_alone.c b/tests/ossfuzz/fuzz_decode_alone.c
index d07874bc..2fb7bc09 100644
--- a/tests/ossfuzz/fuzz_decode_alone.c
+++ b/tests/ossfuzz/fuzz_decode_alone.c
@@ -1,41 +1,42 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
-/// \file       fuzz_decode_auto.c
-/// \brief      Fuzz test program for liblzma lzma_auto_decoder()
+/// \file       fuzz_decode_alone.c
+/// \brief      Fuzz test program for liblzma .lzma decoding
 //
-//  Author:     Maksym Vatsyk
-//
-//  Based on Lasse Collin's original fuzzer for liblzma
+//  Authors:    Maksym Vatsyk
+//              Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include <inttypes.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include "lzma.h"
 #include "fuzz_common.h"
 
 
 extern int
 LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
 {
 	lzma_stream strm = LZMA_STREAM_INIT;
 	// Initialize a LZMA alone decoder using the memory usage limit
 	// defined in fuzz_common.h
-	if (lzma_alone_decoder(&strm, MEM_LIMIT) != LZMA_OK) {
+	lzma_ret ret = lzma_alone_decoder(&strm, MEM_LIMIT);
+
+	if (ret != LZMA_OK) {
 		// This should never happen unless the system has
 		// no free memory or address space to allow the small
 		// allocations that the initialization requires.
-		fprintf(stderr, "lzma_alone_decoder() failed\n");
+		fprintf(stderr, "lzma_alone_decoder() failed (%d)\n", ret);
 		abort();
 	}
 
 	fuzz_code(&strm, inbuf, inbuf_size);
 
 	// Free the allocated memory.
 	lzma_end(&strm);
 	return 0;
 }
diff --git a/tests/ossfuzz/fuzz_decode_stream.c b/tests/ossfuzz/fuzz_decode_stream.c
index 1da8ecb3..e06613e3 100644
--- a/tests/ossfuzz/fuzz_decode_stream.c
+++ b/tests/ossfuzz/fuzz_decode_stream.c
@@ -1,53 +1,54 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       fuzz_decode_stream.c
-/// \brief      Fuzz test program for liblzma
-//
-//  Author:     Lasse Collin
+/// \brief      Fuzz test program for single threaded .xz decoding
 //
+//  Authors:    Lasse Collin
+//              Maksym Vatsyk
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include <inttypes.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include "lzma.h"
 #include "fuzz_common.h"
 
 
 extern int
 LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
 {
 	lzma_stream strm = LZMA_STREAM_INIT;
-	// Initialize a LZMA alone decoder using the memory usage limit
+	// Initialize a LZMA decoder using the memory usage limit
 	// defined in fuzz_common.h
 	//
 	// Enable support for concatenated .xz files which is used when
 	// decompressing regular .xz files (instead of data embedded inside
 	// some other file format). Integrity checks on the uncompressed
 	// data are ignored to make fuzzing more effective (incorrect check
 	// values won't prevent the decoder from processing more input).
 	//
 	// The flag LZMA_IGNORE_CHECK doesn't disable verification of
 	// header CRC32 values. Those checks are disabled when liblzma is
 	// built with the #define FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION.
+	lzma_ret ret = lzma_stream_decoder(&strm, MEM_LIMIT,
+			LZMA_CONCATENATED | LZMA_IGNORE_CHECK);
 
-	if (lzma_stream_decoder(&strm, MEM_LIMIT,
-			LZMA_CONCATENATED | LZMA_IGNORE_CHECK) != LZMA_OK) {
+	if (ret != LZMA_OK) {
 		// This should never happen unless the system has
 		// no free memory or address space to allow the small
 		// allocations that the initialization requires.
-		fprintf(stderr, "lzma_stream_decoder() failed\n");
+		fprintf(stderr, "lzma_stream_decoder() failed (%d)\n", ret);
 		abort();
 	}
 
 	fuzz_code(&strm, inbuf, inbuf_size);
 
 	// Free the allocated memory.
 	lzma_end(&strm);
 
 	return 0;
 }
diff --git a/tests/ossfuzz/fuzz_encode_stream.c b/tests/ossfuzz/fuzz_encode_stream.c
index 8ae8780e..f5770baa 100644
--- a/tests/ossfuzz/fuzz_encode_stream.c
+++ b/tests/ossfuzz/fuzz_encode_stream.c
@@ -1,79 +1,87 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       fuzz_encode_stream.c
-/// \brief      Fuzz test program for liblzma lzma_stream_encoder() w/ LZMA2
+/// \brief      Fuzz test program for .xz encoding
 //
-//  Author:     Maksym Vatsyk
-//
-//  Based on Lasse Collin's original fuzzer for liblzma
+//  Authors:    Maksym Vatsyk
+//              Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include <inttypes.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include "lzma.h"
 #include "fuzz_common.h"
 
 
 extern int
 LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
 {
 	if (inbuf_size == 0) {
 		fprintf(stderr, "no input data provided\n");
 		return 0;
 	}
 
-	// set LZMA preset level based on the first input byte
+	// Set the LZMA options based on the first input byte. The fuzzer
+	// will learn through its mutational genetic algorithm with the
+	// code coverage feedback that the first byte must be one of the
+	// values with a switch case label. This allows us to have one fuzz
+	// target cover many critical code paths so the fuzz resources can
+	// be used efficiently.
 	uint32_t preset_level;
-	uint8_t decider = inbuf[0];
+	const uint8_t decider = inbuf[0];
+
 	switch (decider) {
 	case 0:
 	case 1:
 	case 5:
 		preset_level = (uint32_t)decider;
 		break;
 	case 6:
 		preset_level = 0 | LZMA_PRESET_EXTREME;
 		break;
 	case 7:
 		preset_level = 3 | LZMA_PRESET_EXTREME;
 		break;
 	default:
 		return 0;
 	}
 
 	// Initialize lzma_options with the above preset level
 	lzma_options_lzma opt_lzma;
 	if (lzma_lzma_preset(&opt_lzma, preset_level)){
 		fprintf(stderr, "lzma_lzma_preset() failed\n");
 		abort();
 	}
 
-	// Initialize filter chain for lzma_stream_decoder() call
-	// Use single LZMA2 filter for encoding
-	lzma_filter filters[2];
-	filters[0].id = LZMA_FILTER_LZMA2;
-	filters[0].options = &opt_lzma;
-	filters[1].id = LZMA_VLI_UNKNOWN;
+	// Set the filter chain as only LZMA2.
+	lzma_filter filters[2] = {
+		{
+			.id = LZMA_FILTER_LZMA2,
+			.options = &opt_lzma,
+		}, {
+			.id = LZMA_VLI_UNKNOWN,
+		}
+	};
 
 	// initialize empty LZMA stream
 	lzma_stream strm = LZMA_STREAM_INIT;
 
 	// Initialize the stream encoder using the above
 	// stream, filter chain and CRC64.
-	if (lzma_stream_encoder(&strm,
-			filters, LZMA_CHECK_CRC64) != LZMA_OK) {
-		fprintf(stderr, "lzma_stream_encoder() failed\n");
+	lzma_ret ret = lzma_stream_encoder(&strm, filters, LZMA_CHECK_CRC64);
+	if (ret != LZMA_OK) {
+		fprintf(stderr, "lzma_stream_encoder() failed (%d)\n", ret);
 		abort();
 	}
 
 	fuzz_code(&strm, inbuf  + 1, inbuf_size - 1);
 
 	// Free the allocated memory.
 	lzma_end(&strm);
 	return 0;
 }