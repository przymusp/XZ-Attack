commit 3959162baec074511d83ba0fec1284c3ed724799
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 29 00:25:18 2022 +0800

    Tests: Creates test_index_hash.c
    
    Tests all API functions exported from index_hash.h. Does not have a
    dedicated test for lzma_index_hash_end.

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c4f10594..3a58d740 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,839 +1,841 @@
 #############################################################################
 #
 # Very limited CMake support for building some parts of XZ Utils
 #
 # For now, this is indented to be useful to build static or shared liblzma
 # on Windows with MSVC (to avoid the need to maintain Visual Studio project
 # files). Building liblzma on a few other platforms should work too but it
 # is somewhat experimental and not as portable as using ./configure.
 #
 # On some platforms this builds also xz and xzdec, but these are
 # highly experimental and meant for testing only:
 #   - No large file support on those 32-bit platforms that need it
 #   - No replacement getopt_long(), libc must have it
 #   - No sandboxing support
 #   - No translations
 #
 # Other missing things:
 #   - No xzgrep or other scripts or their symlinks
 #   - No xz tests (liblzma tests only)
 #
 # NOTE: Even if the code compiles without warnings, the end result may be
 # different than via ./configure. Specifically, the list of #defines
 # may be different (if so, probably this CMakeLists.txt got them wrong).
 #
 # This file provides the following installation components (if you only
 # need liblzma, install only its components!):
 #   - liblzma_Runtime
 #   - liblzma_Development
 #   - xz (on some platforms only)
 #   - xzdec (on some platforms only)
 #
 # To find the target liblzma::liblzma from other packages, use the CONFIG
 # option with find_package() to avoid a conflict with the FindLibLZMA module
 # with case-insensitive file systems. For example, to require liblzma 5.2.5
 # or a newer compatible version:
 #
 #     find_package(liblzma 5.2.5 REQUIRED CONFIG)
 #     target_link_libraries(my_application liblzma::liblzma)
 #
 #############################################################################
 #
 # Author: Lasse Collin
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 #############################################################################
 
 cmake_minimum_required(VERSION 3.13...3.16 FATAL_ERROR)
 
 include(CMakePushCheckState)
 include(CheckIncludeFile)
 include(CheckSymbolExists)
 include(CheckStructHasMember)
 include(CheckCSourceCompiles)
 include(cmake/tuklib_integer.cmake)
 include(cmake/tuklib_cpucores.cmake)
 include(cmake/tuklib_physmem.cmake)
 include(cmake/tuklib_progname.cmake)
 include(cmake/tuklib_mbstr.cmake)
 
 # Get the package version from version.h into XZ_VERSION variable.
 file(READ src/liblzma/api/lzma/version.h XZ_VERSION)
 string(REGEX REPLACE
 "^.*\n\
 #define LZMA_VERSION_MAJOR ([0-9]+)\n\
 #define LZMA_VERSION_MINOR ([0-9]+)\n\
 #define LZMA_VERSION_PATCH ([0-9]+)\n\
 .*$"
        "\\1.\\2.\\3" XZ_VERSION "${XZ_VERSION}")
 
 # Among other things, this gives us variables xz_VERSION and xz_VERSION_MAJOR.
 project(xz VERSION "${XZ_VERSION}" LANGUAGES C)
 
 # On Apple OSes, don't build executables as bundles:
 set(CMAKE_MACOSX_BUNDLE OFF)
 
 # Definitions common to all targets:
 add_compile_definitions(
     # Package info:
     PACKAGE_NAME="XZ Utils"
     PACKAGE_BUGREPORT="xz@tukaani.org"
     PACKAGE_URL="https://tukaani.org/xz/"
 
     # Features:
     HAVE_CHECK_CRC32
     HAVE_CHECK_CRC64
     HAVE_CHECK_SHA256
     HAVE_DECODERS
     HAVE_DECODER_ARM
     HAVE_DECODER_ARMTHUMB
     HAVE_DECODER_ARM64
     HAVE_DECODER_DELTA
     HAVE_DECODER_IA64
     HAVE_DECODER_LZMA1
     HAVE_DECODER_LZMA2
     HAVE_DECODER_POWERPC
     HAVE_DECODER_SPARC
     HAVE_DECODER_X86
     HAVE_ENCODERS
     HAVE_ENCODER_ARM
     HAVE_ENCODER_ARMTHUMB
     HAVE_ENCODER_ARM64
     HAVE_ENCODER_DELTA
     HAVE_ENCODER_IA64
     HAVE_ENCODER_LZMA1
     HAVE_ENCODER_LZMA2
     HAVE_ENCODER_POWERPC
     HAVE_ENCODER_SPARC
     HAVE_ENCODER_X86
     HAVE_MF_BT2
     HAVE_MF_BT3
     HAVE_MF_BT4
     HAVE_MF_HC3
     HAVE_MF_HC4
     HAVE_LZIP_DECODER
 
     # Standard headers and types are available:
     HAVE_STDBOOL_H
     HAVE__BOOL
     HAVE_STDINT_H
     HAVE_INTTYPES_H
 
     # Disable assert() checks when no build type has been specified. Non-empty
     # build types like "Release" and "Debug" handle this by default.
     $<$<CONFIG:>:NDEBUG>
 )
 
 # _GNU_SOURCE and such definitions. This specific macro is special since
 # it also adds the definitions to CMAKE_REQUIRED_DEFINITIONS.
 tuklib_use_system_extensions(ALL)
 
 # This is needed by liblzma and xz.
 tuklib_integer(ALL)
 
 # Check for clock_gettime(). Do this before checking for threading so
 # that we know there if CLOCK_MONOTONIC is available.
 if(NOT WIN32 AND NOT DEFINED HAVE_CLOCK_GETTIME)
     check_symbol_exists(clock_gettime time.h HAVE_CLOCK_GETTIME)
     if(NOT HAVE_CLOCK_GETTIME)
         # With glibc <= 2.17 or Solaris 10 this needs librt.
         unset(HAVE_CLOCK_GETTIME CACHE)
 
         list(INSERT CMAKE_REQUIRED_LIBRARIES 0 rt)
         check_symbol_exists(clock_gettime time.h HAVE_CLOCK_GETTIME)
 
         # If it was found now, add it to all targets and keep it
         # in CMAKE_REQUIRED_LIBRARIES for further tests too.
         if(HAVE_CLOCK_GETTIME)
             link_libraries(rt)
         else()
             list(REMOVE_AT CMAKE_REQUIRED_LIBRARIES 0)
         endif()
     endif()
     if(HAVE_CLOCK_GETTIME)
         # Check if CLOCK_MONOTONIC is available for clock_gettime().
         check_symbol_exists(CLOCK_MONOTONIC time.h HAVE_CLOCK_MONOTONIC)
 
         add_compile_definitions(
             HAVE_CLOCK_GETTIME
             HAVE_CLOCK_MONOTONIC
         )
     endif()
 endif()
 
 # Threading support:
 set(THREADS_PREFER_PTHREAD_FLAG TRUE)
 find_package(Threads REQUIRED)
 if(CMAKE_USE_WIN32_THREADS_INIT)
     if(CMAKE_SIZEOF_VOID_P EQUAL 4)
         # Define to 1 when using Windows 95 (and thus XP) compatible threads. This
         # avoids use of features that were added in Windows Vista.
         # This is used for 32-bit x86 builds for compatibility reasons since it
         # makes no measurable difference in performance compared to Vista threads.
         add_compile_definitions(MYTHREAD_WIN95)
     else()
         # Define to 1 when using Windows Vista compatible threads. This uses features
         # that are not available on Windows XP.
         add_compile_definitions(MYTHREAD_VISTA)
     endif()
 else()
     add_compile_definitions(MYTHREAD_POSIX)
 
     # Check if pthread_condattr_setclock() exists to use CLOCK_MONOTONIC.
     if(HAVE_CLOCK_MONOTONIC)
         list(INSERT CMAKE_REQUIRED_LIBRARIES 0 "${CMAKE_THREAD_LIBS_INIT}")
         check_symbol_exists(pthread_condattr_setclock pthread.h
                             HAVE_PTHREAD_CONDATTR_SETCLOCK)
         tuklib_add_definition_if(ALL HAVE_PTHREAD_CONDATTR_SETCLOCK)
     endif()
 endif()
 
 # Options for new enough GCC or Clang on any arch or operating system:
 if(CMAKE_C_COMPILER_ID MATCHES GNU|Clang)
     # configure.ac has a long list but it won't be copied here:
     add_compile_options(-Wall -Wextra)
 endif()
 
 
 #############################################################################
 # liblzma
 #############################################################################
 
 option(BUILD_SHARED_LIBS "Build liblzma as a shared library instead of static")
 
 add_library(liblzma
     src/common/mythread.h
     src/common/sysdefs.h
     src/common/tuklib_common.h
     src/common/tuklib_config.h
     src/common/tuklib_cpucores.c
     src/common/tuklib_cpucores.h
     src/common/tuklib_integer.h
     src/common/tuklib_physmem.c
     src/common/tuklib_physmem.h
     src/liblzma/api/lzma.h
     src/liblzma/api/lzma/base.h
     src/liblzma/api/lzma/bcj.h
     src/liblzma/api/lzma/block.h
     src/liblzma/api/lzma/check.h
     src/liblzma/api/lzma/container.h
     src/liblzma/api/lzma/delta.h
     src/liblzma/api/lzma/filter.h
     src/liblzma/api/lzma/hardware.h
     src/liblzma/api/lzma/index.h
     src/liblzma/api/lzma/index_hash.h
     src/liblzma/api/lzma/lzma12.h
     src/liblzma/api/lzma/stream_flags.h
     src/liblzma/api/lzma/version.h
     src/liblzma/api/lzma/vli.h
     src/liblzma/check/check.c
     src/liblzma/check/check.h
     src/liblzma/check/crc32_fast.c
     src/liblzma/check/crc32_table.c
     src/liblzma/check/crc32_table_be.h
     src/liblzma/check/crc32_table_le.h
     src/liblzma/check/crc64_fast.c
     src/liblzma/check/crc64_table.c
     src/liblzma/check/crc64_table_be.h
     src/liblzma/check/crc64_table_le.h
     src/liblzma/check/crc_macros.h
     src/liblzma/check/sha256.c
     src/liblzma/common/alone_decoder.c
     src/liblzma/common/alone_decoder.h
     src/liblzma/common/alone_encoder.c
     src/liblzma/common/auto_decoder.c
     src/liblzma/common/block_buffer_decoder.c
     src/liblzma/common/block_buffer_encoder.c
     src/liblzma/common/block_buffer_encoder.h
     src/liblzma/common/block_decoder.c
     src/liblzma/common/block_decoder.h
     src/liblzma/common/block_encoder.c
     src/liblzma/common/block_encoder.h
     src/liblzma/common/block_header_decoder.c
     src/liblzma/common/block_header_encoder.c
     src/liblzma/common/block_util.c
     src/liblzma/common/common.c
     src/liblzma/common/common.h
     src/liblzma/common/easy_buffer_encoder.c
     src/liblzma/common/easy_decoder_memusage.c
     src/liblzma/common/easy_encoder.c
     src/liblzma/common/easy_encoder_memusage.c
     src/liblzma/common/easy_preset.c
     src/liblzma/common/easy_preset.h
     src/liblzma/common/file_info.c
     src/liblzma/common/filter_buffer_decoder.c
     src/liblzma/common/filter_buffer_encoder.c
     src/liblzma/common/filter_common.c
     src/liblzma/common/filter_common.h
     src/liblzma/common/filter_decoder.c
     src/liblzma/common/filter_decoder.h
     src/liblzma/common/filter_encoder.c
     src/liblzma/common/filter_encoder.h
     src/liblzma/common/filter_flags_decoder.c
     src/liblzma/common/filter_flags_encoder.c
     src/liblzma/common/hardware_cputhreads.c
     src/liblzma/common/hardware_physmem.c
     src/liblzma/common/index.c
     src/liblzma/common/index.h
     src/liblzma/common/index_decoder.c
     src/liblzma/common/index_decoder.h
     src/liblzma/common/index_encoder.c
     src/liblzma/common/index_encoder.h
     src/liblzma/common/index_hash.c
     src/liblzma/common/lzip_decoder.c
     src/liblzma/common/lzip_decoder.h
     src/liblzma/common/memcmplen.h
     src/liblzma/common/outqueue.c
     src/liblzma/common/outqueue.h
     src/liblzma/common/stream_buffer_decoder.c
     src/liblzma/common/stream_buffer_encoder.c
     src/liblzma/common/stream_decoder.c
     src/liblzma/common/stream_decoder_mt.c
     src/liblzma/common/stream_decoder.h
     src/liblzma/common/stream_encoder.c
     src/liblzma/common/stream_encoder_mt.c
     src/liblzma/common/stream_flags_common.c
     src/liblzma/common/stream_flags_common.h
     src/liblzma/common/stream_flags_decoder.c
     src/liblzma/common/stream_flags_encoder.c
     src/liblzma/common/string_conversion.c
     src/liblzma/common/vli_decoder.c
     src/liblzma/common/vli_encoder.c
     src/liblzma/common/vli_size.c
     src/liblzma/delta/delta_common.c
     src/liblzma/delta/delta_common.h
     src/liblzma/delta/delta_decoder.c
     src/liblzma/delta/delta_decoder.h
     src/liblzma/delta/delta_encoder.c
     src/liblzma/delta/delta_encoder.h
     src/liblzma/delta/delta_private.h
     src/liblzma/lz/lz_decoder.c
     src/liblzma/lz/lz_decoder.h
     src/liblzma/lz/lz_encoder.c
     src/liblzma/lz/lz_encoder.h
     src/liblzma/lz/lz_encoder_hash.h
     src/liblzma/lz/lz_encoder_hash_table.h
     src/liblzma/lz/lz_encoder_mf.c
     src/liblzma/lzma/fastpos.h
     src/liblzma/lzma/fastpos_table.c
     src/liblzma/lzma/lzma2_decoder.c
     src/liblzma/lzma/lzma2_decoder.h
     src/liblzma/lzma/lzma2_encoder.c
     src/liblzma/lzma/lzma2_encoder.h
     src/liblzma/lzma/lzma_common.h
     src/liblzma/lzma/lzma_decoder.c
     src/liblzma/lzma/lzma_decoder.h
     src/liblzma/lzma/lzma_encoder.c
     src/liblzma/lzma/lzma_encoder.h
     src/liblzma/lzma/lzma_encoder_optimum_fast.c
     src/liblzma/lzma/lzma_encoder_optimum_normal.c
     src/liblzma/lzma/lzma_encoder_presets.c
     src/liblzma/lzma/lzma_encoder_private.h
     src/liblzma/rangecoder/price.h
     src/liblzma/rangecoder/price_table.c
     src/liblzma/rangecoder/range_common.h
     src/liblzma/rangecoder/range_decoder.h
     src/liblzma/rangecoder/range_encoder.h
     src/liblzma/simple/arm.c
     src/liblzma/simple/armthumb.c
     src/liblzma/simple/arm64.c
     src/liblzma/simple/ia64.c
     src/liblzma/simple/powerpc.c
     src/liblzma/simple/simple_coder.c
     src/liblzma/simple/simple_coder.h
     src/liblzma/simple/simple_decoder.c
     src/liblzma/simple/simple_decoder.h
     src/liblzma/simple/simple_encoder.c
     src/liblzma/simple/simple_encoder.h
     src/liblzma/simple/simple_private.h
     src/liblzma/simple/sparc.c
     src/liblzma/simple/x86.c
 )
 
 target_include_directories(liblzma PRIVATE
     src/liblzma/api
     src/liblzma/common
     src/liblzma/check
     src/liblzma/lz
     src/liblzma/rangecoder
     src/liblzma/lzma
     src/liblzma/delta
     src/liblzma/simple
     src/common
 )
 
 target_link_libraries(liblzma Threads::Threads)
 
 # Put the tuklib functions under the lzma_ namespace.
 target_compile_definitions(liblzma PRIVATE TUKLIB_SYMBOL_PREFIX=lzma_)
 tuklib_cpucores(liblzma)
 tuklib_physmem(liblzma)
 
 # While liblzma can be built without tuklib_cpucores or tuklib_physmem
 # modules, the liblzma API functions lzma_cputhreads() and lzma_physmem()
 # will then be useless (which isn't too bad but still unfortunate). Since
 # I expect the CMake-based builds to be only used on systems that are
 # supported by these tuklib modules, problems with these tuklib modules
 # are considered a hard error for now. This hopefully helps to catch bugs
 # in the CMake versions of the tuklib checks.
 if(NOT TUKLIB_CPUCORES_FOUND OR NOT TUKLIB_PHYSMEM_FOUND)
     # Use SEND_ERROR instead of FATAL_ERROR. If someone reports a bug,
     # seeing the results of the remaining checks can be useful too.
     message(SEND_ERROR
             "tuklib_cpucores() or tuklib_physmem() failed. "
             "Unless you really are building for a system where these "
             "modules are not supported (unlikely), this is a bug in the "
             "included cmake/tuklib_*.cmake files that should be fixed. "
             "To build anyway, edit this CMakeLists.txt to ignore this error.")
 endif()
 
 # Check for __attribute__((__constructor__)) support.
 # This needs -Werror because some compilers just warn
 # about this being unsupported.
 cmake_push_check_state()
 set(CMAKE_REQUIRED_FLAGS "-Werror")
 check_c_source_compiles("
         __attribute__((__constructor__))
         static void my_constructor_func(void) { return; }
         int main(void) { return 0; }
     "
     HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR)
 cmake_pop_check_state()
 tuklib_add_definition_if(liblzma HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR)
 
 # cpuid.h
 check_include_file(cpuid.h HAVE_CPUID_H)
 tuklib_add_definition_if(liblzma HAVE_CPUID_H)
 
 # immintrin.h:
 check_include_file(immintrin.h HAVE_IMMINTRIN_H)
 if(HAVE_IMMINTRIN_H)
     target_compile_definitions(liblzma PRIVATE HAVE_IMMINTRIN_H)
 
     # SSE2 intrinsics:
     check_c_source_compiles("
             #include <immintrin.h>
             int main(void)
             {
                 __m128i x = { 0 };
                 _mm_movemask_epi8(x);
                 return 0;
             }
         "
         HAVE__MM_MOVEMASK_EPI8)
     tuklib_add_definition_if(liblzma HAVE__MM_MOVEMASK_EPI8)
 
     # CLMUL intrinsic:
     check_c_source_compiles("
             #include <immintrin.h>
             #if defined(__e2k__) && __iset__ < 6
             #   error
             #endif
             #if (defined(__GNUC__) || defined(__clang__)) && !defined(__EDG__)
             __attribute__((__target__(\"ssse3,sse4.1,pclmul\")))
             #endif
             __m128i my_clmul(__m128i a, __m128i b)
             {
                 return _mm_clmulepi64_si128(a, b, 0);
             }
             int main(void) { return 0; }
     "
     HAVE_USABLE_CLMUL)
     tuklib_add_definition_if(liblzma HAVE_USABLE_CLMUL)
 endif()
 
 # Support -fvisiblity=hidden when building shared liblzma.
 # These lines do nothing on Windows (even under Cygwin).
 # HAVE_VISIBILITY should always be defined to 0 or 1.
 if(BUILD_SHARED_LIBS)
     set_target_properties(liblzma PROPERTIES C_VISIBILITY_PRESET hidden)
     target_compile_definitions(liblzma PRIVATE HAVE_VISIBILITY=1)
 else()
     target_compile_definitions(liblzma PRIVATE HAVE_VISIBILITY=0)
 endif()
 
 if(WIN32)
     if(BUILD_SHARED_LIBS)
         # Add the Windows resource file for liblzma.dll.
         target_sources(liblzma PRIVATE src/liblzma/liblzma_w32res.rc)
 
         set_target_properties(liblzma PROPERTIES
             LINK_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/src/common/common_w32res.rc"
         )
 
         # Export the public API symbols with __declspec(dllexport).
         target_compile_definitions(liblzma PRIVATE DLL_EXPORT)
     else()
         # Disable __declspec(dllimport) when linking against static liblzma.
         target_compile_definitions(liblzma INTERFACE LZMA_API_STATIC)
     endif()
 elseif(BUILD_SHARED_LIBS AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
     # GNU/Linux-specific symbol versioning for shared liblzma.
     # Note that adding link options doesn't affect static builds
     # but HAVE_SYMBOL_VERSIONS_LINUX must not be used with static builds
     # because it would put symbol versions into the static library which
     # can cause problems. It's clearer if all symver related things are
     # omitted when not building a shared library.
     #
     # NOTE: Set it explicitly to 1 to make it clear that versioning is
     # done unconditionally in the C files.
     target_compile_definitions(liblzma PRIVATE HAVE_SYMBOL_VERSIONS_LINUX=1)
     target_link_options(liblzma PRIVATE
         "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/src/liblzma/liblzma_linux.map"
     )
     set_target_properties(liblzma PROPERTIES
         LINK_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/src/liblzma/liblzma_linux.map"
     )
 elseif(BUILD_SHARED_LIBS AND CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
     # Symbol versioning for shared liblzma for non-GNU/Linux.
     # FIXME? What about Solaris?
     target_link_options(liblzma PRIVATE
         "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/src/liblzma/liblzma_generic.map"
     )
     set_target_properties(liblzma PROPERTIES
         LINK_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/src/liblzma/liblzma_generic.map"
     )
 endif()
 
 set_target_properties(liblzma PROPERTIES
     # At least for now the package versioning matches the rules used for
     # shared library versioning (excluding development releases) so it is
     # fine to use the package version here.
     SOVERSION "${xz_VERSION_MAJOR}"
     VERSION "${xz_VERSION}"
 
     # It's liblzma.so or liblzma.dll, not libliblzma.so or lzma.dll.
     # Avoid the name lzma.dll because it would conflict with LZMA SDK.
     PREFIX ""
 )
 
 # Create liblzma-config-version.cmake. We use this spelling instead of
 # liblzmaConfig.cmake to make find_package work in case insensitive manner
 # even with case sensitive file systems. This gives more consistent behavior
 # between operating systems.
 #
 # FIXME: SameMajorVersion is correct for stable releases but it is wrong
 # for development releases where each release may have incompatible changes.
 include(CMakePackageConfigHelpers)
 write_basic_package_version_file(
     "${CMAKE_CURRENT_BINARY_DIR}/liblzma-config-version.cmake"
     VERSION "${liblzma_VERSION}"
     COMPATIBILITY SameMajorVersion)
 
 # Create liblzma-config.cmake.
 file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/liblzma-config.cmake"
 "include(CMakeFindDependencyMacro)
 set(THREADS_PREFER_PTHREAD_FLAG TRUE)
 find_dependency(Threads)
 
 include(\"\${CMAKE_CURRENT_LIST_DIR}/liblzma-targets.cmake\")
 
 # Be compatible with the spelling used by the FindLibLZMA module. This
 # doesn't use ALIAS because it would make CMake resolve LibLZMA::LibLZMA
 # to liblzma::liblzma instead of keeping the original spelling. Keeping
 # the original spelling is important for good FindLibLZMA compatibility.
 add_library(LibLZMA::LibLZMA INTERFACE IMPORTED)
 set_target_properties(LibLZMA::LibLZMA PROPERTIES
                       INTERFACE_LINK_LIBRARIES liblzma::liblzma)
 ")
 
 # Set CMAKE_INSTALL_LIBDIR and friends.
 include(GNUInstallDirs)
 
 # Install the library binary. The INCLUDES specifies the include path that
 # is exported for other projects to use but it doesn't install any files.
 install(TARGETS liblzma EXPORT liblzmaTargets
         RUNTIME  DESTINATION "${CMAKE_INSTALL_BINDIR}"
                  COMPONENT liblzma_Runtime
         LIBRARY  DESTINATION "${CMAKE_INSTALL_LIBDIR}"
                  COMPONENT liblzma_Runtime
                  NAMELINK_COMPONENT liblzma_Development
         ARCHIVE  DESTINATION "${CMAKE_INSTALL_LIBDIR}"
                  COMPONENT liblzma_Development
         INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
 
 # Install the liblzma API headers. These use a subdirectory so
 # this has to be done as a separate step.
 install(DIRECTORY src/liblzma/api/
         COMPONENT liblzma_Development
         DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
         FILES_MATCHING PATTERN "*.h")
 
 # Install the CMake files that other packages can use to find liblzma.
 set(liblzma_INSTALL_CMAKEDIR
     "${CMAKE_INSTALL_LIBDIR}/cmake/liblzma"
     CACHE STRING "Path to liblzma's .cmake files")
 
 install(EXPORT liblzmaTargets
         NAMESPACE liblzma::
         FILE liblzma-targets.cmake
         DESTINATION "${liblzma_INSTALL_CMAKEDIR}"
         COMPONENT liblzma_Development)
 
 install(FILES "${CMAKE_CURRENT_BINARY_DIR}/liblzma-config.cmake"
               "${CMAKE_CURRENT_BINARY_DIR}/liblzma-config-version.cmake"
         DESTINATION "${liblzma_INSTALL_CMAKEDIR}"
         COMPONENT liblzma_Development)
 
 
 #############################################################################
 # getopt_long
 #############################################################################
 
 # The command line tools needs this.
 check_symbol_exists(getopt_long getopt.h HAVE_GETOPT_LONG)
 
 
 #############################################################################
 # xzdec
 #############################################################################
 
 if(HAVE_GETOPT_LONG)
     add_executable(xzdec
         src/common/sysdefs.h
         src/common/tuklib_common.h
         src/common/tuklib_config.h
         src/common/tuklib_exit.c
         src/common/tuklib_exit.h
         src/common/tuklib_gettext.h
         src/common/tuklib_progname.c
         src/common/tuklib_progname.h
         src/xzdec/xzdec.c
     )
 
     target_include_directories(xzdec PRIVATE
         src/common
         src/liblzma/api
     )
 
     target_link_libraries(xzdec PRIVATE liblzma)
 
     tuklib_progname(xzdec)
 
     install(TARGETS xzdec
             RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
                     COMPONENT xzdec)
 
     if(UNIX)
         install(FILES src/xzdec/xzdec.1
                 DESTINATION "${CMAKE_INSTALL_MANDIR}/man1"
                 COMPONENT xzdec)
     endif()
 endif()
 
 
 #############################################################################
 # xz
 #############################################################################
 
 if(NOT MSVC AND HAVE_GETOPT_LONG)
     add_executable(xz
         src/common/mythread.h
         src/common/sysdefs.h
         src/common/tuklib_common.h
         src/common/tuklib_config.h
         src/common/tuklib_exit.c
         src/common/tuklib_exit.h
         src/common/tuklib_gettext.h
         src/common/tuklib_integer.h
         src/common/tuklib_mbstr.h
         src/common/tuklib_mbstr_fw.c
         src/common/tuklib_mbstr_width.c
         src/common/tuklib_open_stdxxx.c
         src/common/tuklib_open_stdxxx.h
         src/common/tuklib_progname.c
         src/common/tuklib_progname.h
         src/xz/args.c
         src/xz/args.h
         src/xz/coder.c
         src/xz/coder.h
         src/xz/file_io.c
         src/xz/file_io.h
         src/xz/hardware.c
         src/xz/hardware.h
         src/xz/list.c
         src/xz/list.h
         src/xz/main.c
         src/xz/main.h
         src/xz/message.c
         src/xz/message.h
         src/xz/mytime.c
         src/xz/mytime.h
         src/xz/options.c
         src/xz/options.h
         src/xz/private.h
         src/xz/signals.c
         src/xz/signals.h
         src/xz/suffix.c
         src/xz/suffix.h
         src/xz/util.c
         src/xz/util.h
     )
 
     target_include_directories(xz PRIVATE
         src/common
         src/liblzma/api
     )
 
     target_link_libraries(xz PRIVATE liblzma)
 
     target_compile_definitions(xz PRIVATE ASSUME_RAM=128)
 
     tuklib_progname(xz)
     tuklib_mbstr(xz)
 
     check_symbol_exists(optreset getopt.h HAVE_OPTRESET)
     tuklib_add_definition_if(xz HAVE_OPTRESET)
 
     check_symbol_exists(posix_fadvise fcntl.h HAVE_POSIX_FADVISE)
     tuklib_add_definition_if(xz HAVE_POSIX_FADVISE)
 
     # How to get file time:
     check_struct_has_member("struct stat" st_atim.tv_nsec
                             "sys/types.h;sys/stat.h"
                             HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC)
     if(HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC)
         tuklib_add_definitions(xz HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC)
     else()
         check_struct_has_member("struct stat" st_atimespec.tv_nsec
                                 "sys/types.h;sys/stat.h"
                                 HAVE_STRUCT_STAT_ST_ATIMESPEC_TV_NSEC)
         if(HAVE_STRUCT_STAT_ST_ATIMESPEC_TV_NSEC)
             tuklib_add_definitions(xz HAVE_STRUCT_STAT_ST_ATIMESPEC_TV_NSEC)
         else()
             check_struct_has_member("struct stat" st_atimensec
                                     "sys/types.h;sys/stat.h"
                                     HAVE_STRUCT_STAT_ST_ATIMENSEC)
             tuklib_add_definition_if(xz HAVE_STRUCT_STAT_ST_ATIMENSEC)
         endif()
     endif()
 
     # How to set file time:
     check_symbol_exists(futimens "sys/types.h;sys/stat.h" HAVE_FUTIMENS)
     if(HAVE_FUTIMENS)
         tuklib_add_definitions(xz HAVE_FUTIMENS)
     else()
         check_symbol_exists(futimes "sys/time.h" HAVE_FUTIMES)
         if(HAVE_FUTIMES)
             tuklib_add_definitions(xz HAVE_FUTIMES)
         else()
             check_symbol_exists(futimesat "sys/time.h" HAVE_FUTIMESAT)
             if(HAVE_FUTIMESAT)
                 tuklib_add_definitions(xz HAVE_FUTIMESAT)
             else()
                 check_symbol_exists(utimes "sys/time.h" HAVE_UTIMES)
                 if(HAVE_UTIMES)
                     tuklib_add_definitions(xz HAVE_UTIMES)
                 else()
                     check_symbol_exists(_futime "sys/utime.h" HAVE__FUTIME)
                     if(HAVE__FUTIME)
                         tuklib_add_definitions(xz HAVE__FUTIME)
                     else()
                         check_symbol_exists(utime "utime.h" HAVE_UTIME)
                         tuklib_add_definition_if(xz HAVE_UTIME)
                     endif()
                 endif()
             endif()
         endif()
     endif()
 
     install(TARGETS xz
             RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
                     COMPONENT xz)
 
     if(UNIX)
         install(FILES src/xz/xz.1
                 DESTINATION "${CMAKE_INSTALL_MANDIR}/man1"
                 COMPONENT xz)
 
         option(CREATE_XZ_SYMLINKS "Create unxz and xzcat symlinks" ON)
         option(CREATE_LZMA_SYMLINKS "Create lzma, unlzma, and lzcat symlinks"
                ON)
         set(XZ_LINKS)
 
         if(CREATE_XZ_SYMLINKS)
             list(APPEND XZ_LINKS "unxz" "xzcat")
         endif()
 
         if(CREATE_LZMA_SYMLINKS)
             list(APPEND XZ_LINKS "lzma" "unlzma" "lzcat")
         endif()
 
         # Create symlinks in the build directory and then install them.
         #
         # The symlinks do not likely need any special extension since
         # even on Windows the symlink can still be executed without
         # the .exe extension.
         foreach(LINK IN LISTS XZ_LINKS)
             add_custom_target("${LINK}" ALL
                 "${CMAKE_COMMAND}" -E create_symlink
                     "$<TARGET_FILE_NAME:xz>" "${LINK}"
                 BYPRODUCTS "${LINK}"
                 VERBATIM)
             install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${LINK}"
                     DESTINATION "${CMAKE_INSTALL_BINDIR}"
                     COMPONENT xz)
             add_custom_target("${LINK}.1" ALL
                 "${CMAKE_COMMAND}" -E create_symlink "xz.1" "${LINK}.1"
                 BYPRODUCTS "${LINK}.1"
                 VERBATIM)
             install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${LINK}.1"
                     DESTINATION "${CMAKE_INSTALL_MANDIR}/man1"
                     COMPONENT xz)
         endforeach()
     endif()
 endif()
 
 
 #############################################################################
 # Tests
 #############################################################################
 
 include(CTest)
 
 if(BUILD_TESTING)
     set(LIBLZMA_TESTS
         test_bcj_exact_size
         test_block_header
         test_check
         test_filter_flags
         test_hardware
         test_index
+        test_index_hash
         test_memlimit
         test_stream_flags
         test_vli
     )
 
     foreach(TEST IN LISTS LIBLZMA_TESTS)
         add_executable("${TEST}" "tests/${TEST}.c")
 
         target_include_directories("${TEST}" PRIVATE
             src/common
             src/liblzma/api
+            src/liblzma
             lib
         )
 
         target_link_libraries("${TEST}" PRIVATE liblzma)
 
         # Put the test programs into their own subdirectory so they don't
         # pollute the top-level dir which might contain xz and xzdec.
         set_target_properties("${TEST}" PROPERTIES
             RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/tests_bin"
         )
 
         add_test(NAME "${TEST}"
                  COMMAND "${CMAKE_CURRENT_BINARY_DIR}/tests_bin/${TEST}"
         )
 
         # Set srcdir environment variable so that the tests find their
         # input files from the source tree.
         #
         # Set the return code for skipped tests to match Automake convention.
         set_tests_properties("${TEST}" PROPERTIES
             ENVIRONMENT "srcdir=${CMAKE_CURRENT_LIST_DIR}/tests"
             SKIP_RETURN_CODE 77
         )
     endforeach()
 endif()
diff --git a/tests/Makefile.am b/tests/Makefile.am
index f84c1749..b1a2378a 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -1,76 +1,79 @@
 ##
 ## Author: Lasse Collin
 ##
 ## This file has been put into the public domain.
 ## You can do whatever you want with this file.
 ##
 
 EXTRA_DIST = \
 	files \
 	ossfuzz \
 	tuktest.h \
 	tests.h \
 	test_files.sh \
 	test_compress.sh \
 	test_compress_prepared_bcj_sparc \
 	test_compress_prepared_bcj_x86 \
 	test_compress_generated_abc \
 	test_compress_generated_random \
 	test_compress_generated_text \
 	test_scripts.sh \
 	bcj_test.c \
 	compress_prepared_bcj_sparc \
 	compress_prepared_bcj_x86 \
 	xzgrep_expected_output
 
 AM_CPPFLAGS = \
 	-I$(top_srcdir)/src/common \
 	-I$(top_srcdir)/src/liblzma/api \
+	-I$(top_srcdir)/src/liblzma \
 	-I$(top_builddir)/lib
 
 LDADD = $(top_builddir)/src/liblzma/liblzma.la
 
 if COND_GNULIB
 LDADD += $(top_builddir)/lib/libgnu.a
 endif
 
 LDADD += $(LTLIBINTL)
 
 check_PROGRAMS = \
 	create_compress_files \
 	test_check \
 	test_hardware \
 	test_stream_flags \
 	test_filter_flags \
 	test_block_header \
 	test_index \
+	test_index_hash \
 	test_bcj_exact_size \
 	test_memlimit \
 	test_lzip_decoder \
 	test_vli
 
 TESTS = \
 	test_check \
 	test_hardware \
 	test_stream_flags \
 	test_filter_flags \
 	test_block_header \
 	test_index \
+	test_index_hash \
 	test_bcj_exact_size \
 	test_memlimit \
 	test_lzip_decoder \
 	test_vli \
 	test_files.sh \
 	test_compress_prepared_bcj_sparc \
 	test_compress_prepared_bcj_x86 \
 	test_compress_generated_abc \
 	test_compress_generated_random \
 	test_compress_generated_text
 
 if COND_SCRIPTS
 TESTS += test_scripts.sh
 endif
 
 clean-local:
 	-rm -f compress_generated_* \
 		xzgrep_test_output xzgrep_test_1.xz xzgrep_test_2.xz
diff --git a/tests/test_index_hash.c b/tests/test_index_hash.c
new file mode 100644
index 00000000..a3c021b9
--- /dev/null
+++ b/tests/test_index_hash.c
@@ -0,0 +1,379 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       test_index_hash.c
+/// \brief      Tests src/liblzma/common/index_hash.c API functions
+///
+/// \note       No test included for lzma_index_hash_end since it
+///             would be trivial unless tested for memory leaks
+///             with something like valgrind
+//
+//  Author:     Jia Tan
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include "tests.h"
+// Needed for UNPADDED_SIZE_MIN and UNPADDED_SIZE_MAX macro definitions
+// and index_size and vli_ceil4 helper functions
+#include "common/index.h"
+
+
+static void
+test_lzma_index_hash_init(void)
+{
+#ifndef HAVE_DECODERS
+	assert_skip("Decoder support disabled");
+#else
+	// First test with NULL index hash
+	// This should create a fresh index hash
+	lzma_index_hash *index_hash = lzma_index_hash_init(NULL, NULL);
+	assert_true(index_hash != NULL);
+
+	// Next test with non-NULL index hash
+	lzma_index_hash *second_hash = lzma_index_hash_init(index_hash, NULL);
+
+	// Should not create a new index_hash pointer
+	// Instead must just re-init the first index hash
+	assert_true(index_hash == second_hash);
+
+	lzma_index_hash_end(index_hash, NULL);
+#endif
+}
+
+
+static void
+test_lzma_index_hash_append(void)
+{
+#ifndef HAVE_DECODERS
+	assert_skip("Decoder support disabled");
+#else
+	// Test all invalid parameters
+	assert_lzma_ret(lzma_index_hash_append(NULL, 0, 0),
+			LZMA_PROG_ERROR);
+
+	// Test NULL index_hash
+	assert_lzma_ret(lzma_index_hash_append(NULL, UNPADDED_SIZE_MIN,
+			LZMA_VLI_MAX), LZMA_PROG_ERROR);
+
+	// Test with invalid unpadded size
+	lzma_index_hash *index_hash = lzma_index_hash_init(NULL, NULL);
+	assert_true(index_hash);
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			UNPADDED_SIZE_MIN - 1, LZMA_VLI_MAX),
+			LZMA_PROG_ERROR);
+
+	// Test with invalid uncompressed size
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			UNPADDED_SIZE_MIN, LZMA_VLI_MAX + 1),
+			LZMA_PROG_ERROR);
+
+	// Append first a small "block" to the index, which should succeed
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			UNPADDED_SIZE_MIN, 1), LZMA_OK);
+
+	// Append another small "block"
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			UNPADDED_SIZE_MIN, 1), LZMA_OK);
+
+	// Append a block that would cause the compressed size to grow
+	// too big
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			UNPADDED_SIZE_MAX, 1), LZMA_DATA_ERROR);
+
+	lzma_index_hash_end(index_hash, NULL);
+#endif
+}
+
+#ifdef HAVE_DECODERS
+// Fill an index_hash with unpadded and uncompressed VLIs
+// by calling lzma_index_hash_append
+static void
+fill_index_hash(lzma_index_hash *index_hash, const lzma_vli *unpadded_sizes,
+		const lzma_vli *uncomp_sizes, uint32_t block_count)
+{
+	for(uint32_t i = 0; i < block_count; i++)
+		assert_lzma_ret(lzma_index_hash_append(index_hash,
+			unpadded_sizes[i], uncomp_sizes[i]), LZMA_OK);
+}
+
+
+#ifdef HAVE_ENCODERS
+// Set the index parameter to the expected index based on the
+// xz specification. Needs the unpadded and uncompressed VLIs
+// to correctly create the index
+static void
+generate_index(uint8_t *index, const lzma_vli *unpadded_sizes,
+		const lzma_vli *uncomp_sizes, uint32_t block_count,
+		size_t index_max_size)
+{
+	size_t in_pos = 0;
+	size_t out_pos = 0;
+	// First set index indicator
+	index[out_pos++] = 0;
+
+	// Next write out Number of Records
+	assert_lzma_ret(lzma_vli_encode(block_count, &in_pos, index,
+			&out_pos, index_max_size), LZMA_STREAM_END);
+
+	// Next write out each record
+	// A record consists of unpadded size and uncompressed size
+	// written next to each other as VLIs
+	for (uint32_t i = 0; i < block_count; i++) {
+		in_pos = 0;
+		assert_lzma_ret(lzma_vli_encode(unpadded_sizes[i], &in_pos,
+			index, &out_pos, index_max_size), LZMA_STREAM_END);
+		in_pos = 0;
+		assert_lzma_ret(lzma_vli_encode(uncomp_sizes[i], &in_pos,
+			index, &out_pos, index_max_size), LZMA_STREAM_END);
+	}
+
+	// Add index padding
+	lzma_vli rounded_out_pos = vli_ceil4(out_pos);
+	memzero(index + out_pos, rounded_out_pos - out_pos);
+	out_pos = rounded_out_pos;
+
+	// Add the CRC32
+	write32le(index + out_pos, lzma_crc32(index, out_pos, 0));
+}
+#endif
+#endif
+
+
+static void
+test_lzma_index_hash_decode(void)
+{
+#if !defined(HAVE_ENCODERS) || !defined(HAVE_DECODERS)
+	assert_skip("Encoder or decoder support disabled");
+#else
+	lzma_index_hash *index_hash = lzma_index_hash_init(NULL, NULL);
+	assert_true(index_hash);
+
+	size_t in_pos = 0;
+
+	// Six valid sizes for unpadded data sizes
+	const lzma_vli unpadded_sizes[6] = {
+		UNPADDED_SIZE_MIN,
+		1000,
+		4000,
+		8000,
+		16000,
+		32000
+	};
+
+	// Six valid sizes for uncompressed data sizes
+	const lzma_vli uncomp_sizes[6] = {
+		1,
+		500,
+		8000,
+		20,
+		1,
+		500
+	};
+
+	// Add two entries to a index hash
+	fill_index_hash(index_hash, unpadded_sizes, uncomp_sizes, 2);
+
+	const lzma_vli size_two_entries = lzma_index_hash_size(index_hash);
+	assert_uint(size_two_entries, >, 0);
+	uint8_t *index_two_entries = tuktest_malloc(size_two_entries);
+
+	generate_index(index_two_entries, unpadded_sizes, uncomp_sizes, 2,
+			size_two_entries);
+
+	// First test for basic buffer size error
+	in_pos = size_two_entries + 1;
+	assert_lzma_ret(lzma_index_hash_decode(index_hash,
+			index_two_entries, &in_pos,
+			size_two_entries), LZMA_BUF_ERROR);
+
+	// Next test for invalid index indicator
+	in_pos = 0;
+	index_two_entries[0] ^= 1;
+	assert_lzma_ret(lzma_index_hash_decode(index_hash,
+			index_two_entries, &in_pos,
+			size_two_entries), LZMA_DATA_ERROR);
+	index_two_entries[0] ^= 1;
+
+	// Next verify the index_hash as expected
+	in_pos = 0;
+	assert_lzma_ret(lzma_index_hash_decode(index_hash,
+			index_two_entries, &in_pos,
+			size_two_entries), LZMA_STREAM_END);
+
+	// Next test a three entry index hash
+	index_hash = lzma_index_hash_init(index_hash, NULL);
+	fill_index_hash(index_hash, unpadded_sizes, uncomp_sizes, 3);
+
+	const lzma_vli size_three_entries = lzma_index_hash_size(
+			index_hash);
+	assert_uint(size_three_entries, >, 0);
+	uint8_t *index_three_entries = tuktest_malloc(size_three_entries);
+
+	generate_index(index_three_entries, unpadded_sizes, uncomp_sizes,
+			3, size_three_entries);
+
+	in_pos = 0;
+	assert_lzma_ret(lzma_index_hash_decode(index_hash,
+			index_three_entries, &in_pos,
+			size_three_entries), LZMA_STREAM_END);
+
+	// Next test a five entry index hash
+	index_hash = lzma_index_hash_init(index_hash, NULL);
+	fill_index_hash(index_hash, unpadded_sizes, uncomp_sizes, 5);
+
+	const lzma_vli size_five_entries = lzma_index_hash_size(
+			index_hash);
+	assert_uint(size_five_entries, >, 0);
+	uint8_t *index_five_entries = tuktest_malloc(size_five_entries);
+
+	generate_index(index_five_entries, unpadded_sizes, uncomp_sizes, 5,
+			size_five_entries);
+
+	// Instead of testing all input at once, give input
+	// one byte at a time
+	in_pos = 0;
+	for (lzma_vli i = 0; i < size_five_entries - 1; i++) {
+		assert_lzma_ret(lzma_index_hash_decode(index_hash,
+				index_five_entries, &in_pos, in_pos + 1),
+				LZMA_OK);
+	}
+
+	// Last byte should return LZMA_STREAM_END
+	assert_lzma_ret(lzma_index_hash_decode(index_hash,
+			index_five_entries, &in_pos,
+			in_pos + 1), LZMA_STREAM_END);
+
+	// Next test if the index hash is given an incorrect unpadded
+	// size. Should detect and report LZMA_DATA_ERROR
+	index_hash = lzma_index_hash_init(index_hash, NULL);
+	fill_index_hash(index_hash, unpadded_sizes, uncomp_sizes, 5);
+	// The sixth entry will have invalid unpadded size
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			unpadded_sizes[5] + 1,
+			uncomp_sizes[5]), LZMA_OK);
+
+	const lzma_vli size_six_entries = lzma_index_hash_size(
+			index_hash);
+
+	assert_uint(size_six_entries, >, 0);
+	uint8_t *index_six_entries = tuktest_malloc(size_six_entries);
+
+	generate_index(index_six_entries, unpadded_sizes, uncomp_sizes, 6,
+			size_six_entries);
+	in_pos = 0;
+	assert_lzma_ret(lzma_index_hash_decode(index_hash,
+			index_six_entries, &in_pos,
+			size_six_entries), LZMA_DATA_ERROR);
+
+	// Next test if the index is corrupt (invalid CRC)
+	// Should detect and report LZMA_DATA_ERROR
+	index_hash = lzma_index_hash_init(index_hash, NULL);
+	fill_index_hash(index_hash, unpadded_sizes, uncomp_sizes, 2);
+
+	index_two_entries[size_two_entries - 1] ^= 1;
+
+	in_pos = 0;
+	assert_lzma_ret(lzma_index_hash_decode(index_hash,
+			index_two_entries, &in_pos,
+			size_two_entries), LZMA_DATA_ERROR);
+
+	// Next test with index and index_hash struct not matching
+	// an entry
+	index_hash = lzma_index_hash_init(index_hash, NULL);
+	fill_index_hash(index_hash, unpadded_sizes, uncomp_sizes, 2);
+	// Recalculate index with invalid unpadded size
+	const lzma_vli unpadded_sizes_invalid[2] = {
+		unpadded_sizes[0],
+		unpadded_sizes[1] + 1
+	};
+
+	generate_index(index_two_entries, unpadded_sizes_invalid,
+			uncomp_sizes, 2, size_two_entries);
+
+	in_pos = 0;
+	assert_lzma_ret(lzma_index_hash_decode(index_hash,
+			index_two_entries, &in_pos,
+			size_two_entries), LZMA_DATA_ERROR);
+
+	lzma_index_hash_end(index_hash, NULL);
+#endif
+}
+
+
+static void
+test_lzma_index_hash_size(void)
+{
+#ifndef HAVE_DECODERS
+	assert_skip("Decoder support disabled");
+#else
+	lzma_index_hash *index_hash = lzma_index_hash_init(NULL, NULL);
+	assert_true(index_hash);
+
+	// First test empty index hash
+	// Expected size should be:
+	// Index Indicator - 1 byte
+	// Number of Records - 1 byte
+	// List of Records - 0 bytes
+	// Index Padding - 2 bytes
+	// CRC32 - 4 bytes
+	// Total - 8 bytes
+	assert_uint_eq(lzma_index_hash_size(index_hash), 8);
+
+	// Append a small block to the index hash
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			UNPADDED_SIZE_MIN, 1), LZMA_OK);
+
+	// Expected size should be:
+	// Index Indicator - 1 byte
+	// Number of Records - 1 byte
+	// List of Records - 2 bytes
+	// Index Padding - 0 bytes
+	// CRC32 - 4 bytes
+	// Total - 8 bytes
+	lzma_vli expected_size = 8;
+	assert_uint_eq(lzma_index_hash_size(index_hash), expected_size);
+
+	// Append additional small block
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			UNPADDED_SIZE_MIN, 1), LZMA_OK);
+
+	// Expected size should be:
+	// Index Indicator - 1 byte
+	// Number of Records - 1 byte
+	// List of Records - 4 bytes
+	// Index Padding - 2 bytes
+	// CRC32 - 4 bytes
+	// Total - 12 bytes
+	expected_size = 12;
+	assert_uint_eq(lzma_index_hash_size(index_hash), expected_size);
+
+	// Append a larger block to the index hash (3 bytes for each vli)
+	const lzma_vli three_byte_vli = 0x10000;
+	assert_lzma_ret(lzma_index_hash_append(index_hash,
+			three_byte_vli, three_byte_vli), LZMA_OK);
+
+	// Expected size should be:
+	// Index Indicator - 1 byte
+	// Number of Records - 1 byte
+	// List of Records - 10 bytes
+	// Index Padding - 0 bytes
+	// CRC32 - 4 bytes
+	// Total - 16 bytes
+	expected_size = 16;
+	assert_uint_eq(lzma_index_hash_size(index_hash), expected_size);
+#endif
+}
+
+
+extern int
+main(int argc, char **argv)
+{
+	tuktest_start(argc, argv);
+	tuktest_run(test_lzma_index_hash_init);
+	tuktest_run(test_lzma_index_hash_append);
+	tuktest_run(test_lzma_index_hash_decode);
+	tuktest_run(test_lzma_index_hash_size);
+	return tuktest_end();
+}