{"id":"31548379386","type":"PushEvent","actor":{"id":10580822,"login":"dpaoliello","display_login":"dpaoliello","gravatar_id":"","url":"https://api.github.com/users/dpaoliello","avatar_url":"https://avatars.githubusercontent.com/u/10580822?"},"repo":{"id":297484931,"name":"dpaoliello/llvm-project","url":"https://api.github.com/repos/dpaoliello/llvm-project"},"payload":{"repository_id":297484931,"push_id":14894469222,"size":51,"distinct_size":51,"ref":"refs/heads/main","head":"a69f78b080ef7efd2854ba199248713d956ea40c","before":"1c35c1a73907a95ce54b5a0edca513591e2bc069","commits":[{"sha":"b6310e65f61c07e90fdbdc7f7158065fb0c94656","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Add lifetimebound attributes to clamp\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, arichardson, libcxx-commits\n\nDifferential Revision: https://reviews.llvm.org/D158327","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/b6310e65f61c07e90fdbdc7f7158065fb0c94656"},{"sha":"8eb34700c2b1847ec6dfb8f92b305b65278d2ec0","author":{"email":"ellis.sparky.hoag@gmail.com","name":"Ellis Hoag"},"message":"[SpecialCaseList] Add option to use Globs instead of Regex to match patterns\n\nAdd an option in `SpecialCaseList` to use Globs instead of Regex to match patterns. `GlobPattern` was extended in https://reviews.llvm.org/D153587 to support brace expansions which allows us to use patterns like `*/src/foo.{c,cpp}`. It turns out that most patterns only take advantage of `*` so using Regex was overkill and required lots of escaping in practice. This often led to bugs due to forgetting to escape special characters.\n\nSince this would be a breaking change, we temporarily support Regex by default and use Globs when `#!special-case-list-v2` is the first line in the file. Users should switch to the glob format described in https://llvm.org/doxygen/classllvm_1_1GlobPattern.html. For example, `(abc|def)` should become `{abc,def}`.\n\nSee discussion in https://reviews.llvm.org/D152762 and https://discourse.llvm.org/t/use-glob-instead-of-regex-for-specialcaselists/71666.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D154014","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/8eb34700c2b1847ec6dfb8f92b305b65278d2ec0"},{"sha":"0b8c636211b89ba721f060d30290e8a1992879b7","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"[MLIR] Move builtin.module LLVM IR translation to before nested operations\n\nThis patch moves the call for translating an MLIR module to LLVM IR to the\nbeginning of the translation process. This enables the use of dialect\nattributes attached to `builtin.module` operations and the `amendOperation()`\nflow to initialize dialect-specific global configuration before translating\nthe contents of the module.\n\nCurrently, this patch does not impact the generated IR on its own. Testing\ninfrastructure to allow translating the Test dialect to LLVM IR is added, so\nthat it can be checked that the current behavior is not broken in the future.\n\nDifferential Revision: https://reviews.llvm.org/D158278","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/0b8c636211b89ba721f060d30290e8a1992879b7"},{"sha":"0a97720d0197e60a10c93f8af7d24e5f6d6a9807","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Assume that __BYTE_ORDER__ is always present\n\nBoth Clang and GCC always define __BYTE_ORDER__, so there is no need to test the byte order a million different ways.\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, libcxx-commits, krytarowski\n\nDifferential Revision: https://reviews.llvm.org/D158216","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/0a97720d0197e60a10c93f8af7d24e5f6d6a9807"},{"sha":"f93c271d4cc11b865b87da1402e1cb33449fe4bf","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Object] Change OffloadBinary::write to return SmallString<0>\n\nSmallString<0> is more flexible and avoids an unneeded copy in\nObjectYAML/OffloadEmitter.cpp.\n\nReviewed By: jhuber6\n\nDifferential Revision: https://reviews.llvm.org/D159335","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/f93c271d4cc11b865b87da1402e1cb33449fe4bf"},{"sha":"14c58cf5c39a39a335893bc98493c5edc75a91b3","author":{"email":"ajcbik@google.com","name":"Aart Bik"},"message":"[mlir][sparse] simplification of sparse runtime support lib\n\nIncorporated two header files directly into other since\nother parts were used (and it makes it hard to find the\ndefinitions). Removed TODOs that are less likely to be done.\n\nReviewed By: Peiming\n\nDifferential Revision: https://reviews.llvm.org/D159330","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/14c58cf5c39a39a335893bc98493c5edc75a91b3"},{"sha":"95062d74676b98a85e4d3db6628d239b15dbeb35","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Enable disassembly color highlighting\n\nEnable color highlighting of disassembly in llvm-objdump. This patch\nintroduces a new flag --disassembler-color=<mode> that enables or\ndisables highlighting disassembly with ANSI escape codes. The default\nmode is to enable color highlighting if outputting to a color-enabled\nterminal.\n\nDifferential revision: https://reviews.llvm.org/D159224","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/95062d74676b98a85e4d3db6628d239b15dbeb35"},{"sha":"885d7b759b5c166c07c07f4c58c6e0ba110fb0c2","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] [builtins] Remove unused/misnamed x86 chkstk functions\n\nFor both MSVC and MinGW targets, the compiler generates calls to\nfunctions for probing the stack, in functions that allocate a larger\namount of stack space.\n\nThe exact behaviour of these functions differ per architecture (some\ndecrement the stack, some actually decrement the stack pointer,\nsome only probe the stack). In MSVC mode, the compiler always\ngenerates calls to a symbol named \"__chkstk\". In MinGW mode, the\nsymbol is named \"__alloca\" on i386 and \"___chkstk_ms\" on x86_64,\nbut the functions behave exactly the same as their MSVC counterparts\ndespite the differing names.\n\n(On i386, these names are the raw symbol names - if considering\na C level function name with the extra implicit leading underscore,\nthey would be called \"_chkstk\" and \"_alloca\".)\n\nRemove the misleading duplicate and unused functions. These were\nadded in fbfed869106cc9c9cad7538db5e65bcd24f4d92e /\nc27de5b2790b65394c50ba13fab319995dbf5956 (adding \"___chkstk_ms\"\nfor both architectures, even if that symbol name only was used\non x86_64) and 40eb83ba56ba9c1d2e6de44deacf889ac0143cf7\n(adding \"__alloca\" and \"___chkstk\", even if the former only was\nused on i386, and the latter seeming like a misspelled form of\nthe MSVC function, with three underscores instead of two).\n\nThe x86_64 \"___chkstk\" was doubly surprising as that function had\nthe same behaviour as the function used on i386, while the\n\"__chkstk\" that MSVC emitted calls to should behave exactly like\nthe preexisting \"___chkstk_ms\".\n\nRemove the unused functions, and rename the misspelled MSVC-like\nsymbols to the correct name that MSVC mode actually uses.\n\nNote that these files aren't assembled at all when building\ncompiler-rt builtins in MSVC mode, as they are expected to be\nprovided by MSVC libraries when building code in MSVC mode.\n\nDifferential Revision: https://reviews.llvm.org/D159139","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2"},{"sha":"1f9eff100ce8faea1284d68b779d844c6e019b77","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] Rename the now lone i386/chkstk2.S to i386/chkstk.S\n\nThis step was omitted from the previous commit,\n885d7b759b5c166c07c07f4c58c6e0ba110fb0c2, for clarity.","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/1f9eff100ce8faea1284d68b779d844c6e019b77"},{"sha":"b5f041f1fe75b400d41998d9c07bf5185cf431e3","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 1f9eff100ce8","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/b5f041f1fe75b400d41998d9c07bf5185cf431e3"},{"sha":"79d06eba71d914a04aee3659b995c93611a3219e","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 885d7b759b5c","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/79d06eba71d914a04aee3659b995c93611a3219e"},{"sha":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"},{"sha":"6c768e8184a513e5ad1d8a9b50d4cecb26f9b38c","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm] Delete spurious directory created by patch","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/6c768e8184a513e5ad1d8a9b50d4cecb26f9b38c"},{"sha":"7678a322196bf7575841b205afc966405aec1428","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Disable arm64-disassembly-color on Windows\n\nWindows doesn't support colored output with ANSI escape colors.","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/7678a322196bf7575841b205afc966405aec1428"},{"sha":"823151f0cfc8f031bcecb15c8246b5649e87b31a","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"Revert \"[MLIR] Move builtin.module LLVM IR translation to before nested operations\"\n\nThis reverts commit 0b8c636211b89ba721f060d30290e8a1992879b7.","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/823151f0cfc8f031bcecb15c8246b5649e87b31a"},{"sha":"a40bada91aeda276a772acfbcae6e8de26755a11","author":{"email":"brendan.emery@esrlabs.com","name":"Brendan Emery"},"message":"[libc++] Apply clang formatting to all string unit tests\n\nThis applies clang-format to the std::string unit tests in preparation\nfor landing https://reviews.llvm.org/D140550.\n\nDifferential Revision: https://reviews.llvm.org/D140612","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/a40bada91aeda276a772acfbcae6e8de26755a11"},{"sha":"b1b1f364d63382637fa5f64871ee06bf74bd0405","author":{"email":"ro@gcc.gnu.org","name":"Rainer Orth"},"message":"[Driver] Don't default to DWARF 2 on Solaris\n\n`clang` currently defaults to DWARF 2 on Solaris.  This dates back to LLVM\n3.8.0.  I suspect this is related to `gcc/config/sol2.cc`\n(`solaris_override_options`) doing the same unless\n`HAVE_LD_EH_FRAME_CIEV3`.  The latter is 1 on both Solaris 11.3 and 11.4,\nso the workaround has become irrelevant these days.\n\nThis patch removes the Solaris override, adjusting affected testcases\naccordingly.\n\nTested on `amd64-pc-solaris2.11` (`Release` and `Debug` builds) and\n`sparcv9-sun-solaris2.11` (`Release` build).\n\nDifferential Revision: https://reviews.llvm.org/D159352","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/b1b1f364d63382637fa5f64871ee06bf74bd0405"},{"sha":"a23b9b7ef13462c5a345512b2e65b9ae486217fa","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Require AArch64 backed for arm64-disassembly-color\n\nThis test depends on the AArch64 backend.","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/a23b9b7ef13462c5a345512b2e65b9ae486217fa"},{"sha":"c2019c416c8d7ec50aec6ac6b82c9aa4e99b0f6f","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[OpenMP] [test] Fix target_thread_limit.cpp to not assume 4 or more cores\n\nPreviously, the test ran a section with\n\n    #pragma omp target thread_limit(4)\n\nand expected it to execute exactly 4 times, even though it would\nin practice execute min(cores, 4) times.\n\nIncrement a counter and check that it executed 1-4 times.\n\nDifferential Revision: https://reviews.llvm.org/D159311","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/c2019c416c8d7ec50aec6ac6b82c9aa4e99b0f6f"},{"sha":"7c4f455992bf9426f3fb76fa7bd52e355dddda46","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"{RISCV] Add test coverage for fully scalarizing a vector\n\nThis pattern comes up heavily when partially vectorizing a forrest in SLP.","distinct":true,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/7c4f455992bf9426f3fb76fa7bd52e355dddda46"}]},"public":true,"created_at":"2023-09-01T22:07:55Z"}
{"id":"31548539681","type":"PushEvent","actor":{"id":10580822,"login":"dpaoliello","display_login":"dpaoliello","gravatar_id":"","url":"https://api.github.com/users/dpaoliello","avatar_url":"https://avatars.githubusercontent.com/u/10580822?"},"repo":{"id":297484931,"name":"dpaoliello/llvm-project","url":"https://api.github.com/repos/dpaoliello/llvm-project"},"payload":{"repository_id":297484931,"push_id":14894560279,"size":52,"distinct_size":1,"ref":"refs/heads/trailinginline","head":"22e040f1cc7f05d9b3a256d41522a4def71a6d20","before":"4c854ccfe155162700debc08cd3873027c82200d","commits":[{"sha":"b6310e65f61c07e90fdbdc7f7158065fb0c94656","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Add lifetimebound attributes to clamp\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, arichardson, libcxx-commits\n\nDifferential Revision: https://reviews.llvm.org/D158327","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/b6310e65f61c07e90fdbdc7f7158065fb0c94656"},{"sha":"8eb34700c2b1847ec6dfb8f92b305b65278d2ec0","author":{"email":"ellis.sparky.hoag@gmail.com","name":"Ellis Hoag"},"message":"[SpecialCaseList] Add option to use Globs instead of Regex to match patterns\n\nAdd an option in `SpecialCaseList` to use Globs instead of Regex to match patterns. `GlobPattern` was extended in https://reviews.llvm.org/D153587 to support brace expansions which allows us to use patterns like `*/src/foo.{c,cpp}`. It turns out that most patterns only take advantage of `*` so using Regex was overkill and required lots of escaping in practice. This often led to bugs due to forgetting to escape special characters.\n\nSince this would be a breaking change, we temporarily support Regex by default and use Globs when `#!special-case-list-v2` is the first line in the file. Users should switch to the glob format described in https://llvm.org/doxygen/classllvm_1_1GlobPattern.html. For example, `(abc|def)` should become `{abc,def}`.\n\nSee discussion in https://reviews.llvm.org/D152762 and https://discourse.llvm.org/t/use-glob-instead-of-regex-for-specialcaselists/71666.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D154014","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/8eb34700c2b1847ec6dfb8f92b305b65278d2ec0"},{"sha":"0b8c636211b89ba721f060d30290e8a1992879b7","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"[MLIR] Move builtin.module LLVM IR translation to before nested operations\n\nThis patch moves the call for translating an MLIR module to LLVM IR to the\nbeginning of the translation process. This enables the use of dialect\nattributes attached to `builtin.module` operations and the `amendOperation()`\nflow to initialize dialect-specific global configuration before translating\nthe contents of the module.\n\nCurrently, this patch does not impact the generated IR on its own. Testing\ninfrastructure to allow translating the Test dialect to LLVM IR is added, so\nthat it can be checked that the current behavior is not broken in the future.\n\nDifferential Revision: https://reviews.llvm.org/D158278","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/0b8c636211b89ba721f060d30290e8a1992879b7"},{"sha":"0a97720d0197e60a10c93f8af7d24e5f6d6a9807","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Assume that __BYTE_ORDER__ is always present\n\nBoth Clang and GCC always define __BYTE_ORDER__, so there is no need to test the byte order a million different ways.\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, libcxx-commits, krytarowski\n\nDifferential Revision: https://reviews.llvm.org/D158216","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/0a97720d0197e60a10c93f8af7d24e5f6d6a9807"},{"sha":"f93c271d4cc11b865b87da1402e1cb33449fe4bf","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Object] Change OffloadBinary::write to return SmallString<0>\n\nSmallString<0> is more flexible and avoids an unneeded copy in\nObjectYAML/OffloadEmitter.cpp.\n\nReviewed By: jhuber6\n\nDifferential Revision: https://reviews.llvm.org/D159335","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/f93c271d4cc11b865b87da1402e1cb33449fe4bf"},{"sha":"14c58cf5c39a39a335893bc98493c5edc75a91b3","author":{"email":"ajcbik@google.com","name":"Aart Bik"},"message":"[mlir][sparse] simplification of sparse runtime support lib\n\nIncorporated two header files directly into other since\nother parts were used (and it makes it hard to find the\ndefinitions). Removed TODOs that are less likely to be done.\n\nReviewed By: Peiming\n\nDifferential Revision: https://reviews.llvm.org/D159330","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/14c58cf5c39a39a335893bc98493c5edc75a91b3"},{"sha":"95062d74676b98a85e4d3db6628d239b15dbeb35","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Enable disassembly color highlighting\n\nEnable color highlighting of disassembly in llvm-objdump. This patch\nintroduces a new flag --disassembler-color=<mode> that enables or\ndisables highlighting disassembly with ANSI escape codes. The default\nmode is to enable color highlighting if outputting to a color-enabled\nterminal.\n\nDifferential revision: https://reviews.llvm.org/D159224","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/95062d74676b98a85e4d3db6628d239b15dbeb35"},{"sha":"885d7b759b5c166c07c07f4c58c6e0ba110fb0c2","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] [builtins] Remove unused/misnamed x86 chkstk functions\n\nFor both MSVC and MinGW targets, the compiler generates calls to\nfunctions for probing the stack, in functions that allocate a larger\namount of stack space.\n\nThe exact behaviour of these functions differ per architecture (some\ndecrement the stack, some actually decrement the stack pointer,\nsome only probe the stack). In MSVC mode, the compiler always\ngenerates calls to a symbol named \"__chkstk\". In MinGW mode, the\nsymbol is named \"__alloca\" on i386 and \"___chkstk_ms\" on x86_64,\nbut the functions behave exactly the same as their MSVC counterparts\ndespite the differing names.\n\n(On i386, these names are the raw symbol names - if considering\na C level function name with the extra implicit leading underscore,\nthey would be called \"_chkstk\" and \"_alloca\".)\n\nRemove the misleading duplicate and unused functions. These were\nadded in fbfed869106cc9c9cad7538db5e65bcd24f4d92e /\nc27de5b2790b65394c50ba13fab319995dbf5956 (adding \"___chkstk_ms\"\nfor both architectures, even if that symbol name only was used\non x86_64) and 40eb83ba56ba9c1d2e6de44deacf889ac0143cf7\n(adding \"__alloca\" and \"___chkstk\", even if the former only was\nused on i386, and the latter seeming like a misspelled form of\nthe MSVC function, with three underscores instead of two).\n\nThe x86_64 \"___chkstk\" was doubly surprising as that function had\nthe same behaviour as the function used on i386, while the\n\"__chkstk\" that MSVC emitted calls to should behave exactly like\nthe preexisting \"___chkstk_ms\".\n\nRemove the unused functions, and rename the misspelled MSVC-like\nsymbols to the correct name that MSVC mode actually uses.\n\nNote that these files aren't assembled at all when building\ncompiler-rt builtins in MSVC mode, as they are expected to be\nprovided by MSVC libraries when building code in MSVC mode.\n\nDifferential Revision: https://reviews.llvm.org/D159139","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2"},{"sha":"1f9eff100ce8faea1284d68b779d844c6e019b77","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] Rename the now lone i386/chkstk2.S to i386/chkstk.S\n\nThis step was omitted from the previous commit,\n885d7b759b5c166c07c07f4c58c6e0ba110fb0c2, for clarity.","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/1f9eff100ce8faea1284d68b779d844c6e019b77"},{"sha":"b5f041f1fe75b400d41998d9c07bf5185cf431e3","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 1f9eff100ce8","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/b5f041f1fe75b400d41998d9c07bf5185cf431e3"},{"sha":"79d06eba71d914a04aee3659b995c93611a3219e","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 885d7b759b5c","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/79d06eba71d914a04aee3659b995c93611a3219e"},{"sha":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"},{"sha":"6c768e8184a513e5ad1d8a9b50d4cecb26f9b38c","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm] Delete spurious directory created by patch","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/6c768e8184a513e5ad1d8a9b50d4cecb26f9b38c"},{"sha":"7678a322196bf7575841b205afc966405aec1428","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Disable arm64-disassembly-color on Windows\n\nWindows doesn't support colored output with ANSI escape colors.","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/7678a322196bf7575841b205afc966405aec1428"},{"sha":"823151f0cfc8f031bcecb15c8246b5649e87b31a","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"Revert \"[MLIR] Move builtin.module LLVM IR translation to before nested operations\"\n\nThis reverts commit 0b8c636211b89ba721f060d30290e8a1992879b7.","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/823151f0cfc8f031bcecb15c8246b5649e87b31a"},{"sha":"a40bada91aeda276a772acfbcae6e8de26755a11","author":{"email":"brendan.emery@esrlabs.com","name":"Brendan Emery"},"message":"[libc++] Apply clang formatting to all string unit tests\n\nThis applies clang-format to the std::string unit tests in preparation\nfor landing https://reviews.llvm.org/D140550.\n\nDifferential Revision: https://reviews.llvm.org/D140612","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/a40bada91aeda276a772acfbcae6e8de26755a11"},{"sha":"b1b1f364d63382637fa5f64871ee06bf74bd0405","author":{"email":"ro@gcc.gnu.org","name":"Rainer Orth"},"message":"[Driver] Don't default to DWARF 2 on Solaris\n\n`clang` currently defaults to DWARF 2 on Solaris.  This dates back to LLVM\n3.8.0.  I suspect this is related to `gcc/config/sol2.cc`\n(`solaris_override_options`) doing the same unless\n`HAVE_LD_EH_FRAME_CIEV3`.  The latter is 1 on both Solaris 11.3 and 11.4,\nso the workaround has become irrelevant these days.\n\nThis patch removes the Solaris override, adjusting affected testcases\naccordingly.\n\nTested on `amd64-pc-solaris2.11` (`Release` and `Debug` builds) and\n`sparcv9-sun-solaris2.11` (`Release` build).\n\nDifferential Revision: https://reviews.llvm.org/D159352","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/b1b1f364d63382637fa5f64871ee06bf74bd0405"},{"sha":"a23b9b7ef13462c5a345512b2e65b9ae486217fa","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Require AArch64 backed for arm64-disassembly-color\n\nThis test depends on the AArch64 backend.","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/a23b9b7ef13462c5a345512b2e65b9ae486217fa"},{"sha":"c2019c416c8d7ec50aec6ac6b82c9aa4e99b0f6f","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[OpenMP] [test] Fix target_thread_limit.cpp to not assume 4 or more cores\n\nPreviously, the test ran a section with\n\n    #pragma omp target thread_limit(4)\n\nand expected it to execute exactly 4 times, even though it would\nin practice execute min(cores, 4) times.\n\nIncrement a counter and check that it executed 1-4 times.\n\nDifferential Revision: https://reviews.llvm.org/D159311","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/c2019c416c8d7ec50aec6ac6b82c9aa4e99b0f6f"},{"sha":"7c4f455992bf9426f3fb76fa7bd52e355dddda46","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"{RISCV] Add test coverage for fully scalarizing a vector\n\nThis pattern comes up heavily when partially vectorizing a forrest in SLP.","distinct":false,"url":"https://api.github.com/repos/dpaoliello/llvm-project/commits/7c4f455992bf9426f3fb76fa7bd52e355dddda46"}]},"public":true,"created_at":"2023-09-01T22:20:28Z"}
{"id":"31548876431","type":"IssueCommentEvent","actor":{"id":1015967,"login":"kiyolee","display_login":"kiyolee","gravatar_id":"","url":"https://api.github.com/users/kiyolee","avatar_url":"https://avatars.githubusercontent.com/u/1015967?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/60","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/60/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/60/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/60/events","html_url":"https://github.com/tukaani-project/xz/pull/60","id":1867809603,"node_id":"PR_kwDOIQBEvs5Y1e5_","number":60,"title":"Make xz buildable with MSVC and add 64-bit filesize support","user":{"login":"kiyolee","id":1015967,"node_id":"MDQ6VXNlcjEwMTU5Njc=","avatar_url":"https://avatars.githubusercontent.com/u/1015967?v=4","gravatar_id":"","url":"https://api.github.com/users/kiyolee","html_url":"https://github.com/kiyolee","followers_url":"https://api.github.com/users/kiyolee/followers","following_url":"https://api.github.com/users/kiyolee/following{/other_user}","gists_url":"https://api.github.com/users/kiyolee/gists{/gist_id}","starred_url":"https://api.github.com/users/kiyolee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kiyolee/subscriptions","organizations_url":"https://api.github.com/users/kiyolee/orgs","repos_url":"https://api.github.com/users/kiyolee/repos","events_url":"https://api.github.com/users/kiyolee/events{/privacy}","received_events_url":"https://api.github.com/users/kiyolee/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-08-26T00:21:40Z","updated_at":"2023-09-01T22:53:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/60","html_url":"https://github.com/tukaani-project/xz/pull/60","diff_url":"https://github.com/tukaani-project/xz/pull/60.diff","patch_url":"https://github.com/tukaani-project/xz/pull/60.patch","merged_at":null},"body":"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [X] Build was run locally and without warnings or errors\r\n- [X] All previous and new tests pass\r\n\r\nNote: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.\r\n\r\n## Pull request type\r\n\r\n<!-- Please try to limit your pull request to one type, submit multiple\r\npull requests if needed. --> \r\n\r\nPlease check the type of change your PR introduces:\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] Documentation content changes\r\n- [X] Other (please describe): \r\n\r\nMake xz buildable with MSVC.\r\nAdd 64-bit filesize support on Windows.\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying. -->\r\n\r\nxz does not build with MSVC.\r\nxz would refuse to handle files larger than 4 GiB.\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: \r\n\r\n\r\n## What is the new behavior?\r\n<!-- Please describe the behavior or changes that are being added by this\r\nPR. -->\r\n\r\nxz can be built with MSVC.\r\nxz can handle files larger than 4 GiB on Windows.\r\n\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n<!-- If this introduces a breaking change, please describe the impact and\r\nmigration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n<!-- Any other information that is important to this PR. -->\r\n\r\nI have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.\r\nIn addition to building xz, I have added support to build all tests as well.\r\nThis PR only covers code changes that were done while setting up my own repo.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/60/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/60/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1703410537","html_url":"https://github.com/tukaani-project/xz/pull/60#issuecomment-1703410537","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/60","id":1703410537,"node_id":"IC_kwDOIQBEvs5lh_tp","user":{"login":"kiyolee","id":1015967,"node_id":"MDQ6VXNlcjEwMTU5Njc=","avatar_url":"https://avatars.githubusercontent.com/u/1015967?v=4","gravatar_id":"","url":"https://api.github.com/users/kiyolee","html_url":"https://github.com/kiyolee","followers_url":"https://api.github.com/users/kiyolee/followers","following_url":"https://api.github.com/users/kiyolee/following{/other_user}","gists_url":"https://api.github.com/users/kiyolee/gists{/gist_id}","starred_url":"https://api.github.com/users/kiyolee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kiyolee/subscriptions","organizations_url":"https://api.github.com/users/kiyolee/orgs","repos_url":"https://api.github.com/users/kiyolee/repos","events_url":"https://api.github.com/users/kiyolee/events{/privacy}","received_events_url":"https://api.github.com/users/kiyolee/received_events","type":"User","site_admin":false},"created_at":"2023-09-01T22:53:05Z","updated_at":"2023-09-01T22:53:05Z","author_association":"NONE","body":"Added a commit to fix build break in suffix.c when NOT using MSVC.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1703410537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-09-01T22:53:06Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
