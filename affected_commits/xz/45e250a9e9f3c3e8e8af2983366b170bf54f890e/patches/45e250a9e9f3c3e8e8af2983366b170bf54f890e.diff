commit 45e250a9e9f3c3e8e8af2983366b170bf54f890e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 28 21:01:22 2023 +0800

    CI: Add test with -fsanitize=address,undefined.
    
    ci_build.sh was updated to accept disabling of __attribute__ ifunc
    and CLMUL. This will allow -fsanitize=address to pass because ifunc
    is incompatible with -fsanitize=address. The CLMUL implementation has
    optimizations that potentially read past the buffer and mask out the
    unwanted bytes.
    
    This test will only run on Autotools Linux.

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index d00dd0d2..f2e8c70a 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -1,131 +1,146 @@
 #############################################################################
 #
 # Author: Jia Tan
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 #############################################################################
 
 name: CI
 
 on:
   # Triggers the workflow on push or pull request events but only for the master branch
   push:
     branches: [ master ]
   pull_request:
     branches: [ master ]
 
   # Allows running workflow manually
   workflow_dispatch:
 
 jobs:
   POSIX:
     strategy:
       matrix:
         os: [ubuntu-latest, macos-latest]
         build_system: [autotools, cmake]
     runs-on: ${{ matrix.os }}
     steps:
       - uses: actions/checkout@v3
 
       ########################
       # Install Dependencies #
       ########################
 
       # Install Autotools on Linux
       - name: Install Dependencies
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
         run: |
             sudo apt-get update
             sudo apt-get install -y autoconf automake build-essential po4a autopoint gcc-multilib doxygen
 
       # Install Autotools on Mac
       - name: Install Dependencies
         if: ${{ matrix.os == 'macos-latest' && matrix.build_system == 'autotools' }}
         run: brew install autoconf automake libtool po4a doxygen
 
       # Install CMake on Linux
       - name: Install Dependencies
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'cmake' }}
         run: |
             sudo apt-get update
             sudo apt-get install -y build-essential cmake
 
       # Install CMake on Mac
       - name: Install Dependencies
         if: ${{ matrix.os == 'macos-latest' && matrix.build_system == 'cmake' }}
         run: brew install cmake
 
       ##################
       # Build and Test #
       ##################
 
       # -b specifies the build system to use.
       # -p specifies the phase (build or test) to help narrow down an error
       #    if one occurs.
       #
-      # Start with the 32-bit build because the autoconf cache must be reset
-      # after the build because the 32-bit build sets the CFLAGS env variable.
-      # By starting with the 32-bit build, we only have to clear the
-      # cache once. The 32-bit build is only tested on Autotools Linux.
+      # The first two builds/tests are only run on Autotools Linux and
+      # affect the CFLAGS. Resetting the CFLAGS requires clearing the
+      # config cache between runs, so the tests that require CFLAGS are
+      # done first.
       - name: Build 32-bit
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
         run: ./build-aux/ci_build.sh -b autotools -p build -f "-m32"
       - name: Test 32-bit
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
         run: |
             ./build-aux/ci_build.sh -b autotools -p test -f "-m32" -n 32_bit
             cd ../xz_build && make distclean
 
+      # ifunc and clmul must be disabled for this test because they will
+      # fail with -fsanitize=address. __attribute__ ifunc is incompatible
+      # with -fsanitize=address.CLMUL optimizations will read past the
+      # bounds of small buffers and mask out the unneeded values. This
+      # triggers -fsanitize=address to report an error even though the
+      # operation is safe.
+      - name: Build with -fsanitize=address,undefined
+        if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
+        run: ./build-aux/ci_build.sh -b autotools -p build -f "-fsanitize=address,undefined" -d ifunc,clmul
+      - name: Test with -fsanitize=address,undefined
+        if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
+        run: |
+            ./build-aux/ci_build.sh -b autotools -p test -f "-fsanitize=address,undefined" -d ifunc,clmul
+            cd ../xz_build && make distclean
+
       - name: Build with full features
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -p build
       - name: Test with full features
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -p test -n full_features
 
       - name: Build without encoders
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d encoders,shared -p build
       - name: Test without encoders
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d encoders,shared -p test -n no_encoders
 
       - name: Build without decoders
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d decoders,shared -p build
       - name: Test without decoders
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d decoders,shared -p test -n no_decoders
 
       - name: Build without threads
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d threads,shared -p build
       - name: Test without threads
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d threads,shared -p test -n no_threads
 
       - name: Build without BCJ filters
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d bcj,shared,nls -p build
       - name: Test without BCJ filters
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d bcj,shared,nls -p test -n no_bcj
 
       - name: Build without Delta filters
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d delta,shared,nls -p build
       - name: Test without Delta filters
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d delta,shared,nls -p test -n no_delta
 
       - name: Build without sha256 check
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -c crc32,crc64 -d shared,nls -p build
       - name: Test without sha256 check
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -c crc32,crc64 -d shared,nls -p test -n no_sha256
 
       - name: Build without crc64 check
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -c crc32,sha256 -d shared,nls -p build
       - name: Test without crc64 check
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -c crc32,sha256 -d shared,nls -p test -n no_crc64
 
       - name: Build small
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d small -p build
       - name: Test small
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d small -p test -n small
 
       # Attempt to upload the test logs as artifacts if any step has failed
       - uses: actions/upload-artifact@v3
         if: ${{ failure() }}
         with:
           name: ${{ matrix.os }} ${{ matrix.build_system }} Test Logs
           path: build-aux/artifacts
diff --git a/build-aux/ci_build.sh b/build-aux/ci_build.sh
index 339938ba..201c1dd5 100755
--- a/build-aux/ci_build.sh
+++ b/build-aux/ci_build.sh
@@ -1,266 +1,272 @@
 #!/bin/bash
 #
 #############################################################################
 #
 # Script meant to be used for Continuous Integration automation for POSIX
 # systems. On GitHub, this is used by Ubuntu and MacOS builds.
 #
 #############################################################################
 #
 # Author: Jia Tan
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 #############################################################################
 
 set -e
 
 USAGE="Usage: $0
   -b [autotools|cmake]
   -c [crc32|crc64|sha256]
-  -d [encoders|decoders|bcj|delta|threads|shared|nls|small]
+  -d [encoders|decoders|bcj|delta|threads|shared|nls|small|ifunc|clmul]
   -f [CFLAGS]
   -l [destdir]
   -n [ARTIFACTS_DIR_NAME]
   -p [all|build|test]
   -s [srcdir]"
 
 # Absolute path of script directory
 ABS_DIR=$(cd -- "$(dirname -- "$0")" && pwd)
 
 # Default CLI option values
 BUILD_SYSTEM="autotools"
 CHECK_TYPE="crc32,crc64,sha256"
 BCJ="y"
 DELTA="y"
 ENCODERS="y"
 DECODERS="y"
 THREADS="y"
 SHARED="y"
 NATIVE_LANG_SUPPORT="y"
 SMALL="n"
+IFUNC="y"
+CLMUL="y"
 SRC_DIR="$ABS_DIR/../"
 DEST_DIR="$SRC_DIR/../xz_build"
 PHASE="all"
 ARTIFACTS_DIR_NAME="output"
 
 
 ###################
 # Parse arguments #
 ###################
 
 while getopts b:c:d:l:n:s:p:f:h opt; do
 	# b option can have either value "autotools" OR "cmake"
 	case ${opt} in
 	h)
 		echo "$USAGE"
 		exit 0
 	;;
 	b)
 		case "$OPTARG" in
 			autotools) ;;
 			cmake) ;;
 			*) echo "Invalid build system: $OPTARG"; exit 1;;
 		esac
 		BUILD_SYSTEM="$OPTARG"
 	;;
 	c) CHECK_TYPE="$OPTARG"
 	;;
 	# d options can be a comma separated list of things to disable at
 	# configure time
 	d)
 	for disable_arg in $(echo "$OPTARG" | sed "s/,/ /g"); do
 		case "$disable_arg" in
 		encoders) ENCODERS="n" ;;
 		decoders) DECODERS="n" ;;
 		bcj) BCJ="n" ;;
 		delta) DELTA="n" ;;
 		threads) THREADS="n" ;;
 		shared) SHARED="n";;
 		nls) NATIVE_LANG_SUPPORT="n";;
 		small) SMALL="y";;
+		ifunc) IFUNC="n";;
+		clmul) CLMUL="n";;
 		*) echo "Invalid disable value: $disable_arg"; exit 1 ;;
 		esac
 	done
 	;;
 	l) DEST_DIR="$OPTARG"
 	;;
 	n) ARTIFACTS_DIR_NAME="$OPTARG"
 	;;
 	s) SRC_DIR="$OPTARG"
 	;;
 	p) PHASE="$OPTARG"
 	;;
 	f)
 		CFLAGS="$OPTARG"
 		export CFLAGS
 	;;
 	esac
 done
 
 
 ####################
 # Helper Functions #
 ####################
 
 # These two functions essentially implement the ternary "?" operator.
 add_extra_option() {
 	# First argument is option value ("y" or "n")
 	# Second argument is option to set if "y"
 	# Third argument is option to set if "n"
 	if [ "$1" = "y" ]
 	then
 		EXTRA_OPTIONS="$EXTRA_OPTIONS $2"
 	else
 		EXTRA_OPTIONS="$EXTRA_OPTIONS $3"
 	fi
 }
 
 
 add_to_filter_list() {
 	# First argument is option value ("y" or "n")
 	# Second argument is option to set if "y"
 	if [ "$1" = "y" ]
 	then
 		FILTER_LIST="$FILTER_LIST$2"
 	fi
 }
 
 
 ###############
 # Build Phase #
 ###############
 
 if [ "$PHASE" = "all" ] || [ "$PHASE" = "build" ]
 then
 	# Checksum options should be specified differently based on the
 	# build system. It must be calculated here since we won't know
 	# the build system used until all args have been parsed.
 	# Autotools - comma separated
 	# CMake - semi-colon separated
 	if [ "$BUILD_SYSTEM" = "autotools" ]
 	then
 		SEP=","
 	else
 		SEP=";"
 	fi
 
 	CHECK_TYPE_TEMP=""
 	for crc in $(echo "$CHECK_TYPE" | sed "s/,/ /g"); do
 			case "$crc" in
 			# Remove "crc32" from cmake build, if specified.
 			crc32)
 				if [ "$BUILD_SYSTEM" = "cmake" ]
 				then
 					continue
 				fi
 			;;
 			crc64) ;;
 			sha256) ;;
 			*) echo "Invalid check type: $crc"; exit 1 ;;
 			esac
 
 			CHECK_TYPE_TEMP="$CHECK_TYPE_TEMP$SEP$crc"
 	done
 
 	# Remove the first character from $CHECK_TYPE_TEMP since it will
 	# always be the delimiter.
 	CHECK_TYPE="${CHECK_TYPE_TEMP:1}"
 
 	FILTER_LIST="lzma1$SEP"lzma2
 
 	# Build based on arguments
 	mkdir -p "$DEST_DIR"
 
 	# Generate configure option values
 	EXTRA_OPTIONS=""
 
 	case $BUILD_SYSTEM in
 	autotools)
 		cd "$SRC_DIR"
 
 		# Run autogen.sh script if not already run
 		if [ ! -f configure ]
 		then
 			"./autogen.sh"
 		fi
 
 		cd "$DEST_DIR"
 
 		add_to_filter_list "$BCJ" ",x86,powerpc,ia64,arm,armthumb,arm64,sparc"
 		add_to_filter_list "$DELTA" ",delta"
 
 		add_extra_option "$ENCODERS" "--enable-encoders=$FILTER_LIST" "--disable-encoders"
 		add_extra_option "$DECODERS" "--enable-decoders=$FILTER_LIST" "--disable-decoders"
 		add_extra_option "$THREADS" "" "--disable-threads"
 		add_extra_option "$SHARED" "" "--disable-shared"
 		add_extra_option "$NATIVE_LANG_SUPPORT" "" "--disable-nls"
 		add_extra_option "$SMALL" "--enable-small" ""
+		add_extra_option "$IFUNC" "" "--disable-ifunc"
+		add_extra_option "$CLMUL" "" "--disable-clmul-crc"
 
 		# Run configure script
 		"$SRC_DIR"/configure --enable-werror --enable-checks="$CHECK_TYPE" $EXTRA_OPTIONS --config-cache
 
 		# Build the project
 		make
 	;;
 	cmake)
 		cd "$DEST_DIR"
 
 		add_to_filter_list "$BCJ" ";x86;powerpc;ia64;arm;armthumb;arm64;sparc"
 		add_to_filter_list "$DELTA" ";delta"
 
 		add_extra_option "$THREADS" "-DENABLE_THREADS=ON" "-DENABLE_THREADS=OFF"
 
 		# Disable MicroLZMA if encoders are not configured.
 		add_extra_option "$ENCODERS" "-DENCODERS=$FILTER_LIST" "-DENCODERS= -DMICROLZMA_ENCODER=OFF"
 
 		# Disable MicroLZMA and lzip decoders if decoders are not configured.
 		add_extra_option "$DECODERS" "-DDECODERS=$FILTER_LIST" "-DDECODERS= -DMICROLZMA_DECODER=OFF -DLZIP_DECODER=OFF"
 
 		# CMake disables the shared library by default.
 		add_extra_option "$SHARED" "-DBUILD_SHARED_LIBS=ON" ""
 
 		add_extra_option "$SMALL" "-DHAVE_SMALL=ON" ""
 
 		# Remove old cache file to clear previous settings.
 		rm -f "CMakeCache.txt"
 		cmake "$SRC_DIR/CMakeLists.txt" -B "$DEST_DIR" $EXTRA_OPTIONS -DADDITIONAL_CHECK_TYPES="$CHECK_TYPE"
 		make
 	;;
 	esac
 fi
 
 
 ##############
 # Test Phase #
 ##############
 
 if [ "$PHASE" = "all" ] || [ "$PHASE" = "test" ]
 then
 	case $BUILD_SYSTEM in
 	autotools)
 		cd "$DEST_DIR"
 		# If the tests fail, copy the test logs into the artifacts folder
 		if make check
 		then
 			:
 		else
 			mkdir -p "$SRC_DIR/build-aux/artifacts/$ARTIFACTS_DIR_NAME"
 			cp ./tests/*.log "$SRC_DIR/build-aux/artifacts/$ARTIFACTS_DIR_NAME"
 			exit 1
 		fi
 	;;
 	cmake)
 		cd "$DEST_DIR"
 		if make test
 		then
 			:
 		else
 			mkdir -p "$SRC_DIR/build-aux/artifacts/$ARTIFACTS_DIR_NAME"
 			cp ./Testing/Temporary/*.log "$SRC_DIR/build-aux/artifacts/$ARTIFACTS_DIR_NAME"
 			exit 1
 		fi
 	;;
 	esac
 fi