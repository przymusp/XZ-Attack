<html><head><style>p{margin-top:0px;margin-bottom:0px;}</style></head><body><div style="font-size:14px; font-family:NanumGothic,나눔고딕,sans-serif;"><p>Dear Lasse Collin</p><p><br>
</p>
<p>Hello, I am the author of the xz-utils C# wrapper, <a href="https://www.nuget.org/packages/Joveler.Compression.XZ">Joveler.Compression.XZ</a>.</p><p>I found xz-utils 5.4.0 MSVC build script is imperfect, and it omits several symbols which should have been exported.</p><p><br></p><p><span style="font-weight: bold;">Summary </span><br>
</p>
<p>xz-utils 5.4.0 introduces multithreaded decompression support, with 'lzma_stream_decoder_mt'.</p><p>However, liblzma.dll built by MSVC2019 does not export `lzma_stream_decoder_mt` symbol.</p><p>In fact, the dll does not have the function compiled.</p><p><br></p><p>The main reason is that 'windows\vs2019\liblzma_dll.vcxproj' does not compile 'stream_decoder_mt.c'.</p><br><p>This is an early-stage reporting, there may be more issues related to included MSVC vcxproj files.</p><p>Project files for VS2013 / VS2017 was not checked yet.<br></p><p><span style="font-weight: bold;">​</span><br></p><p><span style="font-weight: bold;">Build Environment</span></p><p>- The DLLs were built by windows\vs2019\xz_win.sln, using latest MSVC2022.<br></p><p>- Host OS is Windows 10 x64 22H2.</p><p><br></p><p><span style="font-weight: bold;">Details</span><br></p><p>The PE Export Table of MSVC2019-built liblzma.dll does not have `lzma_stream_decoder_mt`.<br></p><p>I found this issue while compiling liblzma.dll binaries to ship with <a href="https://www.nuget.org/packages/Joveler.Compression.XZ">Joveler.Compression.XZ</a>.<br></p><p>My C# wrapper explicitly load exported functions from liblzma.dll, and it failed to detect `lzma_stream_decoder_mt`.</p><p><br></p><p>'stream_decoder_mt.c' is not listed in 'windows\vs2019\liblzma_dll.vcxproj', so the function was omitted form the final DLLs.<br></p><p><br></p><p>I have tried adding these lines into 'windows\vs2019\liblzma_dll.vcxproj' and build the dll.<br></p>
<p>&lt;ClCompile Include="..\..\src\liblzma\common\stream_decoder_mt.c" /&gt;<br>
&lt;ClInclude Include="..\..\src\liblzma\common\stream_decoder_mt.h" /&gt;</p><p>Now the new dlls properly has `lzma_stream_decoder_mt` symbol, but it still fails the C# tests by unknown reason.<br></p><p><br></p><p>Linux .so built with' configure' and 'make' passes the C# tests.</p><p><br></p><p>While I have not tested building xz-utils with MSYS2 or MSVC via CMake yet,</p><p><br></p><p><span style="font-weight: bold;">Temporary Workaround for 5.4.0<br></span></p><p>While I have not tested other Windows build methods, the old-school configure -&gt; make route works well on Linux.<br></p><p>Following on the speculation, these build methods would work.<br></p><p>(1) Compiling with autotools/make/MinGW-w64 on MSYS2 <br></p><p>(2) Regenerate MSVC vcxproj/sln with CMake<br></p><br><p><br>
</p>
<p>Sincerely,<br>
Hajin Jang<br>
</p>
<div><span style="color: rgb(128, 128, 128);"></span></div>
<p></p></div></body></html><table style="display:none"><tr><td><img src="https://mail.naver.com/readReceipt/notify/?img=DYbdKA2rM4GSM4tlpAmsp4EmMxuXFx29aAIvaAMmFqgqp6UwMxb9p6kCtzFXp6UmKA25W4d5W4pZMLlGWq%2FsFqg%2FaAE%2Ftz3GbrF9bXFGWr%2F5WHGRMBkd16wq7Ng5b4E5bre9b4F0p4eZprE5W4kd.gif" border="0" /></td></tr></table>