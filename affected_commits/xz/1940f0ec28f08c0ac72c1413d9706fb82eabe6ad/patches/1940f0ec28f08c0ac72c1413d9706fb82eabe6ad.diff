commit 1940f0ec28f08c0ac72c1413d9706fb82eabe6ad
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 21:36:09 2024 +0800

    liblzma: Omit CRC tables when not needed with ARM64 optimizations.
    
    This is similar to the existing x86-64 CLMUL conditions to omit the
    tables. They were slightly refactored to improve readability.

diff --git a/src/liblzma/check/crc32_table.c b/src/liblzma/check/crc32_table.c
index e53b63c9..41a80dcb 100644
--- a/src/liblzma/check/crc32_table.c
+++ b/src/liblzma/check/crc32_table.c
@@ -1,33 +1,45 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       crc32_table.c
 /// \brief      Precalculated CRC32 table with correct endianness
 //
 //  Author:     Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "common.h"
 
 
-// FIXME: Compared to crc32_fast.c this has to check for __x86_64__ too
+// FIXME: Compared to crc_common.h this has to check for __x86_64__ too
 // so that in 32-bit builds crc32_x86.S won't break due to a missing table.
-#if !defined(HAVE_ENCODERS) && ((defined(__x86_64__) && defined(__SSSE3__) \
+#if (defined(__x86_64__) && defined(__SSSE3__) \
 			&& defined(__SSE4_1__) && defined(__PCLMUL__)) \
-			|| (defined(__e2k__) && __iset__ >= 6))
+		|| (defined(__e2k__) && __iset__ >= 6)
+#	define X86_CLMUL_NO_TABLE 1
+#endif
+
+#if defined(HAVE_ARM64_CRC32) \
+		&& !defined(WORDS_BIGENDIAN) \
+		&& defined(__ARM_FEATURE_CRC32)
+#	define ARM64_CRC32_NO_TABLE 1
+#endif
+
+
+#if !defined(HAVE_ENCODERS) && (defined(X86_CLMUL_NO_TABLE) \
+		|| defined(ARM64_CRC32_NO_TABLE_))
 // No table needed. Use a typedef to avoid an empty translation unit.
 typedef void lzma_crc32_dummy;
 
 #else
 // Having the declaration here silences clang -Wmissing-variable-declarations.
 extern const uint32_t lzma_crc32_table[8][256];
 
 #       ifdef WORDS_BIGENDIAN
 #       	include "crc32_table_be.h"
 #       else
 #       	include "crc32_table_le.h"
 #       endif
 #endif
diff --git a/src/liblzma/check/crc64_table.c b/src/liblzma/check/crc64_table.c
index 688e527b..0ae9dda8 100644
--- a/src/liblzma/check/crc64_table.c
+++ b/src/liblzma/check/crc64_table.c
@@ -1,33 +1,38 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       crc64_table.c
 /// \brief      Precalculated CRC64 table with correct endianness
 //
 //  Author:     Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "common.h"
 
 
-// FIXME: Compared to crc64_fast.c this has to check for __x86_64__ too
+// FIXME: Compared to crc_common.h this has to check for __x86_64__ too
 // so that in 32-bit builds crc64_x86.S won't break due to a missing table.
 #if (defined(__x86_64__) && defined(__SSSE3__) \
 			&& defined(__SSE4_1__) && defined(__PCLMUL__)) \
 		|| (defined(__e2k__) && __iset__ >= 6)
+#	define X86_CLMUL_NO_TABLE 1
+#endif
+
+
+#ifdef X86_CLMUL_NO_TABLE
 // No table needed. Use a typedef to avoid an empty translation unit.
 typedef void lzma_crc64_dummy;
 
 #else
 // Having the declaration here silences clang -Wmissing-variable-declarations.
 extern const uint64_t lzma_crc64_table[4][256];
 
 #	if defined(WORDS_BIGENDIAN)
 #		include "crc64_table_be.h"
 #	else
 #		include "crc64_table_le.h"
 #	endif
 #endif
diff --git a/src/liblzma/check/crc_common.h b/src/liblzma/check/crc_common.h
index 35f60d95..123d7db0 100644
--- a/src/liblzma/check/crc_common.h
+++ b/src/liblzma/check/crc_common.h
@@ -1,141 +1,144 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       crc_common.h
 /// \brief      Some functions and macros for CRC32 and CRC64
 //
 //  Authors:    Lasse Collin
 //              Ilya Kurdyukov
 //              Hans Jansen
 //              Jia Tan
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #ifndef LZMA_CRC_COMMON_H
 #define LZMA_CRC_COMMON_H
 
 #include "common.h"
 
 
 #ifdef WORDS_BIGENDIAN
 #	define A(x) ((x) >> 24)
 #	define B(x) (((x) >> 16) & 0xFF)
 #	define C(x) (((x) >> 8) & 0xFF)
 #	define D(x) ((x) & 0xFF)
 
 #	define S8(x) ((x) << 8)
 #	define S32(x) ((x) << 32)
 
 #else
 #	define A(x) ((x) & 0xFF)
 #	define B(x) (((x) >> 8) & 0xFF)
 #	define C(x) (((x) >> 16) & 0xFF)
 #	define D(x) ((x) >> 24)
 
 #	define S8(x) ((x) >> 8)
 #	define S32(x) ((x) >> 32)
 #endif
 
 
 // CRC CLMUL code needs this because accessing input buffers that aren't
 // aligned to the vector size will inherently trip the address sanitizer.
 #if lzma_has_attribute(__no_sanitize_address__)
 #	define crc_attr_no_sanitize_address \
 			__attribute__((__no_sanitize_address__))
 #else
 #	define crc_attr_no_sanitize_address
 #endif
 
 // Keep this in sync with changes to crc32_arm64.h
 #if defined(_WIN32) || defined(HAVE_GETAUXVAL) \
 		|| defined(HAVE_ELF_AUX_INFO) \
 		|| (defined(__APPLE__) && defined(HAVE_SYSCTLBYNAME))
 #	define ARM64_RUNTIME_DETECTION 1
 #endif
 
 
 #undef CRC32_GENERIC
 #undef CRC64_GENERIC
 
 #undef CRC32_ARCH_OPTIMIZED
 #undef CRC64_ARCH_OPTIMIZED
 
 // The x86 CLMUL is used for both CRC32 and CRC64.
 #undef CRC_X86_CLMUL
 
 #undef CRC32_ARM64
 #undef CRC64_ARM64_CLMUL
 
 #undef CRC_USE_IFUNC
 
 #undef CRC_USE_GENERIC_FOR_SMALL_INPUTS
 
 // ARM64 CRC32 instruction is only useful for CRC32. Currently, only
 // little endian is supported since we were unable to test on a big
 // endian machine.
+//
+// NOTE: Keep this and the next check in sync with the macro
+//       ARM64_CRC32_NO_TABLE in crc32_table.c
 #if defined(HAVE_ARM64_CRC32) && !defined(WORDS_BIGENDIAN)
 // Allow ARM64 CRC32 instruction without a runtime check if
 // __ARM_FEATURE_CRC32 is defined. GCC and Clang only define this if the
 // proper compiler options are used.
 #	if defined(__ARM_FEATURE_CRC32)
 #		define CRC32_ARCH_OPTIMIZED 1
 #		define CRC32_ARM64 1
 #	elif defined(ARM64_RUNTIME_DETECTION)
 #		define CRC32_ARCH_OPTIMIZED 1
 #		define CRC32_ARM64 1
 #		define CRC32_GENERIC 1
 #	endif
 #endif
 
 #if defined(HAVE_USABLE_CLMUL)
 // If CLMUL is allowed unconditionally in the compiler options then the
 // generic version can be omitted. Note that this doesn't work with MSVC
 // as I don't know how to detect the features here.
 //
-// NOTE: Keep this this in sync with crc32_table.c.
+// NOTE: Keep this in sync with the CLMUL_NO_TABLE macro in crc32_table.c.
 #	if (defined(__SSSE3__) && defined(__SSE4_1__) && defined(__PCLMUL__)) \
 		|| (defined(__e2k__) && __iset__ >= 6)
 #		define CRC32_ARCH_OPTIMIZED 1
 #		define CRC64_ARCH_OPTIMIZED 1
 #		define CRC_X86_CLMUL 1
 #	else
 #		define CRC32_GENERIC 1
 #		define CRC64_GENERIC 1
 #		define CRC32_ARCH_OPTIMIZED 1
 #		define CRC64_ARCH_OPTIMIZED 1
 #		define CRC_X86_CLMUL 1
 
 #		ifdef HAVE_FUNC_ATTRIBUTE_IFUNC
 #			define CRC_USE_IFUNC 1
 #		endif
 /*
 		// The generic code is much faster with 1-8-byte inputs and
 		// has similar performance up to 16 bytes  at least in
 		// microbenchmarks (it depends on input buffer alignment
 		// too). If both versions are built, this #define will use
 		// the generic version for inputs up to 16 bytes and CLMUL
 		// for bigger inputs. It saves a little in code size since
 		// the special cases for 0-16-byte inputs will be omitted
 		// from the CLMUL code.
 #		ifndef CRC_USE_IFUNC
 #			define CRC_USE_GENERIC_FOR_SMALL_INPUTS 1
 #		endif
 */
 #	endif
 #endif
 
 // For CRC32 use the generic slice-by-eight implementation if no optimized
 // version is available.
 #if !defined(CRC32_ARCH_OPTIMIZED) && !defined(CRC32_GENERIC)
 #	define CRC32_GENERIC 1
 #endif
 
 // For CRC64 use the generic slice-by-four implementation if no optimized
 // version is available.
 #if !defined(CRC64_ARCH_OPTIMIZED) && !defined(CRC64_GENERIC)
 #	define CRC64_GENERIC 1
 #endif
 
 #endif