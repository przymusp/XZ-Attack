{"id":"32377196548","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15321767181,"size":2,"distinct_size":2,"ref":"refs/heads/master","head":"5c4bca521e6fb435898a0012b3276eee70a6dadf","before":"01e34aa1171b04f8b28960b1cc6135a903e0c13d","commits":[{"sha":"d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix when the windres workaround is applied.\n\nCMake doesn't set WIN32 on CYGWIN but the workaround is\nprobably needed on Cygwin too. Same for MSYS and MSYS2.\n\nThe workaround must not be used with Clang that is acting in\nMSVC mode. This fixes it by checking for the known environments\nthat need the workaround instead of using \"NOT MSVC\".\n\nThanks to Martin Storsjö.\nhttps://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b"},{"sha":"5c4bca521e6fb435898a0012b3276eee70a6dadf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5c4bca521e6fb435898a0012b3276eee70a6dadf"}]},"public":true,"created_at":"2023-10-06T17:02:42Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32377201040","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15321769498,"size":14,"distinct_size":12,"ref":"refs/heads/w32_update","head":"3610b0dd05d042d60f2083039021cb10d70da70a","before":"22cc2578cf0d8bce20fdfea08d4bc413ee2431fa","commits":[{"sha":"d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix when the windres workaround is applied.\n\nCMake doesn't set WIN32 on CYGWIN but the workaround is\nprobably needed on Cygwin too. Same for MSYS and MSYS2.\n\nThe workaround must not be used with Clang that is acting in\nMSVC mode. This fixes it by checking for the known environments\nthat need the workaround instead of using \"NOT MSVC\".\n\nThanks to Martin Storsjö.\nhttps://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b"},{"sha":"5c4bca521e6fb435898a0012b3276eee70a6dadf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5c4bca521e6fb435898a0012b3276eee70a6dadf"},{"sha":"bab0d8a2cc178a58d7650e3b204b1625f80137b3","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Windows: Update windows/build.bash.\n\nSupport for the old MinGW was dropped. Only MinGW-w64 with GCC\nis supported now.\n\nThe script now supports also cross-compilation from GNU/Linux\n(tests are not run). MSYS2 and also the old MSYS 1.0.11 work\nfor building on Windows. The i686 and x86_64 toolchains must\nbe in PATH to build both 32-bit and 64-bit versions.\n\nParallel builds are done if \"nproc\" from GNU coreutils is available.\n\nMinGW-w64 runtime copyright information file was renamed from\nCOPYING-Windows.txt to COPYING.MinGW-w64-runtime.txt which\nis the filename used by MinGW-w64 itself. Its existence\nis now mandatory, it's checked at the beginning of the script.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/bab0d8a2cc178a58d7650e3b204b1625f80137b3"},{"sha":"4605ee4de051fdc68894f91b1ebcb4bf13b6b390","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Windows: Update windows/README-Windows.txt.\n\nIt's for binary packages built with windows/build.bash.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/4605ee4de051fdc68894f91b1ebcb4bf13b6b390"},{"sha":"299a9beb027e767a3cab4de396450ba8efea1c3d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Create liblzma.def when building liblzma.dll with MinGW-w64.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/299a9beb027e767a3cab4de396450ba8efea1c3d"},{"sha":"b37bc67d8353a71befc5713051a9660213d801a1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add Cflags.private to liblzma.pc.in for MSYS2.\n\nIt properly adds -DLZMA_API_STATIC when compiling code that\nwill be linked against static liblzma. Having it there on\nsystems other than Windows does no harm.\n\nSee: https://www.msys2.org/docs/pkgconfig/","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b37bc67d8353a71befc5713051a9660213d801a1"},{"sha":"38b1e31a41ad693e74a97c7bcee8f96eac826945","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Rearrange the PACKAGE_ variables.\n\nThe windres workaround now replaces spaces with \\x20 so\nthe package name isn't repeated.\n\nThese changes will help with creation of liblzma.pc.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/38b1e31a41ad693e74a97c7bcee8f96eac826945"},{"sha":"a4d6fd549f8c4aa8d51c00407e15ed087bffbb8f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Generate and install liblzma.pc if not using MSVC.\n\nAutotools based build uses -pthread and thus adds it to Libs.private\nin liblzma.pc. CMake doesn't use -pthread at all if pthread functions\nare available in libc so Libs.private doesn't get -pthread either.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a4d6fd549f8c4aa8d51c00407e15ed087bffbb8f"},{"sha":"3b2fa3dc80e77378f33b5b2caefb1e45ef6575f0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Scripts: Use @PACKAGE_VERSION@ instead of @VERSION@.\n\nPACKAGE_VERSION was already used in liblzma.pc.in.\nThis way only one version @foo@ is used.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3b2fa3dc80e77378f33b5b2caefb1e45ef6575f0"},{"sha":"da9a79f79bce7ecdf786eb8f35378e6c971563af","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Use -D_FILE_OFFSET_BITS=64 if (and only if) needed.\n\nA CMake option LARGE_FILE_SUPPORT is created if and only if\n-D_FILE_OFFSET_BITS=64 affects sizeof(off_t).\n\nThis is needed on many 32-bit platforms and even with 64-bit builds\nwith MinGW-w64 to get support for files larger than 2 GiB.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/da9a79f79bce7ecdf786eb8f35378e6c971563af"},{"sha":"1897db5e07d3a11e1c359da8d9dbb8a67d83fc4b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Refer to MinGW-w64 instead of MinGW in the API headers.\n\nMinGW (formely a MinGW.org Project, later the MinGW.OSDN Project\nat <https://osdn.net/projects/mingw/>) has GCC 9.2.0 as the\nmost recent GCC package (released 2021-02-02). The project might\nstill be alive but majority of people have switched to MinGW-w64.\nThus it seems clearer to refer to MinGW-w64 in our API headers too.\nBuilding with MinGW is likely to still work but I haven't tested it\nin the recent years.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1897db5e07d3a11e1c359da8d9dbb8a67d83fc4b"},{"sha":"1bb704174dce095ccb3dcdfd581f44b38ee71fb1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix the import library filename.\n\nBoth PREFIX and IMPORT_PERFIX have to be set to \"\" to get\nliblzma.dll and liblzma.dll.a.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1bb704174dce095ccb3dcdfd581f44b38ee71fb1"},{"sha":"ee7c59c4a0240637d807011a49d8a3b876a5d393","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Add support for building and installing xz with translations.\n\nThis uses Autotools-created files po/*.po.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/ee7c59c4a0240637d807011a49d8a3b876a5d393"},{"sha":"3610b0dd05d042d60f2083039021cb10d70da70a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Simplify symlink creation and install translated man pages.\n\nIt helps that cmake_install.cmake doesn't parallelize installation\nso symlinks can be created so that the target is always known to\nexist (a requirement on Windows in some cases).","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3610b0dd05d042d60f2083039021cb10d70da70a"}]},"public":true,"created_at":"2023-10-06T17:02:55Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32377317441","type":"CommitCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/comments/129350555","html_url":"https://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129350555","id":129350555,"node_id":"CC_kwDOIQBEvs4Htbub","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"position":null,"line":null,"path":null,"commit_id":"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","created_at":"2023-10-06T17:08:13Z","updated_at":"2023-10-06T17:08:13Z","author_association":"MEMBER","body":"> I'm not entirely 100% sure here, but I think MINGW OR CYGWIN might be the right thing; cygwin in general doesn't set WIN32 I think, as it's mostly considered unixy.\r\n\r\nIt's unfortunate that it's not documented very clearly but it seems that [you are right](https://gitlab.kitware.com/cmake/cmake/-/commit/a429e4b9b1a56470c6c119a077910d2f090c21d0). So perhaps the CMake-based build has been broken on Cygwin for quite some time.\r\n\r\n(In C code, `_WIN32` is #defined on Cygwin, which slightly adds to the confusion.)\r\n\r\nGrepping the sources gave me a feeling that `MSYS` should be listed in addition to `CYGWIN` to cover MSYS and MSYS2.\r\n\r\nI used `STREQUAL` instead of `MATCHES`. I suppose other Clang-based compiler strings in CMake aren't relevant in this particular case. I understand that `MATCHES` might be better in generic situations (it misses \"IntelLLVM\" though).\r\n\r\nI have committed a fix to master. Thanks!\r\n\r\n> And usually it's worse if one provides multiple build systems, but their functionality isn't entirely equal, either in how the build works, or worse, the header/pkgconfig install layout differs, or ABI details like sonames or such differ between various builds.\r\n\r\nMost of these apply to XZ Utils for now. w32_update has a commit to install the pkgconfig file. On GNU/Linux even that differs slightly due to CMake not adding `-pthread` since pthreads are in libc in modern glibc versions. That difference shouldn't matter in practice, luckily.\r\n\r\nSoname differences are hard to avoid with Libtool vs. anything else on certain platforms.\r\n\r\nI wonder if not supporting Meson is a problem in the long term. I have seen one or two quickly-written files for building liblzma with Meson which work for x86-64 and maybe something else but can be suboptimal or maybe even subtly broken in some other cases. Maybe it's just the way things are, upstreams cannot worry about everything.\r\n\r\n> There was something that seemed like action towards getting this resolved last year, but then maintainance stopped again.\r\n\r\nThat's a showstopper issue indeed. I didn't read in detail but I suppose there's a reason why Libtool was designed to work like it does, it's an old tool and some decisions might be less relevant on today's platforms. The big deal is that Libtool has had lack of developer resources for many years.\r\n\r\nThanks!","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/comments/129350555/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}}},"public":true,"created_at":"2023-10-06T17:08:13Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
