{"id":"34692673021","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/77","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/events","html_url":"https://github.com/tukaani-project/xz/pull/77","id":2071987912,"node_id":"PR_kwDOIQBEvs5jjrrh","number":77,"title":"Speed up CRC32 calculation on ARM64","user":{"login":"parheliamm","id":3759678,"node_id":"MDQ6VXNlcjM3NTk2Nzg=","avatar_url":"https://avatars.githubusercontent.com/u/3759678?v=4","gravatar_id":"","url":"https://api.github.com/users/parheliamm","html_url":"https://github.com/parheliamm","followers_url":"https://api.github.com/users/parheliamm/followers","following_url":"https://api.github.com/users/parheliamm/following{/other_user}","gists_url":"https://api.github.com/users/parheliamm/gists{/gist_id}","starred_url":"https://api.github.com/users/parheliamm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/parheliamm/subscriptions","organizations_url":"https://api.github.com/users/parheliamm/orgs","repos_url":"https://api.github.com/users/parheliamm/repos","events_url":"https://api.github.com/users/parheliamm/events{/privacy}","received_events_url":"https://api.github.com/users/parheliamm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-01-09T09:38:00Z","updated_at":"2024-01-09T19:43:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/77","html_url":"https://github.com/tukaani-project/xz/pull/77","diff_url":"https://github.com/tukaani-project/xz/pull/77.diff","patch_url":"https://github.com/tukaani-project/xz/pull/77.patch","merged_at":null},"body":"The CRC32 instructions in ARM64 can calculate the CRC32 result for 8 bytes in a single operation, making the use of ARM64 instructions much faster compared to the general CRC32 algorithm.\r\n\r\nOptimized CRC32 will be enabled if ARM64 has CRC extension running on Linux.\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [x] Build was run locally and without warnings or errors\r\n- [ ] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\n<!-- Please try to limit your pull request to one type, submit multiple\r\npull requests if needed. --> \r\n\r\nPlease check the type of change your PR introduces:\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other (please describe): \r\n\r\n\r\n## What is the current behavior?\r\n\r\n<!-- Please describe the current behavior that you are modifying. -->\r\n\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: \r\n\r\n\r\n## What is the new behavior?\r\n\r\n<!-- Please describe the behavior or changes that are being added by this\r\nPR. -->\r\n\r\n- Enable optimized CRC32 algorithm if ARM64 support CRC extension.\r\n  -\r\n  -\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n<!-- If this introduces a breaking change, please describe the impact and\r\nmigration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nBenchmark data will be updated soon","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/77/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1883673406","html_url":"https://github.com/tukaani-project/xz/pull/77#issuecomment-1883673406","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/77","id":1883673406,"node_id":"IC_kwDOIQBEvs5wRpM-","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2024-01-09T19:43:45Z","updated_at":"2024-01-09T19:43:45Z","author_association":"MEMBER","body":"Thanks! A quick few early comments (I or Jia will comment more later):\r\n\r\nThe `Data` pointer seems pointless. I don't see a reason to cast away the const qualifier.\r\n\r\nARM64 processors tend to support unaligned memory access but would it still be worth it (better speed) to align the `buf` first with calls to `__builtin_aarch64_crc32b`? See how aligning is done in the generic code.\r\n\r\nI'm not sure but I guess the input `crc` variable doesn't need byte-swapping but reading the input in loop will need it. So it should use `read64le` instead, or `aligned_read64le` if `buf` is first aligned. This should be investigated or the code should be marked little-endian-only if we aren't sure.\r\n\r\n`getauxval` is a libc function (not inline) so it's unsafe to combine it with ifunc. That is, ifunc would need to stay disabled on ARM64.\r\n\r\nAre ARM64 processors without CRC32 common enough that runtime detection is worth it? Even they are, `#ifdef __ARM_FEATURE_CRC32` could be used at compile time to detect if CRC32 can be assumed to be supported.\r\n\r\nThe crc_edits branch is still under consideration so that may change where the code will go, possibly making things simpler.\r\n","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1883673406/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-09T19:43:46Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
