{"id":"27551932695","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":12856568284,"size":23,"distinct_size":23,"ref":"refs/heads/v5.4","head":"2caba3efe3e0c2d7c6dca00e22c56812326a34e6","before":"2796bb4736f645d34939b5d62d5958f534e41e69","commits":[{"sha":"d83da006b3e8dbad9112e6cde6b27049d193c9ec","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Improve documentation for stream_flags.h\n\nStandardizing each function to always specify parameters and return\nvalues. Also moved the parameters and return values to the end of each\nfunction description.\n\nA few small things were reworded and long sentences broken up.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d83da006b3e8dbad9112e6cde6b27049d193c9ec"},{"sha":"0ce1db0223854d94b4a0d17737ac0486a75d9e6a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Silence a warning from MSVC.\n\nIt gives C4146 here since unary minus with unsigned integer\nis still unsigned (which is the intention here). Doing it\nwith substraction makes it clearer and avoids the warning.\n\nThanks to Nathan Moinvaziri for reporting this.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/0ce1db0223854d94b4a0d17737ac0486a75d9e6a"},{"sha":"762c4d0b62d2694cf3a01e030fdfe68e09e7b503","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Rename field => member in documentation.\n\nAlso adjusted preset value => preset level.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/762c4d0b62d2694cf3a01e030fdfe68e09e7b503"},{"sha":"701e9be6bede19771895f756082db0c017f86f07","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Adjust documentation in bcj.h for consistent style.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/701e9be6bede19771895f756082db0c017f86f07"},{"sha":"d31fbd28be5b79eb682db50004b0fb7aad5299ec","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Adjust spacing in doc headers in bcj.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d31fbd28be5b79eb682db50004b0fb7aad5299ec"},{"sha":"bc34e5ac9996667d2c1ec9a7895ec5931ac4caea","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Very minor API doc tweaks.\n\nUse \"member\" to refer to struct members as that's the term used\nby the C standard.\n\nUse lzma_options_delta.dist and such in docs so that in Doxygen's\nHTML output they will link to the doc of the struct member.\n\nClean up a few trailing white spaces too.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/bc34e5ac9996667d2c1ec9a7895ec5931ac4caea"},{"sha":"076e911ba25cadf2cbdfbd0f65991a002e210c0b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Use only the generic symbol versioning on MicroBlaze.\n\nOn MicroBlaze, GCC 12 is broken in sense that\n__has_attribute(__symver__) returns true but it still doesn't\nsupport the __symver__ attribute even though the platform is ELF\nand symbol versioning is supported if using the traditional\n__asm__(\".symver ...\") method. Avoiding the traditional method is\ngood because it breaks LTO (-flto) builds with GCC.\n\nSee also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101766\n\nFor now the only extra symbols in liblzma_linux.map are the\ncompatibility symbols with the patch that spread from RHEL/CentOS 7.\nThese require the use of __symver__ attribute or __asm__(\".symver ...\")\nin the C code. Compatibility with the patch from CentOS 7 doesn't\nseem valuable on MicroBlaze so use liblzma_generic.map on MicroBlaze\ninstead. It doesn't require anything special in the C code and thus\nno LTO issues either.\n\nAn alternative would be to detect support for __symver__\nattribute in configure.ac and CMakeLists.txt and fall back\nto __asm__(\".symver ...\") but then LTO would be silently broken\non MicroBlaze. It sounds likely that MicroBlaze is a special\ncase so let's treat it as a such because that is simpler. If\na similar issue exists on some other platform too then hopefully\nsomeone will report it and this can be reconsidered.\n\n(This doesn't do the same fix in CMakeLists.txt. Perhaps it should\nbut perhaps CMake build of liblzma doesn't matter much on MicroBlaze.\nThe problem breaks the build so it's easy to notice and can be fixed\nlater.)\n\nThanks to Vincent Fazio for reporting the problem and proposing\na patch (in the end that solution wasn't used):\nhttps://github.com/tukaani-project/xz/pull/32","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/076e911ba25cadf2cbdfbd0f65991a002e210c0b"},{"sha":"cd82ef2fb48b174c57cd03b84a9a0f978772cb89","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/cd82ef2fb48b174c57cd03b84a9a0f978772cb89"},{"sha":"b9a3511bb61d3b6ce49abd33dce6155a573f5272","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Add LZIP decoder test to list of tests.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b9a3511bb61d3b6ce49abd33dce6155a573f5272"},{"sha":"b8331077c626e6bf14f4671d09b561146eaf816a","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Improve documentation for container.h\n\nStandardizing each function to always specify parameters and return\nvalues. Also moved the parameters and return values to the end of each\nfunction description.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b8331077c626e6bf14f4671d09b561146eaf816a"},{"sha":"37da0e727161b401b8bfd8dccf163a4b2fc0460b","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix typo in documentation in container.h\n\nlzma_microlzma_decoder -> lzma_microlzma_encoder","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/37da0e727161b401b8bfd8dccf163a4b2fc0460b"},{"sha":"17797bacde3f7264048ef0976c137a600148d6cf","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Convert list of flags in lzma_mt to bulleted list.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/17797bacde3f7264048ef0976c137a600148d6cf"},{"sha":"173d240bb4763aedc8c01df4d9c83e311d954c33","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix small typos and reword a few things in filter.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/173d240bb4763aedc8c01df4d9c83e311d954c33"},{"sha":"f6dce49cb656b358e2fb2a3032e35e20af34dc84","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Adjust container.h for consistency with filter.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f6dce49cb656b358e2fb2a3032e35e20af34dc84"},{"sha":"dfc9a54082e0fc7b3b796ea15336b5075acc79d5","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Avoid null pointer + 0 (undefined behavior in C).\n\nIn the C99 and C17 standards, section 6.5.6 paragraph 8 means that\nadding 0 to a null pointer is undefined behavior. As of writing,\n\"clang -fsanitize=undefined\" (Clang 15) diagnoses this. However,\nI'm not aware of any compiler that would take advantage of this\nwhen optimizing (Clang 15 included). It's good to avoid this anyway\nsince compilers might some day infer that pointer arithmetic implies\nthat the pointer is not NULL. That is, the following foo() would then\nunconditionally return 0, even for foo(NULL, 0):\n\n    void bar(char *a, char *b);\n\n    int foo(char *a, size_t n)\n    {\n        bar(a, a + n);\n        return a == NULL;\n    }\n\nIn contrast to C, C++ explicitly allows null pointer + 0. So if\nthe above is compiled as C++ then there is no undefined behavior\nin the foo(NULL, 0) call.\n\nTo me it seems that changing the C standard would be the sane\nthing to do (just add one sentence) as it would ensure that a huge\namount of old code won't break in the future. Based on web searches\nit seems that a large number of codebases (where null pointer + 0\noccurs) are being fixed instead to be future-proof in case compilers\nwill some day optimize based on it (like making the above foo(NULL, 0)\nreturn 0) which in the worst case will cause security bugs.\n\nSome projects don't plan to change it. For example, gnulib and thus\nmany GNU tools currently require that null pointer + 0 is defined:\n\n    https://lists.gnu.org/archive/html/bug-gnulib/2021-11/msg00000.html\n\n    https://www.gnu.org/software/gnulib/manual/html_node/Other-portability-assumptions.html\n\nIn XZ Utils null pointer + 0 issue should be fixed after this\ncommit. This adds a few if-statements and thus branches to avoid\nnull pointer + 0. These check for size > 0 instead of ptr != NULL\nbecause this way bugs where size > 0 && ptr == NULL will likely\nget caught quickly. None of them are in hot spots so it shouldn't\nmatter for performance.\n\nA little less readable version would be replacing\n\n    ptr + offset\n\nwith\n\n    offset != 0 ? ptr + offset : ptr\n\nor creating a macro for it:\n\n    #define my_ptr_add(ptr, offset) \\\n            ((offset) != 0 ? ((ptr) + (offset)) : (ptr))\n\nChecking for offset != 0 instead of ptr != NULL allows GCC >= 8.1,\nClang >= 7, and Clang-based ICX to optimize it to the very same code\nas ptr + offset. That is, it won't create a branch. So for hot code\nthis could be a good solution to avoid null pointer + 0. Unfortunately\nother compilers like ICC 2021 or MSVC 19.33 (VS2022) will create a\nbranch from my_ptr_add().\n\nThanks to Marcin Kowalczyk for reporting the problem:\nhttps://github.com/tukaani-project/xz/issues/36","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/dfc9a54082e0fc7b3b796ea15336b5075acc79d5"},{"sha":"6d05b08b17ac8cb93165ee8f310fdd925b0b258f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6d05b08b17ac8cb93165ee8f310fdd925b0b258f"},{"sha":"8a53533869defa1191b41f176a0312cb53a139e2","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Improve documentation in filter.h.\n\nAll functions now explicitly specify parameter and return values.\nThe notes and code annotations were moved before the parameter and\nreturn value descriptions for consistency.\n\nAlso, the description above lzma_filter_encoder_is_supported() about\nnot being able to list available filters was removed since\nlzma_str_list_filters() will do this.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8a53533869defa1191b41f176a0312cb53a139e2"},{"sha":"5e61b39432752b6cd1a7b518f0f9e4f0c3f0f242","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Reword a few lines in filter.h","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5e61b39432752b6cd1a7b518f0f9e4f0c3f0f242"},{"sha":"3971f5c5024750ce8286891c6f79ae1661047483","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Shorten return description for two functions in filter.h.\n\nShorten the description for lzma_raw_encoder_memusage() and\nlzma_raw_decoder_memusage().","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3971f5c5024750ce8286891c6f79ae1661047483"},{"sha":"4042dbf03a06e019ccdd1e9d1b94cf613d62d5a9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Replace '\\n' -> newline in filter.h documentation.\n\nThe '\\n' renders as a newline when the comments are converted to html\nby Doxygen.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/4042dbf03a06e019ccdd1e9d1b94cf613d62d5a9"}]},"public":true,"created_at":"2023-03-07T15:27:47Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"27552840158","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":12856992203,"size":2,"distinct_size":2,"ref":"refs/heads/v5.4","head":"5d351c69c19d212ddd2cf1f3bdb24900820c6776","before":"2caba3efe3e0c2d7c6dca00e22c56812326a34e6","commits":[{"sha":"b82d4831e3f2339c4cdbc47776c99462088c11b7","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Improve documentation for version.h.\n\nSpecified parameter and return values for API functions and documented\na few more of the macros.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b82d4831e3f2339c4cdbc47776c99462088c11b7"},{"sha":"5d351c69c19d212ddd2cf1f3bdb24900820c6776","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Adjust CMake version search regex.\n\nNow, the LZMA_VERSION_MAJOR, LZMA_VERSION_MINOR, and LZMA_VERSION_PATCH\nmacros do not need to be on consecutive lines in version.h. They can be\nseparated by more whitespace, comments, or even other content, as long\nas they appear in the proper order (major, minor, patch).","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5d351c69c19d212ddd2cf1f3bdb24900820c6776"}]},"public":true,"created_at":"2023-03-07T15:59:12Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
