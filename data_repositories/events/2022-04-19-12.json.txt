{"id":"21353439676","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":453091377,"name":"JiaT75/XZ_Utils_Unofficial","url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial"},"payload":{"push_id":9661317614,"size":17,"distinct_size":7,"ref":"refs/heads/main","head":"ab2a9566e861d08b261fd4f9866e9e8170761b11","before":"4d517db882bfea280cb57a4d2d4093dd53ccf6d9","commits":[{"sha":"487c77d48760564b1949c5067630b675b87be4de","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Threaded decoder: Don't stop threads on LZMA_TIMED_OUT.\n\nLZMA_TIMED_OUT is not an error and thus stopping threads on\nLZMA_TIMED_OUT breaks the decoder badly.\n\nThanks to Jia Tan for finding the bug and for the patch.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/487c77d48760564b1949c5067630b675b87be4de"},{"sha":"e0394e94230f208682ac1e1f4c41f22f9ad79916","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/e0394e94230f208682ac1e1f4c41f22f9ad79916"},{"sha":"bd93b776c1bd15e90661033c918cdeb354dbcc38","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix a deadlock in threaded decoder.\n\nIf a worker thread has consumed all input so far and it's\nwaiting on thr->cond and then the main thread enables\npartial update for that thread, the code used to deadlock.\nThis commit allows one dummy decoding pass to occur in this\nsituation which then also does the partial update.\n\nAs part of the fix, this moves thr->progress_* updates to\navoid the second thr->mutex locking.\n\nThanks to Jia Tan for finding, debugging, and reporting the bug.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/bd93b776c1bd15e90661033c918cdeb354dbcc38"},{"sha":"c35053ee7cce648af89835bd4f1bba34f57df4ed","author":{"email":"jiat0218@gmail.com","name":"jiat75"},"message":"Merge branch 'master' of https://git.tukaani.org/xz into main","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/c35053ee7cce648af89835bd4f1bba34f57df4ed"},{"sha":"69d1b3fc29677af8ade8dc15dba83f0589cb63d6","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xzgrep: Fix escaping of malicious filenames (ZDI-CAN-16587).\n\nMalicious filenames can make xzgrep to write to arbitrary files\nor (with a GNU sed extension) lead to arbitrary code execution.\n\nxzgrep from XZ Utils versions up to and including 5.2.5 are\naffected. 5.3.1alpha and 5.3.2alpha are affected as well.\nThis patch works for all of them.\n\nThis bug was inherited from gzip's zgrep. gzip 1.12 includes\na fix for zgrep.\n\nThe issue with the old sed script is that with multiple newlines,\nthe N-command will read the second line of input, then the\ns-commands will be skipped because it's not the end of the\nfile yet, then a new sed cycle starts and the pattern space\nis printed and emptied. So only the last line or two get escaped.\n\nOne way to fix this would be to read all lines into the pattern\nspace first. However, the included fix is even simpler: All lines\nexcept the last line get a backslash appended at the end. To ensure\nthat shell command substitution doesn't eat a possible trailing\nnewline, a colon is appended to the filename before escaping.\nThe colon is later used to separate the filename from the grep\noutput so it is fine to add it here instead of a few lines later.\n\nThe old code also wasn't POSIX compliant as it used \\n in the\nreplacement section of the s-command. Using \\<newline> is the\nPOSIX compatible method.\n\nLC_ALL=C was added to the two critical sed commands. POSIX sed\nmanual recommends it when using sed to manipulate pathnames\nbecause in other locales invalid multibyte sequences might\ncause issues with some sed implementations. In case of GNU sed,\nthese particular sed scripts wouldn't have such problems but some\nother scripts could have, see:\n\n    info '(sed)Locale Considerations'\n\nThis vulnerability was discovered by:\ncleemy desu wayo working with Trend Micro Zero Day Initiative\n\nThanks to Jim Meyering and Paul Eggert discussing the different\nways to fix this and for coordinating the patch release schedule\nwith gzip.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/69d1b3fc29677af8ade8dc15dba83f0589cb63d6"},{"sha":"2ba8173e27be4793edb46497e499ac2ae753a316","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/2ba8173e27be4793edb46497e499ac2ae753a316"},{"sha":"e671bc8828b9c0c5406c3a22c541301d0eb54518","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Threaded decoder: Support zpipe.c-style decoding loop.\n\nThis makes it possible to call lzma_code() in a loop that only\nreads new input when lzma_code() didn't fill the output buffer\ncompletely. That isn't the calling style suggested by the\nliblzma example program 02_decompress.c so perhaps the usefulness\nof this feature is limited.\n\nAlso, it is possible to write such a loop so that it works\nwith the single-threaded decoder but not with the threaded\ndecoder even after this commit, or so that it works only if\nlzma_mt.timeout = 0.\n\nThe zlib tutorial <https://zlib.net/zlib_how.html> is a well-known\nexample of a loop where more input is read only when output isn't\nfull. Porting this as is to liblzma would work with the\nsingle-threaded decoder (if LZMA_CONCATENATED isn't used) but it\nwouldn't work with threaded decoder even after this commit because\nthe loop assumes that no more output is possible when it cannot\nread more input (\"if (strm.avail_in == 0) break;\"). This cannot\nbe fixed at liblzma side; the loop has to be modified at least\na little.\n\nI'm adding this in any case because the actual code is simple\nand short and should have no harmful side-effects in other\nsituations.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/e671bc8828b9c0c5406c3a22c541301d0eb54518"},{"sha":"64b6d496dc815a176d8307f418f6834a26783484","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Threaded decoder: Always wait for output if LZMA_FINISH is used.\n\nThis makes the behavior consistent with the single-threaded\ndecoder when handling truncated .xz files.\n\nThanks to Jia Tan for finding this issue.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/64b6d496dc815a176d8307f418f6834a26783484"},{"sha":"90621da7f6e1bfd6d91d60415eae04b2bca274c2","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add a new flag LZMA_FAIL_FAST for threaded decoder.\n\nIn most cases if the input file is corrupt the application won't\ncare about the uncompressed content at all. With this new flag\nthe threaded decoder will return an error as soon as any thread\nhas detected an error; it won't wait to copy out the data before\nthe location of the error.\n\nI don't plan to use this in xz to keep the behavior consistent\nbetween single-threaded and multi-threaded modes.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/90621da7f6e1bfd6d91d60415eae04b2bca274c2"},{"sha":"fe87b4cd5364f5bbb6a75a0299f1500c852d7c9a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Threaded decoder: Improve setting of pending_error.\n\nIt doesn't need to be done conditionally. The comments try\nto explain it.","distinct":false,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/fe87b4cd5364f5bbb6a75a0299f1500c852d7c9a"},{"sha":"cad299008cf73ec566f0662a9cf2b94f86a99659","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Add --memlimit-mt-decompress along with a default limit value.\n\n--memlimit-mt-decompress allows specifying the limit for\nmultithreaded decompression. This matches memlimit_threading in\nliblzma. This limit can only affect the number of threads being\nused; it will never prevent xz from decompressing a file. The\nold --memlimit-decompress option is still used at the same time.\n\nIf the value of --memlimit-decompress (the default value or\none specified by the user) is less than the value of\n--memlimit-mt-decompress , then --memlimit-mt-decompress is\nreduced to match --memlimit-decompress.\n\nMan page wasn't updated yet.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/cad299008cf73ec566f0662a9cf2b94f86a99659"},{"sha":"898faa97287a756231c663a3ed5165672b417207","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Changes to --memlimit-compress and --no-adjust.\n\nIn single-threaded mode, --memlimit-compress can make xz scale down\nthe LZMA2 dictionary size to meet the memory usage limit. This\nobviously affects the compressed output. However, if xz was in\nthreaded mode, --memlimit-compress could make xz reduce the number\nof threads but it wouldn't make xz switch from multithreaded mode\nto single-threaded mode or scale down the LZMA2 dictionary size.\nThis seemed illogical and there was even a \"FIXME?\" about it.\n\nNow --memlimit-compress can make xz switch to single-threaded\nmode if one thread in multithreaded mode uses too much memory.\nIf memory usage is still too high, then the LZMA2 dictionary\nsize can be scaled down too.\n\nThe option --no-adjust was also changed so that it no longer\nprevents xz from scaling down the number of threads as that\ndoesn't affect compressed output (only performance). After\nthis commit --no-adjust only prevents adjustments that affect\ncompressed output, that is, with --no-adjust xz won't switch\nfrom multithreaded mode to single-threaded mode and won't\nscale down the LZMA2 dictionary size.\n\nThe man page wasn't updated yet.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/898faa97287a756231c663a3ed5165672b417207"},{"sha":"0adc13bfe32c14f3e4c6ce9f2d4fdf4112ab53f4","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Make -T0 use multithreaded mode on single-core systems.\n\nThe main problem withi the old behavior is that the compressed\noutput is different on single-core systems vs. multicore systems.\nThis commit fixes it by making -T0 one thread in multithreaded mode\non single-core systems.\n\nThe downside of this is that it uses more memory. However, if\n--memlimit-compress is used, xz can (thanks to the previous commit)\ndrop to the single-threaded mode still.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/0adc13bfe32c14f3e4c6ce9f2d4fdf4112ab53f4"},{"sha":"c77fe55ddb7752ed0fec46967c5ec9a72632ea0c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Add a default soft memory usage limit for --threads=0.\n\nThis is a soft limit in sense that it only affects the number of\nthreads. It never makes xz fail and it never makes xz change\nsettings that would affect the compressed output.\n\nThe idea is to make -T0 have more reasonable behavior when\nthe system has very many cores or when a memory-hungry\ncompression options are used. This also helps with 32-bit xz,\npreventing it from running out of address space.\n\nThe downside of this commit is that now the number of threads\nmight become too low compared to what the user expected. I\nhope this to be an acceptable compromise as the old behavior\nhas been a source of well-argued complaints for a long time.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/c77fe55ddb7752ed0fec46967c5ec9a72632ea0c"},{"sha":"1d592897278b172d8549aa29c3a1f3a4f432a9b9","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Change the cap of the default -T0 memlimit for 32-bit xz.\n\nThe SIZE_MAX / 3 was 1365 MiB. 1400 MiB gives little more room\nand it looks like a round (artificial) number in --info-memory\nonce --info-memory is made to display it.\n\nAlso, using #if avoids useless code on 64-bit builds.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/1d592897278b172d8549aa29c3a1f3a4f432a9b9"},{"sha":"5d8f3764ef43c35910e6d7003c0900a961ef6544","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Fix build with --disable-threads.","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/5d8f3764ef43c35910e6d7003c0900a961ef6544"},{"sha":"ab2a9566e861d08b261fd4f9866e9e8170761b11","author":{"email":"jiat0218@gmail.com","name":"jiat75"},"message":"Merge branch 'master' of https://git.tukaani.org/xz into main","distinct":true,"url":"https://api.github.com/repos/JiaT75/XZ_Utils_Unofficial/commits/ab2a9566e861d08b261fd4f9866e9e8170761b11"}]},"public":true,"created_at":"2022-04-19T12:19:58Z"}
