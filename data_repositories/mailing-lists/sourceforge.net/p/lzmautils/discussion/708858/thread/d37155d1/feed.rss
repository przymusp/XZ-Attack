<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recent posts to Multi-threaded compression, when?</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/d37155d1/</link><description>Recent posts to Multi-threaded compression, when?</description><language>en</language><lastBuildDate>Wed, 03 Jun 2015 19:21:50 -0000</lastBuildDate><atom:link href="https://sourceforge.net/p/lzmautils/discussion/708858/thread/d37155d1/feed.rss" rel="self" type="application/rss+xml"></atom:link><item><title>Multi-threaded compression, when?</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/d37155d1/</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;The current threading method splits the data into blocks and compresses them independently. This makes the compression ratio worse, but usually the increase is only a few percent. With some types of data the effect on compression ratio is higher, and the worst case can be really bad (making threading useless).&lt;/p&gt;
&lt;p&gt;Your 30 % increase in file size sounds bad. If you have many files like the one you tested, then searching for different compression options is a good idea like you have already done. The counterintuitive effect on speed may be explained by the change in compression ratio: with a bigger dictionary and block size the encoder might be able to find long repeated chunks of data more easily and thus need less time to analyze the data.&lt;/p&gt;
&lt;p&gt;The default block size is 3 times the LZMA2 dictionary size or at least 1 MiB. The -3 preset uses 4 MiB dictionary and thus 12 MiB block size by default. To get 16 threads, you need at least 16 * 12 MiB = 192 MiB input file. If your input file isn't a multiple of that, the end of the file probably won't use all cores (depends on how fast the blocks finish). When you set 16 MiB dictionary, the default block size increases to 48 MiB.&lt;/p&gt;
&lt;p&gt;Increasing the block size has smaller effect on memory usage than increasing the dictionary size. You could test e.g. "xz -3 --block-size=78MiB" which uses the same amount of memory as the settings you tested but the bigger block size might improve the file size.&lt;/p&gt;
&lt;p&gt;For the current threading method (splitting into blocks) there's some hope to get the memory usage down a little (not a big improvement), but I don't see much hope for improving compression ratio or performance. However, other threading methods should be implemented. 7-Zip has had match finder threading as long as I remember (I think over a decade) which scales to two cores without increasing memory usage. Combining it with the current method would allow using bigger dictionaries and block sizes with the same amount of memory.&lt;/p&gt;
&lt;p&gt;The third planned threading method comes from pigz (parallel gzip). There's &lt;a class="" href="http://tukaani.org/xz/lzma2-openmp.c" rel="nofollow"&gt;an old prototype&lt;/a&gt; (not intended for production use!) in case you are curious. See the comments in the code for more information.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Wed, 03 Jun 2015 19:21:50 -0000</pubDate><guid isPermaLink="false">https://sourceforge.netc290c37208a0dc3fc7d7d0fd89b4079f70f91f45</guid></item><item><title>Multi-threaded compression, when?</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/d37155d1/</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Hi, and thanks for implementing the MT improvements in 5.2! I tested 5.2.1 -T0 on a 16 core VM with -3 mode, here are my findings vs. default:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;speed: 7.3x than default (ideally it could be 16.0x)&lt;/li&gt;
&lt;li&gt;size: the file size is 1.30x (ideally it should be 1.00x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I managed to improve the MT compression ratio (to a slightly better size than without -T0) using --lzma2=preset=3,dict=16MiB (speed is also a bit faster(!), however it uses more RAM), however when using the same setting without -T0 I still get a much better compression ratio. So -T0 vs -T1 with --lzma2=preset=3,dict=16MiB:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;speed: 9.9x than default (ideally it could be 16.0x)&lt;/li&gt;
&lt;li&gt;size: the file size is 1.11x (ideally it should be 1.00x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end MT is very good, but still doesn't scale perfectly. Is there any hope to improve MT scaling or these limitations can't be overcomed?&lt;/p&gt;
&lt;p&gt;Thanks again for this great tool!&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">paletta</dc:creator><pubDate>Fri, 22 May 2015 15:22:09 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net7f362114cd28fd6c3525bfdb0b6cc07e141301e7</guid></item></channel></rss>