{"id":"39209009756","type":"WatchEvent","actor":{"id":4601743,"login":"madkrupt","display_login":"madkrupt","gravatar_id":"","url":"https://api.github.com/users/madkrupt","avatar_url":"https://avatars.githubusercontent.com/u/4601743?"},"repo":{"id":553668398,"name":"tukaani-project/xz-java","url":"https://api.github.com/repos/tukaani-project/xz-java"},"payload":{"action":"started"},"public":true,"created_at":"2024-06-11T21:20:15Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"39209167447","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/122","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/122/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/122/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/122/events","html_url":"https://github.com/tukaani-project/xz/issues/122","id":2326151776,"node_id":"I_kwDOIQBEvs6KpkJg","number":122,"title":"tsan also needs sanitizer nerf for crc64","user":{"login":"nate-thirdwave","id":96086763,"node_id":"U_kgDOBboq6w","avatar_url":"https://avatars.githubusercontent.com/u/96086763?v=4","gravatar_id":"","url":"https://api.github.com/users/nate-thirdwave","html_url":"https://github.com/nate-thirdwave","followers_url":"https://api.github.com/users/nate-thirdwave/followers","following_url":"https://api.github.com/users/nate-thirdwave/following{/other_user}","gists_url":"https://api.github.com/users/nate-thirdwave/gists{/gist_id}","starred_url":"https://api.github.com/users/nate-thirdwave/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nate-thirdwave/subscriptions","organizations_url":"https://api.github.com/users/nate-thirdwave/orgs","repos_url":"https://api.github.com/users/nate-thirdwave/repos","events_url":"https://api.github.com/users/nate-thirdwave/events{/privacy}","received_events_url":"https://api.github.com/users/nate-thirdwave/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2024-05-30T17:06:42Z","updated_at":"2024-06-11T21:28:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The `no_sanitize_address` nerf for crc64 also needs `no_sanitize_thread` since the tsan checker also looks for heap-use-after-free.\r\n\r\n```\r\n--- src/liblzma/check/crc64_fast.c\t2023-11-01 12:19:29.000000000 +0000\r\n+++ src/liblzma/check/crc64_fast.c-new\t2024-05-30 16:56:41.935335535 +0000\r\n@@ -209,11 +209,14 @@\r\n // The intrinsics use 16-byte-aligned reads from buf, thus they may read\r\n // up to 15 bytes before or after the buffer (depending on the alignment\r\n // of the buf argument). The values of the extra bytes are ignored.\r\n-// This unavoidably trips -fsanitize=address so address sanitizier has\r\n-// to be disabled for this function.\r\n+// This unavoidably trips -fsanitize=address and -fsanitize=thread\r\n+// so the sanitizers have to be disabled for this function.\r\n #if lzma_has_attribute(__no_sanitize_address__)\r\n __attribute__((__no_sanitize_address__))\r\n #endif\r\n+#if lzma_has_attribute(__no_sanitize_thread__)\r\n+__attribute__((__no_sanitize_thread__))\r\n+#endif\r\n static uint64_t\r\n crc64_clmul(const uint8_t *buf, size_t size, uint64_t crc)\r\n {\r\n```","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/122/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2161625988","html_url":"https://github.com/tukaani-project/xz/issues/122#issuecomment-2161625988","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/122","id":2161625988,"node_id":"IC_kwDOIQBEvs6A18uE","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2024-06-11T21:28:17Z","updated_at":"2024-06-11T21:28:17Z","author_association":"MEMBER","body":"See #127.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2161625988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-11T21:28:18Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"39209173122","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/112","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/events","html_url":"https://github.com/tukaani-project/xz/issues/112","id":2253168482,"node_id":"I_kwDOIQBEvs6GTJ9i","number":112,"title":"no_sanitize_address isn't required","user":{"login":"nigeltao","id":8565232,"node_id":"MDQ6VXNlcjg1NjUyMzI=","avatar_url":"https://avatars.githubusercontent.com/u/8565232?v=4","gravatar_id":"","url":"https://api.github.com/users/nigeltao","html_url":"https://github.com/nigeltao","followers_url":"https://api.github.com/users/nigeltao/followers","following_url":"https://api.github.com/users/nigeltao/following{/other_user}","gists_url":"https://api.github.com/users/nigeltao/gists{/gist_id}","starred_url":"https://api.github.com/users/nigeltao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nigeltao/subscriptions","organizations_url":"https://api.github.com/users/nigeltao/orgs","repos_url":"https://api.github.com/users/nigeltao/repos","events_url":"https://api.github.com/users/nigeltao/events{/privacy}","received_events_url":"https://api.github.com/users/nigeltao/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2024-04-19T14:32:35Z","updated_at":"2024-06-11T21:28:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://tukaani.org/xz-backdoor/review.html discusses the `crc_attr_no_sanitize_address` (i.e. `__attribute__((__no_sanitize_address__))`) in `crc_x86_clmul.h`:\r\n\r\n> This attribute is obviously scary but it is unfortunately required with the x86 SIMD code. The code makes aligned 16-byte reads which may read up to 15 bytes before the beginning or past the end of the buffer if the buffer is misaligned. The unneeded bytes are then ignored. It cannot cross page boundaries and thus cannot cause access violations.\r\n\r\nDisabling sanitzers is indeed scary. But also, I don't think the disabling is required to use x86 SIMD.\r\n\r\nInstead, you can add `crc_simd_body` preconditions that its `buf` and `size` arguments must be 16-byte aligned. Make the callers (`crc32_arch_optimized` and `crc64_arch_optimized`) responsible for the leading/lagging bytes that aren't 16-byte aligned. Out-of-bounds reads are no longer needed.\r\n\r\n```diff\r\ndiff --git a/src/liblzma/check/crc_x86_clmul.h b/src/liblzma/check/crc_x86_clmul.h\r\nindex f1254ece..7ecd16ee 100644\r\n--- a/src/liblzma/check/crc_x86_clmul.h\r\n+++ b/src/liblzma/check/crc_x86_clmul.h\r\n@@ -91,6 +91,9 @@ crc_simd_body(const uint8_t *buf, const size_t size, __m128i *v0, __m128i *v1,\r\n        //     [skip_start][size][skip_end]\r\n        //     [     size2      ]\r\n        //\r\n+       // This code can be simplified. skip_start and skip_end are now always 0,\r\n+       // size is a positive multiple of 16 and size2 = size.\r\n+       //\r\n        // A and D are 16-byte aligned. B and C are 1-byte aligned.\r\n        // skip_start and skip_end are 0-15 bytes. size is at least 1 byte.\r\n        //\r\n@@ -253,6 +256,15 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)\r\n                return crc;\r\n #endif\r\n \r\n+       // Process any leading bytes (before the 16-byte chunks).\r\n+       crc = ~crc;\r\n+       while (15 & (uintptr_t)buf) {\r\n+               if (size == 0)\r\n+                       return ~crc;\r\n+               crc = lzma_crc32_table[0][*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);\r\n+               --size;\r\n+       }\r\n+\r\n        // uint32_t poly = 0xedb88320;\r\n        const int64_t p = 0x1db710640; // p << 1\r\n        const int64_t mu = 0x1f7011641; // calc_lo(p, p, 32) << 1 | 1\r\n@@ -264,21 +276,34 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)\r\n        const __m128i vfold8 = _mm_set_epi64x(0, k5);\r\n        const __m128i vfold16 = _mm_set_epi64x(k4, k3);\r\n \r\n-       __m128i v0, v1, v2;\r\n+       // Process 16-byte chunks that are 16-byte aligned.\r\n+       size_t size1 = size & 15;\r\n+       size_t size0 = size - size1;\r\n+       if (size0) {\r\n+               __m128i v0, v1, v2;\r\n+\r\n+               crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n+                               _mm_cvtsi32_si128((int32_t)~crc));\r\n+               buf += size0;\r\n+\r\n+               v1 = _mm_xor_si128(\r\n+                               _mm_clmulepi64_si128(v0, vfold16, 0x10), v1); // xxx0\r\n+               v2 = _mm_shuffle_epi32(v1, 0xe7); // 0xx0\r\n+               v0 = _mm_slli_epi64(v1, 32);  // [0]\r\n+               v0 = _mm_clmulepi64_si128(v0, vfold8, 0x00);\r\n+               v0 = _mm_xor_si128(v0, v2);   // [1] [2]\r\n+               v2 = _mm_clmulepi64_si128(v0, vfold4, 0x10);\r\n+               v2 = _mm_clmulepi64_si128(v2, vfold4, 0x00);\r\n+               v0 = _mm_xor_si128(v0, v2);   // [2]\r\n+               crc = ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n+       }\r\n \r\n-       crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n-                       _mm_cvtsi32_si128((int32_t)~crc));\r\n-\r\n-       v1 = _mm_xor_si128(\r\n-                       _mm_clmulepi64_si128(v0, vfold16, 0x10), v1); // xxx0\r\n-       v2 = _mm_shuffle_epi32(v1, 0xe7); // 0xx0\r\n-       v0 = _mm_slli_epi64(v1, 32);  // [0]\r\n-       v0 = _mm_clmulepi64_si128(v0, vfold8, 0x00);\r\n-       v0 = _mm_xor_si128(v0, v2);   // [1] [2]\r\n-       v2 = _mm_clmulepi64_si128(v0, vfold4, 0x10);\r\n-       v2 = _mm_clmulepi64_si128(v2, vfold4, 0x00);\r\n-       v0 = _mm_xor_si128(v0, v2);   // [2]\r\n-       return ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n+       // Process any lagging bytes (after the 16-byte chunks).\r\n+       while (size1--) {\r\n+               crc = lzma_crc32_table[0][*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);\r\n+       }\r\n+\r\n+       return ~crc;\r\n }\r\n #endif // BUILDING_CRC32_CLMUL\r\n \r\n@@ -343,6 +368,8 @@ crc64_arch_optimized(const uint8_t *buf, size_t size, uint64_t crc)\r\n                return crc;\r\n #endif\r\n \r\n+       // Ditto.\r\n+\r\n        // const uint64_t poly = 0xc96c5795d7870f42; // CRC polynomial\r\n        const uint64_t p  = 0x92d8af2baf0e1e85; // (poly << 1) | 1\r\n        const uint64_t mu = 0x9c3e466c172963d5; // (calc_lo(poly) << 1) | 1\r\n```","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2161626454","html_url":"https://github.com/tukaani-project/xz/issues/112#issuecomment-2161626454","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/112","id":2161626454,"node_id":"IC_kwDOIQBEvs6A181W","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2024-06-11T21:28:34Z","updated_at":"2024-06-11T21:28:34Z","author_association":"MEMBER","body":"See #127.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2161626454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-11T21:28:35Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"39209550558","type":"CreateEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"ref":"c11","ref_type":"branch","master_branch":"master","description":"XZ Utils","pusher_type":"user"},"public":true,"created_at":"2024-06-11T21:46:47Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"39209602076","type":"PushEvent","actor":{"id":11667869,"login":"thesamesam","display_login":"thesamesam","gravatar_id":"","url":"https://api.github.com/users/thesamesam","avatar_url":"https://avatars.githubusercontent.com/u/11667869?"},"repo":{"id":784677605,"name":"thesamesam/xz","url":"https://api.github.com/repos/thesamesam/xz"},"payload":{"repository_id":784677605,"push_id":18835561574,"size":18,"distinct_size":18,"ref":"refs/heads/master","head":"89e9f12e03324b8a186e807b268f34f92d1b2f41","before":"35f8649f08341639a627fd06350e938124ca3622","commits":[{"sha":"afa938e429c1ce07d26d02999352fb014b62ff3d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Install liblzma.pc even with MSVC\n\nI had misunderstood that it wouldn't be useful with MSVC.\nvcpkg had been installing liblzma.pc with custom rules since 2020,\nyears before liblzma.pc support was added to CMakeLists.txt.\n\nSee:\nhttps://github.com/microsoft/vcpkg/blob/eb895b95aac6fd7485373702f29f508c42a180a0/ports/liblzma/portfile.cmake\nhttps://github.com/microsoft/vcpkg/pull/39024#issuecomment-2145064670","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/afa938e429c1ce07d26d02999352fb014b62ff3d"},{"sha":"5229bdf5335ce18ed54beb7e646e39927663be86","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CI: Use set -e on Solaris too","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/5229bdf5335ce18ed54beb7e646e39927663be86"},{"sha":"a61c9ab4751f2710dcd5459c7d74bbf20781f0f9","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CI: Don't require po4a on Solaris","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/a61c9ab4751f2710dcd5459c7d74bbf20781f0f9"},{"sha":"e7a42cda7c827e016619e8cab15e2faf5d4181ae","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Fix version.sh compatiblity with Solaris\n\nThe ancient /bin/tr on Solaris doesn't support '\\n'.\nWith /usr/xpg4/bin/tr it works but it might not be in PATH.\n\nAnother problem was that sed was given input that didn't have a newline\nat the end. Text files must end with a newline to be portable.\n\nFix both problems:\n\n  - Handle multiline input within sed itself to avoid one tr invocation.\n    The default sed even on Solaris does understand \\n.\n\n  - Use octals in tr -d. \\012 works for ASCII \"line feed\", it's even\n    used as an example in the Solaris man page. But we must strip\n    also ASCII \"carriage return\" \\015 and EBCDIC \"next line\" \\025.\n    The EBCDIC case got handled with \\n previously. Stripping \\012\n    and \\015 on EBCDIC system won't matter as those control chars\n    won't be present in the string in the first place.\n\nAn awk-based solution could be an alternative but it might need\nspecial casing on Solaris to used nawk instead of awk. The changes\nin this commit are smaller and should have a smaller risk for\nregressions. It's also possible that version.sh will be dropped\nentirely at some point.","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/e7a42cda7c827e016619e8cab15e2faf5d4181ae"},{"sha":"e0d6d05ce0d464e966c0669bbf869202a43cc2f7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Fix liblzma filename in Windows environments\n\nThis is a mess because liblzma DLL outside Cygwin and MSYS2\nis liblzma.dll instead of lzma.dll to avoid a conflict with\nlzma.dll from LZMA SDK.\n\nOn Cygwin the name was \"liblzma-5.dll\" while \"cyglzma-5.dll\"\nwould have been correct (and match what Libtool produces).\nMSYS2 likely was broken too as it uses the \"msys-\" prefix.\n\nThis change has no effect with MinGW-w64 because with that\nthe \"lib\" prefix was correct already.\n\nWith MSVC builds this is a small breaking change that requires developers\nto adjust the library name when linking against liblzma. The liblzma.dll\nname is kept as is but the import library and static library are now\nlzma.lib instead of liblzma.lib. This is helpful when using pkgconf\nbecause \"pkgconf --msvc-syntax --libs liblzma\" outputs \"lzma.lib\"\n(it's converted from \"-llzma\" in liblzma.pc). It would be easy to\nkeep the liblzma.lib naming but the pkgconf compatibility seems worth\nit in the long run. The lzma.lib name is compatible with MinGW-w64\ntoo as -llzma will find also lzma.lib.\n\nvcpkg had been patching CMakeLists.txt this way since 2022 but I\nlearned this only recently. The reasoning for the patch makes sense,\nand while this is a small breaking change with MSVC, it seems like\na decent compromise as it keeps the DLL name the same.\n\n2022 patch in vcpkg: https://github.com/microsoft/vcpkg/blob/0707a17ecf1466d64cf1a3c1ee18c8ff02aadb2d/ports/liblzma/win_output_name.patch\nSee the discussion: https://github.com/microsoft/vcpkg/pull/39024\n\nThanks to Vincent Torri for confirming the naming issue on Cygwin.","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/e0d6d05ce0d464e966c0669bbf869202a43cc2f7"},{"sha":"5d1c649ba9eb7a5b9371252ebfbc2911dc774e69","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Set only \"prefix\" as an absolute path in liblzma.pc\n\nCMake provides variables that are relative to CMAKE_INSTALL_PREFIX\nso use them instead of repeating the full path.","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/5d1c649ba9eb7a5b9371252ebfbc2911dc774e69"},{"sha":"1d3c61575fda0be6b2d50c9e32a343349d5cd5c0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Fix wrong version variable\n\nliblzma_VERSION has never existed in the repository. xz_VERSION from\nthe project() command was used for liblzma SOVERSION so use xz_VERSION\nhere too.\n\nThe wrong variable did no harm in practice as PROJECT_VERSION\nwas used as the fallback. It has the same value as xz_VERSION.\n\nFixes: 7e3493d40eac0c3fa3d5124097745a70e15c41f6","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/1d3c61575fda0be6b2d50c9e32a343349d5cd5c0"},{"sha":"e5491dfab9c54dc7078a8d3d07fabb91d6e06418","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Include the \"alpha\" or \"beta\" suffix in PACKAGE_VERSION\n\nThis way the version string gets into xzgrep and other scripts\nin full and also into liblzma.pc.\n\nFor the project() command, a suffixless string is required though.","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/e5491dfab9c54dc7078a8d3d07fabb91d6e06418"},{"sha":"f5c2ae58ec68c665e62c790b842657afcb31474c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/f5c2ae58ec68c665e62c790b842657afcb31474c"},{"sha":"dc03f6290f5b9bd3d50c7e12e58dee870889d599","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add ARM64 CRC32 instruction support detection on OpenBSD\n\nThe C code is from Christian Weisgerber, I merely reordered the OSes.\nThen I added the build system checks without testing them.\n\nAlso thanks to Brad Smith who submitted a similar patch on GitHub\na few hours after Christian had sent his via email.\n\nCo-authored-by: Christian Weisgerber <naddy@mips.inka.de>\nCloses: https://github.com/tukaani-project/xz/pull/125","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/dc03f6290f5b9bd3d50c7e12e58dee870889d599"},{"sha":"04b23addf3733873667675df2439725f076c2f36","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer: Fix building on OpenBSD/sparc64 that uses GCC 4.2\n\nGCC 4.2 doesn't have __builtin_bswap16() and friends so tuklib_integer.h\ntries to use OS-specific byte swap methods instead. On OpenBSD those\nmacros are swap16/32/64 instead of bswap16/32/64 like on other *BSDs\nand Darwin.\n\nAn alternative to \"#ifdef __OpenBSD__\" could be \"#ifdef swap16\" as it\nis a macro. But since OpenBSD seems to be a special case under this\nspecial case of \"*BSDs and Darwin\", checking for __OpenBSD__ seems\nthe more conservative choice now.\n\nThanks to Christian Weisgerber and Brad Smith who both submitted\nthe same patch a few hours apart.\n\nCo-authored-by: Christian Weisgerber <naddy@mips.inka.de>\nCo-authored-by: Brad Smith <brad@comstyle.com>\nCloses: https://github.com/tukaani-project/xz/pull/126","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/04b23addf3733873667675df2439725f076c2f36"},{"sha":"9e73918a4f14be754a23f74dda45ca431939a4a0","author":{"email":"rainrat78@yahoo.ca","name":"RainRat"},"message":"Fix typos\n\nCloses: https://github.com/tukaani-project/xz/pull/124","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/9e73918a4f14be754a23f74dda45ca431939a4a0"},{"sha":"caea7844d3824755d053b4743c4913d73ac2db3d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib: __STDC_VERSION__ in C23 is 202311","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/caea7844d3824755d053b4743c4913d73ac2db3d"},{"sha":"50e6bff274568c568930e15094da8217e7d47d28","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix white space","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/50e6bff274568c568930e15094da8217e7d47d28"},{"sha":"afd9b4d282a10186808c3331dad4caf79c02d55f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix a comment indentation","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/afd9b4d282a10186808c3331dad4caf79c02d55f"},{"sha":"0a32d2072c598de281058b26dc08920fbf0cd2a1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix a typo in a comment\n\nThanks to Sam James for spotting it.\n\nFixes: f644473a211394447824ea00518d0a214ff3f7f2","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/0a32d2072c598de281058b26dc08920fbf0cd2a1"},{"sha":"c7164b1927e3fe7cdba70ee4687e1a590a81043b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Fix white space","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/c7164b1927e3fe7cdba70ee4687e1a590a81043b"},{"sha":"89e9f12e03324b8a186e807b268f34f92d1b2f41","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Tests: Improve the CRC32 test\n\nA similar one was already there for CRC64 but nowadays also CRC32\nhas a CLMUL implementation, so it's good to test it better too.","distinct":true,"url":"https://api.github.com/repos/thesamesam/xz/commits/89e9f12e03324b8a186e807b268f34f92d1b2f41"}]},"public":true,"created_at":"2024-06-11T21:49:22Z"}
