<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recent posts to Memory Leak in lzma_lzma_props_decode</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/53c6321fc4/</link><description>Recent posts to Memory Leak in lzma_lzma_props_decode</description><language>en</language><lastBuildDate>Thu, 14 Nov 2019 20:43:18 -0000</lastBuildDate><atom:link href="https://sourceforge.net/p/lzmautils/discussion/708858/thread/53c6321fc4/feed.rss" rel="self" type="application/rss+xml"></atom:link><item><title>Memory Leak in lzma_lzma_props_decode</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/53c6321fc4/?limit=25#1a08</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Yes, I'm using &lt;code&gt;lzma_properties_decode&lt;/code&gt;.  Sorry I missed the updated documentation, but at least I now know the issue is mine and not yours.  &lt;/p&gt;
&lt;p&gt;Thanks for the help.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Marquess</dc:creator><pubDate>Thu, 14 Nov 2019 20:43:18 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net10bedf37256b86293fcec6c2aa756518a2bcd3d8</guid></item><item><title>Memory Leak in lzma_lzma_props_decode</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/53c6321fc4/?limit=25#f1c0</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;I assume you used &lt;code&gt;lzma_properties_decode&lt;/code&gt; which ends up calling the internal function &lt;code&gt;lzma_lzma_props_decode&lt;/code&gt;. The API doc was improved on 2018-05-19 but XZ Utils 5.2.4 is older than that. So nowadays the documentation does mention the need to free the memory allocated for the options.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lzma_properties_decode&lt;/code&gt; is one of those functions that were needed internally and I decided to expose it in the public API as is instead thinking what would be the best API for applications to use. When one knows at compile time the filter ID, it's a bit silly that liblzma takes care of allocating the options structure instead of letting the caller do that (since the caller already knows which structure it will be). Since &lt;code&gt;lzma_properties_decode&lt;/code&gt; decodes the properties and allocates a structure to hold the decoded properties/options, something obviously has to free it too, and in this case the caller needs to do it directly.&lt;/p&gt;
&lt;p&gt;This function has a portability problem on Windows. If liblzma.dll was built against a different C library than the application, simply using &lt;code&gt;free&lt;/code&gt; in the application won't work because memory allocated with &lt;code&gt;malloc&lt;/code&gt; from one C library cannot be freed using &lt;code&gt;free&lt;/code&gt; from a different C library. One can work around this by using &lt;code&gt;lzma_allocator&lt;/code&gt; although it's a bit inconvenient.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Thu, 14 Nov 2019 20:19:59 -0000</pubDate><guid isPermaLink="false">https://sourceforge.netfe93cdbb5811f6f245c9c0cc10f2cd7d14e24528</guid></item><item><title>Memory Leak in lzma_lzma_props_decode</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/53c6321fc4/?limit=25#4c01</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;I maintain the Perl interface to this library.&lt;/p&gt;
&lt;p&gt;One of the uses I have for this  library is to add support for LZMA comression/uncompression in zip files. To do the uncompression I use &lt;code&gt;lzma_raw_decoder&lt;/code&gt; plus a filter to create the LZMA1 decompressor. The problem I'm finding is that valgrind reports a memory leak in &lt;code&gt;lzma_lzma_props_decode&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;15500&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;    &lt;span class="k"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x483874F&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vg_replace_malloc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;299&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;15500&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;    &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x6BDB096&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lzma_lzma_props_decode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lzma_decoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1042&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That corresponds to this statement in &lt;code&gt;lzma_lzma_props_decode&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;lzma_options_lzma&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lzma_alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lzma_options_lzma&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;allocator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can work around this issue by explicitly freeing the memory  allocated by&lt;code&gt;lzma_lzma_props_decode&lt;/code&gt; in my code, but this looks like a bug.&lt;/p&gt;
&lt;p&gt;Note that I found the fix for this in  &lt;a class="" href="https://www.libarchive.org/" rel="nofollow"&gt;libarchive&lt;/a&gt;, which has tripped over the same leak. See  &lt;a class="" href="https://github.com/libarchive/libarchive/commit/8c0c4fd77d961458e690d51098abe1e0e25c9df1" rel="nofollow"&gt;here&lt;/a&gt; for details of the change.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Marquess</dc:creator><pubDate>Sat, 09 Nov 2019 12:48:45 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net00ef9fa6b94d74e9138f0cf44d7d87f93130e5e7</guid></item></channel></rss>