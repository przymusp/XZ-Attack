{"id":"32488494142","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15380991964,"size":9,"distinct_size":3,"ref":"refs/heads/build_werror","head":"b3d69f3501169213b8aab668a04bef40acfa56b2","before":"671bac01e3c95ba2006ad6fe560a0bd7d753f006","commits":[{"sha":"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Fix Windows build with Clang/LLVM 17.\n\nllvm-windres 17.0.0 has more accurate emulation of GNU windres, so\nthe hack for GNU windres must now be used with llvm-windres too.\n\nLLVM 16.0.6 has the old behavior and there likely won't be more\n16.x releases. So we can simply check for >= 17.0.0.\n\nSee also:\nhttps://github.com/llvm/llvm-project/commit/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/0570308ddd9c0e39e85597ebc0e31d4fc81d436f"},{"sha":"506d03127a8565442b028ec991e1578124fd3025","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Specify LINKER_LANGUAGE for libgnu target to fix Ninja Generator.\n\nCMake is unable to guess the linker language for just a header file so\nit must be explicitly set.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/506d03127a8565442b028ec991e1578124fd3025"},{"sha":"30d0c35327f3639cb11224872aa58fdbf0b1526e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Rename xz and man page symlink custom targets.\n\nThe Ninja Generator for CMake cannot have a custom target and its\nBYPRODUCTS have the same name. This has prevented Ninja builds on\nUnix-like systems since the xz symlinks were introduced in\n80a1a8bb838842a2be343bd88ad1462c21c5e2c9.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/30d0c35327f3639cb11224872aa58fdbf0b1526e"},{"sha":"01e34aa1171b04f8b28960b1cc6135a903e0c13d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Disable CLANG64 MSYS2 environment until bug is resolved.\n\nlld 17.0.1 searches for libraries to link first in the toolchain\ndirectories before the local directory when building. The is a problem\nfor us because liblzma.a is installed in MSYS2 CLANG64 by default and\nxz.exe will thus use the installed library instead of the one being\nbuilt.\n\nThis causes tests to fail when they are expecting features to be\ndisabled. More importantly, it will compile xz.exe with an incorrect\nliblzma and could cause unexpected behavior by being unable to update\nliblzma code in static builds. The CLANG64 environment can be tested\nagain once this is fixed.\n\nLink to bug: https://github.com/llvm/llvm-project/issues/67779.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/01e34aa1171b04f8b28960b1cc6135a903e0c13d"},{"sha":"d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix when the windres workaround is applied.\n\nCMake doesn't set WIN32 on CYGWIN but the workaround is\nprobably needed on Cygwin too. Same for MSYS and MSYS2.\n\nThe workaround must not be used with Clang that is acting in\nMSVC mode. This fixes it by checking for the known environments\nthat need the workaround instead of using \"NOT MSVC\".\n\nThanks to Martin Storsjö.\nhttps://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b"},{"sha":"5c4bca521e6fb435898a0012b3276eee70a6dadf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5c4bca521e6fb435898a0012b3276eee70a6dadf"},{"sha":"349050c68943d6f8e70e22c7a17dda83edbc3e0d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: If using a GCC compatible compiler, ensure that -Werror works.\n\nThe check can be skipped by passing SKIP_WERROR_CHECK=yes to configure.\nIt won't be documented anywhere else than in the error message.\n\nWays to test:\n\n    ./configure CC=gcc CFLAGS=-Wunused-macros\n    ./configure CC=clang CFLAGS=-Weverything\n    ./configure CC=clang CFLAGS=-Weverything SKIP_WERROR_CHECK=yes","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/349050c68943d6f8e70e22c7a17dda83edbc3e0d"},{"sha":"266b40e4e451992ca9d6c14efffe80f159d06656","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Remove the FIXME about -Werror checks.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/266b40e4e451992ca9d6c14efffe80f159d06656"},{"sha":"b3d69f3501169213b8aab668a04bef40acfa56b2","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Fix silently-ignored attribute problem on CompCert 3.12.\n\nTested on godbolt.org only.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b3d69f3501169213b8aab668a04bef40acfa56b2"}]},"public":true,"created_at":"2023-10-11T16:16:26Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32488513868","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15381001624,"size":12,"distinct_size":6,"ref":"refs/heads/clock_gettime","head":"e3b2cbbe2ae9b2f696a8e826432f02eb1caac88e","before":"6bcd7ba9fa352036dafa2720883214dad3f9b059","commits":[{"sha":"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Fix Windows build with Clang/LLVM 17.\n\nllvm-windres 17.0.0 has more accurate emulation of GNU windres, so\nthe hack for GNU windres must now be used with llvm-windres too.\n\nLLVM 16.0.6 has the old behavior and there likely won't be more\n16.x releases. So we can simply check for >= 17.0.0.\n\nSee also:\nhttps://github.com/llvm/llvm-project/commit/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/0570308ddd9c0e39e85597ebc0e31d4fc81d436f"},{"sha":"506d03127a8565442b028ec991e1578124fd3025","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Specify LINKER_LANGUAGE for libgnu target to fix Ninja Generator.\n\nCMake is unable to guess the linker language for just a header file so\nit must be explicitly set.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/506d03127a8565442b028ec991e1578124fd3025"},{"sha":"30d0c35327f3639cb11224872aa58fdbf0b1526e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Rename xz and man page symlink custom targets.\n\nThe Ninja Generator for CMake cannot have a custom target and its\nBYPRODUCTS have the same name. This has prevented Ninja builds on\nUnix-like systems since the xz symlinks were introduced in\n80a1a8bb838842a2be343bd88ad1462c21c5e2c9.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/30d0c35327f3639cb11224872aa58fdbf0b1526e"},{"sha":"01e34aa1171b04f8b28960b1cc6135a903e0c13d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Disable CLANG64 MSYS2 environment until bug is resolved.\n\nlld 17.0.1 searches for libraries to link first in the toolchain\ndirectories before the local directory when building. The is a problem\nfor us because liblzma.a is installed in MSYS2 CLANG64 by default and\nxz.exe will thus use the installed library instead of the one being\nbuilt.\n\nThis causes tests to fail when they are expecting features to be\ndisabled. More importantly, it will compile xz.exe with an incorrect\nliblzma and could cause unexpected behavior by being unable to update\nliblzma code in static builds. The CLANG64 environment can be tested\nagain once this is fixed.\n\nLink to bug: https://github.com/llvm/llvm-project/issues/67779.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/01e34aa1171b04f8b28960b1cc6135a903e0c13d"},{"sha":"d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix when the windres workaround is applied.\n\nCMake doesn't set WIN32 on CYGWIN but the workaround is\nprobably needed on Cygwin too. Same for MSYS and MSYS2.\n\nThe workaround must not be used with Clang that is acting in\nMSVC mode. This fixes it by checking for the known environments\nthat need the workaround instead of using \"NOT MSVC\".\n\nThanks to Martin Storsjö.\nhttps://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b"},{"sha":"5c4bca521e6fb435898a0012b3276eee70a6dadf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5c4bca521e6fb435898a0012b3276eee70a6dadf"},{"sha":"e6b3451a35d98159a1feaa82238f91e2186c907f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Use GetTickCount64() with MinGW-w64 if using Vista threads.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e6b3451a35d98159a1feaa82238f91e2186c907f"},{"sha":"6ea0cc6e36a7953907c2222038538cd4a9d51ec0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Ensure that clock_gettime() isn't used with MinGW-w64.\n\nThis commit alone doesn't change anything in the real-world:\n\n  - configure.ac currently checks for clock_gettime() only\n    when using pthreads.\n\n  - CMakeLists.txt doesn't check for clock_gettime() on Windows.\n\nSo clock_gettime() wasn't used with MinGW-w64 before either.\n\nclock_gettime() provides monotonic time and it's better than\ngettimeofday() in this sense. But clock_gettime() is defined\nin winpthreads, and liblzma or xz needs nothing else from\nwinpthreads. By avoiding clock_gettime(), we avoid the dependency on\nlibwinpthread-1.dll or the need to link against the static version.\n\nAs a bonus, GetTickCount64() and MinGW-w64's gettimeofday() can be\nfaster than clock_gettime(CLOCK_MONOTONIC, &tv). The resolution\nis more than good enough for the progress indicator in xz.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6ea0cc6e36a7953907c2222038538cd4a9d51ec0"},{"sha":"10d1e2f039a2334db984aa03287267d105dc4549","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Check for clock_gettime() even if not using POSIX threads.\n\nSee the new comment in the code.\n\nThis also makes the check for clock_gettime() run with MinGW-w64\nwith which we don't want to use clock_gettime(). The previous\ncommit already took care of this situation.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/10d1e2f039a2334db984aa03287267d105dc4549"},{"sha":"797b78440fa751d44157a5cef67f60a045a21738","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Check for clock_gettime() even on Windows.\n\nThis mirrors configure.ac although currently MinGW-w64 builds\ndon't use clock_gettime() even if it is found.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/797b78440fa751d44157a5cef67f60a045a21738"},{"sha":"d0113550e6eeaea346e0a57af29339cf645bec5c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"mythread.h: Make MYTHREAD_POSIX compatible with MinGW-w64's winpthreads.\n\nThis might be almost useless but it doesn't need much extra code either.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d0113550e6eeaea346e0a57af29339cf645bec5c"},{"sha":"e3b2cbbe2ae9b2f696a8e826432f02eb1caac88e","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Allow clock_gettime with POSIX threads.\n\nIf winpthreads are used for threading, it's OK to use clock_gettime()\nfrom winpthreads too.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e3b2cbbe2ae9b2f696a8e826432f02eb1caac88e"}]},"public":true,"created_at":"2023-10-11T16:17:11Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32488533199","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15381010684,"size":8,"distinct_size":2,"ref":"refs/heads/tuklib_integer_memcpy","head":"6ba9f134187699eec6b84a387f87b1a5c9f10fd0","before":"dd0804b25915b6b20284b6db889c313bc2e947c3","commits":[{"sha":"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Fix Windows build with Clang/LLVM 17.\n\nllvm-windres 17.0.0 has more accurate emulation of GNU windres, so\nthe hack for GNU windres must now be used with llvm-windres too.\n\nLLVM 16.0.6 has the old behavior and there likely won't be more\n16.x releases. So we can simply check for >= 17.0.0.\n\nSee also:\nhttps://github.com/llvm/llvm-project/commit/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/0570308ddd9c0e39e85597ebc0e31d4fc81d436f"},{"sha":"506d03127a8565442b028ec991e1578124fd3025","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Specify LINKER_LANGUAGE for libgnu target to fix Ninja Generator.\n\nCMake is unable to guess the linker language for just a header file so\nit must be explicitly set.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/506d03127a8565442b028ec991e1578124fd3025"},{"sha":"30d0c35327f3639cb11224872aa58fdbf0b1526e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Rename xz and man page symlink custom targets.\n\nThe Ninja Generator for CMake cannot have a custom target and its\nBYPRODUCTS have the same name. This has prevented Ninja builds on\nUnix-like systems since the xz symlinks were introduced in\n80a1a8bb838842a2be343bd88ad1462c21c5e2c9.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/30d0c35327f3639cb11224872aa58fdbf0b1526e"},{"sha":"01e34aa1171b04f8b28960b1cc6135a903e0c13d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Disable CLANG64 MSYS2 environment until bug is resolved.\n\nlld 17.0.1 searches for libraries to link first in the toolchain\ndirectories before the local directory when building. The is a problem\nfor us because liblzma.a is installed in MSYS2 CLANG64 by default and\nxz.exe will thus use the installed library instead of the one being\nbuilt.\n\nThis causes tests to fail when they are expecting features to be\ndisabled. More importantly, it will compile xz.exe with an incorrect\nliblzma and could cause unexpected behavior by being unable to update\nliblzma code in static builds. The CLANG64 environment can be tested\nagain once this is fixed.\n\nLink to bug: https://github.com/llvm/llvm-project/issues/67779.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/01e34aa1171b04f8b28960b1cc6135a903e0c13d"},{"sha":"d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix when the windres workaround is applied.\n\nCMake doesn't set WIN32 on CYGWIN but the workaround is\nprobably needed on Cygwin too. Same for MSYS and MSYS2.\n\nThe workaround must not be used with Clang that is acting in\nMSVC mode. This fixes it by checking for the known environments\nthat need the workaround instead of using \"NOT MSVC\".\n\nThanks to Martin Storsjö.\nhttps://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b"},{"sha":"5c4bca521e6fb435898a0012b3276eee70a6dadf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5c4bca521e6fb435898a0012b3276eee70a6dadf"},{"sha":"7eac778b878b390bd31ed8033f60d7475bd0942a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer: Revise unaligned reads and writes on strict-align archs.\n\nIn XZ Utils context this doesn't matter much because\nunaligned reads and writes aren't used in hot code\nwhen TUKLIB_FAST_UNALIGNED_ACCESS isn't #defined.\n\nThis also adds the missing write64be and write64le.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/7eac778b878b390bd31ed8033f60d7475bd0942a"},{"sha":"6ba9f134187699eec6b84a387f87b1a5c9f10fd0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Enabled unaligned access by default on PowerPC64LE and some RISC-V.\n\nPowerPC64LE wasn't tested but it seems like a safe change.\nPOWER8 supports unaligned access in little endian mode. Testing\non godbolt.org shows that GCC uses unaligned access by default.\n\nThe RISC-V macro __riscv_misaligned_fast is very new and not\nin any stable compiler release yet.\n\nDocumentation in INSTALL was updated to match.\n\nDocumentation about an autodetection bug when using ARM64 GCC\nwith -mstrict-align was added to INSTALL.\n\nCMake files weren't updated yet.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6ba9f134187699eec6b84a387f87b1a5c9f10fd0"}]},"public":true,"created_at":"2023-10-11T16:17:55Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
