{"id":"34749295062","type":"IssueCommentEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/77","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/events","html_url":"https://github.com/tukaani-project/xz/pull/77","id":2071987912,"node_id":"PR_kwDOIQBEvs5jjrrh","number":77,"title":"Speed up CRC32 calculation on ARM64","user":{"login":"parheliamm","id":3759678,"node_id":"MDQ6VXNlcjM3NTk2Nzg=","avatar_url":"https://avatars.githubusercontent.com/u/3759678?v=4","gravatar_id":"","url":"https://api.github.com/users/parheliamm","html_url":"https://github.com/parheliamm","followers_url":"https://api.github.com/users/parheliamm/followers","following_url":"https://api.github.com/users/parheliamm/following{/other_user}","gists_url":"https://api.github.com/users/parheliamm/gists{/gist_id}","starred_url":"https://api.github.com/users/parheliamm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/parheliamm/subscriptions","organizations_url":"https://api.github.com/users/parheliamm/orgs","repos_url":"https://api.github.com/users/parheliamm/repos","events_url":"https://api.github.com/users/parheliamm/events{/privacy}","received_events_url":"https://api.github.com/users/parheliamm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2024-01-09T09:38:00Z","updated_at":"2024-01-11T14:05:33Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/77","html_url":"https://github.com/tukaani-project/xz/pull/77","diff_url":"https://github.com/tukaani-project/xz/pull/77.diff","patch_url":"https://github.com/tukaani-project/xz/pull/77.patch","merged_at":null},"body":"The CRC32 instructions in ARM64 can calculate the CRC32 result for 8 bytes in a single operation, making the use of ARM64 instructions much faster compared to the general CRC32 algorithm.\r\n\r\nOptimized CRC32 will be enabled if ARM64 has CRC extension running on Linux.\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [x] Build was run locally and without warnings or errors\r\n- [ ] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\n<!-- Please try to limit your pull request to one type, submit multiple\r\npull requests if needed. --> \r\n\r\nPlease check the type of change your PR introduces:\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other (please describe): \r\n\r\n\r\n## What is the current behavior?\r\n\r\n<!-- Please describe the current behavior that you are modifying. -->\r\n\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: \r\n\r\n\r\n## What is the new behavior?\r\n\r\n<!-- Please describe the behavior or changes that are being added by this\r\nPR. -->\r\n\r\n- Enable optimized CRC32 algorithm if ARM64 support CRC extension.\r\n  -\r\n  -\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n<!-- If this introduces a breaking change, please describe the impact and\r\nmigration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nBenchmark data will be updated soon","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/77/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1887228657","html_url":"https://github.com/tukaani-project/xz/pull/77#issuecomment-1887228657","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/77","id":1887228657,"node_id":"IC_kwDOIQBEvs5wfNLx","user":{"login":"JiaT75","id":78042786,"node_id":"MDQ6VXNlcjc4MDQyNzg2","avatar_url":"https://avatars.githubusercontent.com/u/78042786?v=4","gravatar_id":"","url":"https://api.github.com/users/JiaT75","html_url":"https://github.com/JiaT75","followers_url":"https://api.github.com/users/JiaT75/followers","following_url":"https://api.github.com/users/JiaT75/following{/other_user}","gists_url":"https://api.github.com/users/JiaT75/gists{/gist_id}","starred_url":"https://api.github.com/users/JiaT75/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JiaT75/subscriptions","organizations_url":"https://api.github.com/users/JiaT75/orgs","repos_url":"https://api.github.com/users/JiaT75/repos","events_url":"https://api.github.com/users/JiaT75/events{/privacy}","received_events_url":"https://api.github.com/users/JiaT75/received_events","type":"User","site_admin":false},"created_at":"2024-01-11T14:05:31Z","updated_at":"2024-01-11T14:05:31Z","author_association":"MEMBER","body":"@hansjans162 Thanks for continuing your work on ARM64 CLMUL! Your benchmarks so far sound promising and will likely be a great value to liblzma. We look forward to seeing the code and further benchmarks when they are ready :)\r\n\r\nIt sounds like runtime checks will be needed, but please let us know if anyone finds reasons to contradict this.\r\n\r\nWe did a refactor to the existing CRC related files for code organization and small optimization related reasons. This change means that architecture specific CRC optimizations should go into header files that are included in the corresponding crc32/64_fast.c file. The reasons for this are best explained in the commit message [here](https://github.com/tukaani-project/xz/commit/419f55f9dfc2df8792902b8953d50690121afeea).\r\n\r\nBased on the refactor, @parheliamm, please put your changes into `crc32_arm64.h`, then include that header file in `crc32_fast.c`. \r\n\r\nSimilarly, Hans please refactor what you have to create `crc64_arm64.h` with your CRC64 CLMUL work (and include this file in `crc64_fast.c`). You are likely still blocked until this PR is complete since the build changes and runtime checks should be coordinated between the branches. Feel free to send us a link to your branch whenever you have something ready that you want to show us :)\r\n\r\nWe apologize for the refactor after this was already submitted, but this PR helped inform that refactor (and gave us the needed motivation to close out the branch). Thank you everyone so far for you patience and your contributions so far!\r\n\r\n","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1887228657/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-11T14:05:33Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"34749972939","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/77","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/events","html_url":"https://github.com/tukaani-project/xz/pull/77","id":2071987912,"node_id":"PR_kwDOIQBEvs5jjrrh","number":77,"title":"Speed up CRC32 calculation on ARM64","user":{"login":"parheliamm","id":3759678,"node_id":"MDQ6VXNlcjM3NTk2Nzg=","avatar_url":"https://avatars.githubusercontent.com/u/3759678?v=4","gravatar_id":"","url":"https://api.github.com/users/parheliamm","html_url":"https://github.com/parheliamm","followers_url":"https://api.github.com/users/parheliamm/followers","following_url":"https://api.github.com/users/parheliamm/following{/other_user}","gists_url":"https://api.github.com/users/parheliamm/gists{/gist_id}","starred_url":"https://api.github.com/users/parheliamm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/parheliamm/subscriptions","organizations_url":"https://api.github.com/users/parheliamm/orgs","repos_url":"https://api.github.com/users/parheliamm/repos","events_url":"https://api.github.com/users/parheliamm/events{/privacy}","received_events_url":"https://api.github.com/users/parheliamm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2024-01-09T09:38:00Z","updated_at":"2024-01-11T14:25:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/77","html_url":"https://github.com/tukaani-project/xz/pull/77","diff_url":"https://github.com/tukaani-project/xz/pull/77.diff","patch_url":"https://github.com/tukaani-project/xz/pull/77.patch","merged_at":null},"body":"The CRC32 instructions in ARM64 can calculate the CRC32 result for 8 bytes in a single operation, making the use of ARM64 instructions much faster compared to the general CRC32 algorithm.\r\n\r\nOptimized CRC32 will be enabled if ARM64 has CRC extension running on Linux.\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [x] Build was run locally and without warnings or errors\r\n- [ ] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\n<!-- Please try to limit your pull request to one type, submit multiple\r\npull requests if needed. --> \r\n\r\nPlease check the type of change your PR introduces:\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other (please describe): \r\n\r\n\r\n## What is the current behavior?\r\n\r\n<!-- Please describe the current behavior that you are modifying. -->\r\n\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: \r\n\r\n\r\n## What is the new behavior?\r\n\r\n<!-- Please describe the behavior or changes that are being added by this\r\nPR. -->\r\n\r\n- Enable optimized CRC32 algorithm if ARM64 support CRC extension.\r\n  -\r\n  -\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n<!-- If this introduces a breaking change, please describe the impact and\r\nmigration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nBenchmark data will be updated soon","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/77/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/77/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1887297605","html_url":"https://github.com/tukaani-project/xz/pull/77#issuecomment-1887297605","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/77","id":1887297605,"node_id":"IC_kwDOIQBEvs5wfeBF","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2024-01-11T14:25:38Z","updated_at":"2024-01-11T14:25:38Z","author_association":"MEMBER","body":"@parheliamm:\r\n> Unaligned memory access is a default feature by ARM64, so there is no need to consider align it first.\r\n\r\nI would expect aligned access to be faster still. In general, when unaligned access is fast on some hardware, it's fast in context of other methods for unaligned access. That is, it's much faster than doing byte-by-byte access. When the access crosses cache line or page boundaries, it may have penalties that don't occur with aligned access.\r\n\r\nYou could test with something like `uint64_t buf[2048]` and then comparing speeds of `lzma_crc32(buf, sizeof(buf) - 1, 0)` and `lzma_crc32(buf + 1, sizeof(buf) - 1, 0)`. If there is no difference then it's great news.\r\n\r\n> I don't have big-endian test environments, so I cannot predict the behavior and unit test on big-endian.\r\n> I think support little-endian-only is a good idea. I will modify the code.\r\n\r\nLinux has [CRC32 assembly](https://github.com/torvalds/linux/blob/master/arch/arm64/lib/crc32.S) for both endiannesses. Maybe it can help in learning what extra steps are needed for big endian support. Having said that, little-endian-only version is fine for now, especially since it sounds that no one can test the big endian code anyway.\r\n","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1887297605/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-11T14:25:40Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
