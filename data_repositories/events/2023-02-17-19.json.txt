{"id":"27170554430","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":12660814947,"size":2,"distinct_size":2,"ref":"refs/heads/master","head":"b9f171dd00a3cc32b6d41ea8e082cf545640ec2a","before":"d831072cceca458d94d2d5da201862f6d43a417b","commits":[{"sha":"2ee86d20e49985b903b78ebcfa3fa672e73e93aa","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Use only the generic symbol versioning on MicroBlaze.\n\nOn MicroBlaze, GCC 12 is broken in sense that\n__has_attribute(__symver__) returns true but it still doesn't\nsupport the __symver__ attribute even though the platform is ELF\nand symbol versioning is supported if using the traditional\n__asm__(\".symver ...\") method. Avoiding the traditional method is\ngood because it breaks LTO (-flto) builds with GCC.\n\nSee also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101766\n\nFor now the only extra symbols in liblzma_linux.map are the\ncompatibility symbols with the patch that spread from RHEL/CentOS 7.\nThese require the use of __symver__ attribute or __asm__(\".symver ...\")\nin the C code. Compatibility with the patch from CentOS 7 doesn't\nseem valuable on MicroBlaze so use liblzma_generic.map on MicroBlaze\ninstead. It doesn't require anything special in the C code and thus\nno LTO issues either.\n\nAn alternative would be to detect support for __symver__\nattribute in configure.ac and CMakeLists.txt and fall back\nto __asm__(\".symver ...\") but then LTO would be silently broken\non MicroBlaze. It sounds likely that MicroBlaze is a special\ncase so let's treat it as a such because that is simpler. If\na similar issue exists on some other platform too then hopefully\nsomeone will report it and this can be reconsidered.\n\n(This doesn't do the same fix in CMakeLists.txt. Perhaps it should\nbut perhaps CMake build of liblzma doesn't matter much on MicroBlaze.\nThe problem breaks the build so it's easy to notice and can be fixed\nlater.)\n\nThanks to Vincent Fazio for reporting the problem and proposing\na patch (in the end that solution wasn't used):\nhttps://github.com/tukaani-project/xz/pull/32","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2ee86d20e49985b903b78ebcfa3fa672e73e93aa"},{"sha":"b9f171dd00a3cc32b6d41ea8e082cf545640ec2a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b9f171dd00a3cc32b6d41ea8e082cf545640ec2a"}]},"public":true,"created_at":"2023-02-17T19:00:18Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"27170564586","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/32","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/32/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/32/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/32/events","html_url":"https://github.com/tukaani-project/xz/pull/32","id":1574672110,"node_id":"PR_kwDOIQBEvs5Jcyc6","number":32,"title":"Detect symver attribute support","user":{"login":"vfazio","id":5265893,"node_id":"MDQ6VXNlcjUyNjU4OTM=","avatar_url":"https://avatars.githubusercontent.com/u/5265893?v=4","gravatar_id":"","url":"https://api.github.com/users/vfazio","html_url":"https://github.com/vfazio","followers_url":"https://api.github.com/users/vfazio/followers","following_url":"https://api.github.com/users/vfazio/following{/other_user}","gists_url":"https://api.github.com/users/vfazio/gists{/gist_id}","starred_url":"https://api.github.com/users/vfazio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vfazio/subscriptions","organizations_url":"https://api.github.com/users/vfazio/orgs","repos_url":"https://api.github.com/users/vfazio/repos","events_url":"https://api.github.com/users/vfazio/events{/privacy}","received_events_url":"https://api.github.com/users/vfazio/received_events","type":"User","site_admin":false},"labels":[{"id":4687621022,"node_id":"LA_kwDOIQBEvs8AAAABF2drng","url":"https://api.github.com/repos/tukaani-project/xz/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":5016626567,"node_id":"LA_kwDOIQBEvs8AAAABKwOlhw","url":"https://api.github.com/repos/tukaani-project/xz/labels/5.4.2","name":"5.4.2","color":"006b75","default":false,"description":"Item earmarked for 5.4.2 release"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-02-07T16:47:02Z","updated_at":"2023-02-17T19:00:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/32","html_url":"https://github.com/tukaani-project/xz/pull/32","diff_url":"https://github.com/tukaani-project/xz/pull/32.diff","patch_url":"https://github.com/tukaani-project/xz/pull/32.patch","merged_at":null},"body":"On Microblaze builds will fail when trying to add symver information because  `__attribute__((symver ..))` is not supported even though `__has_attribute(__symver__)` returns true.\r\n\r\nSupport for symver needs to be detected via a compile test since `__has_attribute` can report false positives [0].\r\n\r\nAdd a configure compile check for `__attribute__((symver ..))` to ensure it is supported and define a variable to advertise support.\r\n\r\n[0] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101766#c1\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [ ] Build was run locally and without warnings or errors\r\n- [ ] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\n<!-- Please try to limit your pull request to one type, submit multiple\r\npull requests if needed. --> \r\n\r\nPlease check the type of change your PR introduces:\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other (please describe): \r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying. -->\r\nbuilds targeting the microblaze fail\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: \r\n\r\n\r\n## What is the new behavior?\r\n<!-- Please describe the behavior or changes that are being added by this\r\nPR. -->\r\n\r\n- Builds now succeed\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n<!-- If this introduces a breaking change, please describe the impact and\r\nmigration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nI tested compiles via GCC 12 and 9 for x86_64 and microblaze targets and didn't encounter issues.\r\n\r\n<!-- Any other information that is important to this PR. -->","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/32/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/32/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1435105806","html_url":"https://github.com/tukaani-project/xz/pull/32#issuecomment-1435105806","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/32","id":1435105806,"node_id":"IC_kwDOIQBEvs5VifoO","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2023-02-17T19:00:48Z","updated_at":"2023-02-17T19:00:48Z","author_association":"MEMBER","body":"> ```\r\n> vfazio@vfazio2 ~/development/buildroot $ readelf -W --dyn-syms output/build/xz-5.2.10/src/liblzma/.libs/liblzma.so.5.2.10 | grep lzma_stream_encoder_mt_memusage\r\n>    121: 0000f11c   676 FUNC    GLOBAL DEFAULT   12 lzma_stream_encoder_mt_memusage@@XZ_5.2\r\n>    122: 0000f11c   676 FUNC    GLOBAL DEFAULT   12 lzma_stream_encoder_mt_memusage@XZ_5.1.2alpha\r\n>    123: 0000f11c   676 FUNC    GLOBAL DEFAULT   12 lzma_stream_encoder_mt_memusage@XZ_5.2.2\r\n> ```\r\n\r\nThanks! So it's a normal ELF target that supports symbol versioning. It's just the `__symver__` attribute that is broken in GCC on MicroBlaze.\r\n\r\nThere are two possible solutions:\r\n\r\n1. Use the old `asm(\".symver ...\")` method on MicroBlaze (and possible other platforms that don't support `__symver__` attribute).\r\n  - With this method LTO (`-flto`) will be silently broken on MicroBlaze.\r\n  - This requires a test in configure.ac and CMakeLists.txt.\r\n2. Only use simple/basic/generic symbol versioning on MicroBlaze.\r\n  - Before the compatibility symbols for the patch from RHEL/CentOS 7 were added, this was the only method. The patch had spread outside CentOS 7 but even then I guess these symbols probably aren't useful on MicroBlaze and omitting them should do no harm.\r\n  - This is simpler than the option 1 above. It sounds likely that MicroBlaze is a special case (GCC issue) so adding a special case for MicroBlaze in configure.ac is OK.\r\n  - This way there is no risk of silent LTO breakage with GCC >= 10 since no test for the `__symver__` attribute is needed in configure.ac or CMakeLists.txt.\r\n\r\nI committed a fix using the second method. I didn't do it for CMake-based build but I guess building liblzma with CMake on MicroBlaze isn't so important.\r\n\r\n> The patch was largely based on how the check has been adapted other places: [libfuse/libfuse@3aba09a](https://github.com/libfuse/libfuse/commit/3aba09a5c56e017746c5c1652dbc845f4db7374a)\r\n> \r\n> https://gitlab.com/cryptsetup/cryptsetup/-/merge_requests/275/diffs?commit_id=5f71b3d63181aa88a68f7f71eab8801f2d8d2cde\r\n> \r\n> https://github.com/smuellerDD/libkcapi/blob/master/m4/ac_check_attribute_symver.m4\r\n\r\nMy Meson skills are non-existent for now so I don't know if the method in libfuse is correct. If user-supplied `CFLAGS` don't affect the test then it probably is good.\r\n\r\nThe other two first declare the function and then define it so they work even with `-Wmissing-prototypes` or `-Wmissing-declarations`. The test in this XZ Utils PR missed the declaration and thus it was more fragile (wrong test result and thus broken LTO if `configure` is run with `CFLAGS=-Wmissing-declarations`).\r\n\r\nIn case Clang some day happened to support the attribute then being future-compatible with `clang -Weverything` would matter too. It gives warnings from what `AC_LANG_SOURCE` outputs. This test doesn't need `AC_LANG_SOURCE` or `AC_LANG_PROGRAM` so a test like the following is enough:\r\n\r\n```\r\nAC_COMPILE_IFELSE([\r\n    void foo(void);\r\n    __attribute__((__symver__(\"foo@BAR_1.2\")))\r\n    void foo(void) { return; }\r\n], [\r\n    ...\r\n```\r\n\r\nA somewhat similar test is already used in XZ Utils for the `__constructor__` attribute. It uses a static function so it doesn't need a separate declaration.\r\n\r\nOf course there are multiple slightly different ways to write a working test. One just has to be really careful that the test program will never give a warning about an unrelated thing in the test program which would make the test fail when it shouldn't. Perhaps `-Werror=attributes` instead of `-Werror` would be more robust if the attribute is supported only by compilers that support `-Werror=attributes`. When testing for attributes that are supported by ancient GCC versions (like `__constructor__`) then this doesn't work as the ancient GCC versions don't support `-Werror=attributes`.\r\n\r\n> Again, i'm not totally convinced the gcc toolchain itself shouldn't be fixed to include `elfos.h` if it's generating ELF binaries.\r\n\r\nI have no idea, sorry.\r\n\r\nThanks!","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1435105806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-17T19:00:48Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
