<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recent posts to Open Discussion</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/</link><description>Recent posts to Open Discussion</description><language>en</language><lastBuildDate>Mon, 11 Sep 2023 15:03:25 -0000</lastBuildDate><atom:link href="https://sourceforge.net/p/lzmautils/discussion/708858/feed.rss" rel="self" type="application/rss+xml"></atom:link><item><title>An example of using the XZ library to create and read archives (just like in zlib). </title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/a4d03137b0/?limit=25#abf4</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;I see that you're working on using the XZ Utils library to create and read archives. That's a great project! I've also found it to be a bit difficult to understand the logic of the archiver at first, but it's definitely worth it in the end. By the way, I noticed that you mentioned Asphaltcalculators in your post. I'm not familiar with that project, but it sounds interesting. Can you tell me more about it?&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wiuadhu</dc:creator><pubDate>Mon, 11 Sep 2023 15:03:25 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net25a082cbb368d97ea26887a88acf383cde1c3542</guid></item><item><title>=?utf-8?B?eHotNS40LjA6IGx6bWFfc3RyZWFtX2RlY29kZXJfbXQgb21pdHRlZCBmcm9tIE1TVkMgYg==?=
	=?utf-8?B?dWlsZA==?=</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/c3a24e5045/?limit=25#f1c1</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;This discussion happened via email. This will be fixed in 5.4.1. Thanks!&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Wed, 11 Jan 2023 17:26:51 -0000</pubDate><guid isPermaLink="false">https://sourceforge.nete9759c4ee4ae28bb6fa87eb70ebe37a9edc153f4</guid></item><item><title>only decompress newer file</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/1453e5744e/?limit=25#408c</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;As of now, there is no such option to only overwrite the file based on a timestamp check. You can force overwrite as a work around with the -f , --force option to avoid throwing an error and aborting your script. This will not help with avoiding the extra time to extract your files. That would require an extra option that does not currently exist. If you have time and want to contribute this feature, it would be considered. Unfortunately, it is not a priority so I am not planning on working it anytime soon. I hope this helps!&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jia Tan</dc:creator><pubDate>Mon, 09 May 2022 12:59:17 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net7edd8095605ef8cd47e3e1507f3cb37b2d6eaa56</guid></item><item><title>only decompress newer file</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/1453e5744e/?limit=25#4ad7</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;no, not the date of the .xy file, but the date of the files being extracted compared to what might be on disk.&lt;/p&gt;
&lt;p&gt;I don't want this to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xz --keep --decompress 2022-04-04-raspios-bullseye-armhf-lite.img.xz&lt;br/&gt;
xz: 2022-04-04-raspios-bullseye-armhf-lite.img: File exists&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This throws an error, and aborts my script.&lt;/p&gt;
&lt;p&gt;also these are big files, so I would rather not take the time to extract just to find out I didn't need to. &lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">CarlFK</dc:creator><pubDate>Mon, 09 May 2022 02:39:05 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net1dbbbd36e4d5f01826be59a4826befdaaf3cffa1</guid></item><item><title>An example of using the XZ library to create and read archives (just like in zlib). </title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/a4d03137b0/?limit=25#424f</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Add function seek.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sergey Anisimov</dc:creator><pubDate>Wed, 20 Apr 2022 08:47:12 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net8d41772be3e714ea0fc62fe0101b2aa0b28dbe22</guid></item><item><title>An example of using the XZ library to create and read archives (just like in zlib). </title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/a4d03137b0/?limit=25#ba79</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;I made a small example of using the XZ Utils library to create and read archives (just like in zlib). It was quite difficult for me to understand the logic of the archiver using examples, so there may be errors. But on my data, this approach works well.&lt;br/&gt;
&lt;a href="https://github.com/magicwolf2019/XZ_FIle" rel="nofollow"&gt;https://github.com/magicwolf2019/XZ_FIle&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sergey Anisimov</dc:creator><pubDate>Mon, 24 Jan 2022 10:15:40 -0000</pubDate><guid isPermaLink="false">https://sourceforge.neta6db8dce8ca937fa7e0342fcd946257b287aa880</guid></item><item><title> ./configure support for Apple Silicon M1 chips (darwin-arm64)</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/978bf94bbc/?limit=25#2b63</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Thanks!  Mostly liblzma-native relies on prebuilds for all platforms, so building from source, while a fallback, is almost an error condition.  For this (fully automated) fallback I guess it makes sense to assume as little as possible about the build tools available, and autotools or cmake is a big ask vs just a C compiler.  Prebuilds for darwin-arm64 have been made, so I guess liblzma-native is happy and can wait until the next official release of XZ Utils that includes updated autotools files.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bjorn Stabell</dc:creator><pubDate>Wed, 12 Jan 2022 22:06:25 -0000</pubDate><guid isPermaLink="false">https://sourceforge.netc6ad2d6374267237bc153018f0587f2d760bc635</guid></item><item><title> ./configure support for Apple Silicon M1 chips (darwin-arm64)</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/978bf94bbc/?limit=25#e65f</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Hi! &lt;/p&gt;
&lt;p&gt;Thanks for including the patch. The patch you linked modifies the config.sub file, which is generally against best practices. The config.sub file is maintained and released by autotools. Using CMake may solve your issue, but it is somewhat experimental on non Windows MSVC for liblzma. The next alpha release should happen in February and it will have some patches to CMake. I don't believe the next release will have the config.sub patch you are proposing, especially if you can use autogen or CMake as work-arounds. &lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jia Tan</dc:creator><pubDate>Tue, 11 Jan 2022 13:55:38 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net44c526f8b9023b2445a2857cf96fb7fa29652b8c</guid></item><item><title>only decompress newer file</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/1453e5744e/?limit=25#8c07</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Hi! Just to clarify, are you looking for a command line option to check if the modification date / creation date on (filename).xz is newer than the modification date / creation date on (filename)? As of now, there is no such command line option to accomplish this, but it would be straightforward to wrap xz in a script to test for this.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jia Tan</dc:creator><pubDate>Tue, 11 Jan 2022 13:17:58 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net5b226b13c5d64a9d0d7da12b6c86239545bbac87</guid></item><item><title> ./configure support for Apple Silicon M1 chips (darwin-arm64)</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/978bf94bbc/?limit=25#175b</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;It's more than 2 years since 5.2.5 was released, and during this time there's a new architecture on the market!  Currently the &lt;code&gt;./configure&lt;/code&gt; in 5.2.5 fails if run on the new Apple M1 Macs (darwin-arm64) and require patching config.sub - see &lt;a href="https://github.com/addaleax/lzma-native/pull/123" rel="nofollow"&gt;https://github.com/addaleax/lzma-native/pull/123&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just re-running &lt;code&gt;./autogen.sh&lt;/code&gt; will create a working configure setup for M1 macs, but it requires a bigger build chain (with autoconf etc) that many people don't have.&lt;/p&gt;
&lt;p&gt;Would you consider releasing patch release (5.2.6?) with just updated configure scripts - or is 5.3 close to release?&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br/&gt;
Bjorn&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bjorn Stabell</dc:creator><pubDate>Mon, 10 Jan 2022 16:17:23 -0000</pubDate><guid isPermaLink="false">https://sourceforge.neta7c5fb45c8393d951adf6fed957e2137aabfab88</guid></item></channel></rss>