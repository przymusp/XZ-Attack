{"id":"30010097179","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":503096977,"name":"riscv/riscv-cfi","url":"https://api.github.com/repos/riscv/riscv-cfi"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113","repository_url":"https://api.github.com/repos/riscv/riscv-cfi","labels_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/labels{/name}","comments_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/comments","events_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/events","html_url":"https://github.com/riscv/riscv-cfi/issues/113","id":1750993037,"node_id":"I_kwDOHfymkc5oXgiN","number":113,"title":"Landing pad encoding update","user":{"login":"ved-rivos","id":91900059,"node_id":"U_kgDOBXpImw","avatar_url":"https://avatars.githubusercontent.com/u/91900059?v=4","gravatar_id":"","url":"https://api.github.com/users/ved-rivos","html_url":"https://github.com/ved-rivos","followers_url":"https://api.github.com/users/ved-rivos/followers","following_url":"https://api.github.com/users/ved-rivos/following{/other_user}","gists_url":"https://api.github.com/users/ved-rivos/gists{/gist_id}","starred_url":"https://api.github.com/users/ved-rivos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ved-rivos/subscriptions","organizations_url":"https://api.github.com/users/ved-rivos/orgs","repos_url":"https://api.github.com/users/ved-rivos/repos","events_url":"https://api.github.com/users/ved-rivos/events{/privacy}","received_events_url":"https://api.github.com/users/ved-rivos/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2023-06-10T14:32:24Z","updated_at":"2023-06-26T14:45:30Z","closed_at":"2023-06-17T15:58:31Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"Sharing an proposal for alternate encoding of landing pads from members of AR. The `lpcll` instruction to be renamed as `lpad` (landing pad) and the `lpcnl` removed. `lp` instruction embeds a 20-bit immediate as the label of the landing pad. This instruction would be encoded as `auipc` with `rd=0` - a code point that is presently a designated HINT.The encoding using the U-type hint provides a compact encoding for 20-bit labels. The indirect call/jump site would used `auipc x7, $label_imm` instruction to setup the expected landing pad label. The landing pad would be encoded as `lpad $label_imm`. \r\n","reactions":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/comments/1607641743","html_url":"https://github.com/riscv/riscv-cfi/issues/113#issuecomment-1607641743","issue_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113","id":1607641743,"node_id":"IC_kwDOHfymkc5f0qqP","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2023-06-26T14:45:30Z","updated_at":"2023-06-26T14:45:30Z","author_association":"NONE","body":"@ved-rivos:\r\n> The initial idea was to use the RVI/RVC hints for this extension but that was not considered acceptable by the architecture review committee as hint are not allowed to modify state which the sspush and sspopchk would do by updating the ssp.\r\n\r\nThank you! This was a detail that I hadn't understood. :-)\r\n\r\nI think it would be valuable if the spec had a sentence explaining it near \"The 32-bit instructions are encoded using the `SYSTEM` major opcode\". For example: \"RVI or RVC hints were not used for these instructions because they modify architecturally visible state, for example, `sspush` and `sspopchk` modify `ssp` whose value can be read with `ssprr`.\"\r\n\r\nSimilarly, cfi_forward.adoc could have something like: \"A hint instruction can be used as `lpad` because in any correctly-functioning program it is equivalent to a `nop`. The `ELP` state can only be observed if `lpad` raises an illegal-instruction exception.\"\r\n\r\nThat being said, @sorear explains it well why mixing shadow-stack-unaware code isn't guaranteed to work even with the current spec. In practice it often would but so it would with `sspush` and `sspopchk` being hints.\r\n\r\n@sorear:\r\n> > If some (or all) code is built with unlabeled landing pads, then accidental labeled landing pads are a problem if attacker can control both the value of x7 and the function pointer.\r\n>\r\n> I'm unsure if this should be part of the threat model.\r\n\r\nMaybe not. Building with unlabeled landing pads is inherently less strict than labeled anyway.\r\n\r\n> libQt5WebKit.so.5.212.0 [...] estimate 39941 functions and 156KiB for the landing pads themselves.\r\n\r\nFor rough comparison: Debian's equivalent x86-64 package has .text size of 30,834,702 bytes but doesn't use landing pads. On Arch Linux, qt5-webkit 5.212.0alpha4-18 has .text size of 31,637,939 bytes and 84,516 `endbr64` landing pads (338,064 bytes).\r\n\r\nThe Debian packages clang-tools-16 and llvm-16 contain a small amount (under 1 %) of `auipc` uses where the consuming instruction isn't immediately after `auipc` or there may be more than one consumer (like read-modify-write with single `auipc`). So it's like explicit relocs was the default. I wonder how common such code will be in the future, although I understood that with linker support for hazardous instructions it wouldn't be a significant problem. (Off-topic: Knowing this would be valuable to me since it affects handling of RISC-V executables in data compression. Fused `auipc` + `jalr`, `addi`, or I/Zfh/F/D/Q load/store pairs are simple to handle but if a significant amount (5-10 % or more) will be unfused in the future it may need to be taken into account.)\r\n\r\nI think I don't have the skills to comment these topics much more. I appreciate the considerate and educating replies from both of you, I have learned quite a few things. Thank you!\r\n","reactions":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/comments/1607641743/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-26T14:45:31Z","org":{"id":10872782,"login":"riscv","gravatar_id":"","url":"https://api.github.com/orgs/riscv","avatar_url":"https://avatars.githubusercontent.com/u/10872782?"}}
