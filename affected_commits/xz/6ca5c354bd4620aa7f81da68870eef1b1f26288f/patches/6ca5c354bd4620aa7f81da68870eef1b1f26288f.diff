commit 6ca5c354bd4620aa7f81da68870eef1b1f26288f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Oct 5 16:41:38 2022 +0800

    Tests: Fix compilation error when threading support has been disabled.
    
    Now tests that require threading are skipped when threading
    support has been disabled.
    
    Thanks to Sebastian Andrzej Siewior.

diff --git a/tests/test_check.c b/tests/test_check.c
index fa1326d1..e059130d 100644
--- a/tests/test_check.c
+++ b/tests/test_check.c
@@ -1,352 +1,356 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       test_check.c
 /// \brief      Tests integrity checks
 //
 //  Authors:    Lasse Collin
 //              Jia Tan
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "tests.h"
 
 
 // These must be specified as numbers so that the test works on EBCDIC
 // systems too.
 // static const uint8_t test_string[9] = "123456789";
 // static const uint8_t test_unaligned[12] = "xxx123456789";
 static const uint8_t test_string[9] = { 49, 50, 51, 52, 53, 54, 55, 56, 57 };
 static const uint8_t test_unaligned[12]
 		= { 120, 120, 120, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
 
 // 2 MB is more than enough for the tests. Actually a tiny value would
 // work because we don't actually decompress the files, we only test
 // decoding of the Stream Header fields.
 #define TEST_CHECK_MEMLIMIT (2U << 20)
 
 static size_t no_check_size;
 static uint8_t *no_check_xz_data;
 
 static size_t unsupported_check_size;
 static uint8_t *unsupported_check_xz_data;
 
 #ifdef HAVE_CHECK_CRC32
 static size_t crc32_size;
 static uint8_t *crc32_xz_data;
 #endif
 
 #ifdef HAVE_CHECK_CRC64
 static size_t crc64_size;
 static uint8_t *crc64_xz_data;
 #endif
 
 #ifdef HAVE_CHECK_SHA256
 static size_t sha256_size;
 static uint8_t *sha256_xz_data;
 #endif
 
 
 static void
 test_lzma_crc32(void)
 {
 	// CRC32 is always enabled.
 	assert_true(lzma_check_is_supported(LZMA_CHECK_CRC32));
 
 	const uint32_t test_vector = 0xCBF43926;
 
 	// Test 1
 	assert_uint_eq(lzma_crc32(test_string, sizeof(test_string), 0),
 			test_vector);
 
 	// Test 2
 	assert_uint_eq(lzma_crc32(test_unaligned + 3, sizeof(test_string), 0),
 			test_vector);
 
 	// Test 3
 	uint32_t crc = 0;
 	for (size_t i = 0; i < sizeof(test_string); ++i)
 		crc = lzma_crc32(test_string + i, 1, crc);
 	assert_uint_eq(crc, test_vector);
 }
 
 
 static void
 test_lzma_crc64(void)
 {
 	// CRC64 can be disabled.
 	if (!lzma_check_is_supported(LZMA_CHECK_CRC64))
 		assert_skip("CRC64 support is disabled");
 
 	// If CRC64 is disabled then lzma_crc64() will be missing.
 	// Using an ifdef here avoids a linker error.
 #ifdef HAVE_CHECK_CRC64
 	const uint64_t test_vector = 0x995DC9BBDF1939FA;
 
 	// Test 1
 	assert_uint_eq(lzma_crc64(test_string, sizeof(test_string), 0),
 			test_vector);
 
 	// Test 2
 	assert_uint_eq(lzma_crc64(test_unaligned + 3, sizeof(test_string), 0),
 			test_vector);
 
 	// Test 3
 	uint64_t crc = 0;
 	for (size_t i = 0; i < sizeof(test_string); ++i)
 		crc = lzma_crc64(test_string + i, 1, crc);
 	assert_uint_eq(crc, test_vector);
 #endif
 }
 
 
 static void
 test_lzma_supported_checks(void)
 {
 	static const int expected_check_ids[] = {
 		LZMA_CHECK_NONE,
 #ifdef HAVE_CHECK_CRC32
 		LZMA_CHECK_CRC32,
 #endif
 #ifdef HAVE_CHECK_CRC64
 		LZMA_CHECK_CRC64,
 #endif
 #ifdef HAVE_CHECK_SHA256
 		LZMA_CHECK_SHA256,
 #endif
 	};
 
 	for (int i = 0; i <= LZMA_CHECK_ID_MAX + 1; i++) {
 		bool matched = false;
 		for (unsigned int j = 0; j < ARRAY_SIZE(expected_check_ids);
 				j++) {
 			if (expected_check_ids[j] == i) {
 				matched = true;
 				break;
 			}
 		}
 
 		if (matched)
 			assert_true(lzma_check_is_supported(i));
 		else
 			assert_false(lzma_check_is_supported(i));
 	}
 }
 
 
 static void
 test_lzma_check_size(void)
 {
 	// Expected check sizes taken from src/liblzma/api/lzma/check.h
 	static const uint32_t expected_check_sizes[] = {
 			0, 4, 4, 4, 8, 8, 8, 16, 16, 16,
 			32, 32, 32, 64, 64, 64
 	};
 
 	for (unsigned int i = 0; i < ARRAY_SIZE(expected_check_sizes); i++)
 		assert_uint_eq(expected_check_sizes[i], lzma_check_size(i));
 
 	assert_uint_eq(lzma_check_size(LZMA_CHECK_ID_MAX + 1), UINT32_MAX);
 }
 
 
 // Test the single threaded decoder for lzma_get_check
 static void
 test_lzma_get_check_st(void)
 {
 	const uint32_t flags = LZMA_TELL_ANY_CHECK |
 			LZMA_TELL_UNSUPPORTED_CHECK |
 			LZMA_TELL_NO_CHECK;
 
 	uint8_t outbuf[128];
 	lzma_stream strm = LZMA_STREAM_INIT;
 
 	// Test a file with no integrity check:
 	assert_lzma_ret(lzma_stream_decoder(&strm, TEST_CHECK_MEMLIMIT,
 			flags), LZMA_OK);
 	strm.next_in = no_check_xz_data;
 	strm.avail_in = no_check_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_NO_CHECK);
 	assert_lzma_check(lzma_get_check(&strm), LZMA_CHECK_NONE);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 
 	// Test a file with an unsupported integrity check type:
 	assert_lzma_ret(lzma_stream_decoder(&strm, TEST_CHECK_MEMLIMIT,
 			flags), LZMA_OK);
 	strm.next_in = unsupported_check_xz_data;
 	strm.avail_in = unsupported_check_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_UNSUPPORTED_CHECK);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 
 	// Test a file with CRC32 as the integrity check:
 #ifdef HAVE_CHECK_CRC32
 	assert_lzma_ret(lzma_stream_decoder(&strm, TEST_CHECK_MEMLIMIT,
 			flags), LZMA_OK);
 	strm.next_in = crc32_xz_data;
 	strm.avail_in = crc32_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_GET_CHECK);
 	assert_lzma_check(lzma_get_check(&strm), LZMA_CHECK_CRC32);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 #endif
 
 	// Test a file with CRC64 as the integrity check:
 #ifdef HAVE_CHECK_CRC64
 	assert_lzma_ret(lzma_stream_decoder(&strm, TEST_CHECK_MEMLIMIT,
 			flags), LZMA_OK);
 	strm.next_in = crc64_xz_data;
 	strm.avail_in = crc64_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_GET_CHECK);
 	assert_lzma_check(lzma_get_check(&strm), LZMA_CHECK_CRC64);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 #endif
 
 	// Test a file with SHA-256 as the integrity check:
 #ifdef HAVE_CHECK_SHA256
 	assert_lzma_ret(lzma_stream_decoder(&strm, TEST_CHECK_MEMLIMIT,
 			flags), LZMA_OK);
 	strm.next_in = sha256_xz_data;
 	strm.avail_in = sha256_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_GET_CHECK);
 	assert_lzma_check(lzma_get_check(&strm), LZMA_CHECK_SHA256);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 #endif
 
 	lzma_end(&strm);
 }
 
 
 static void
 test_lzma_get_check_mt(void)
 {
+#ifndef MYTHREAD_ENABLED
+	assert_skip("Threading support disabed");
+#else
 	const uint32_t flags = LZMA_TELL_ANY_CHECK |
 			LZMA_TELL_UNSUPPORTED_CHECK |
 			LZMA_TELL_NO_CHECK;
 
 	const lzma_mt options = {
 		.flags = flags,
 		.threads = 2,
 		.timeout = 0,
 		.memlimit_threading = TEST_CHECK_MEMLIMIT,
 		.memlimit_stop = TEST_CHECK_MEMLIMIT
 	};
 
 	uint8_t outbuf[128];
 	lzma_stream strm = LZMA_STREAM_INIT;
 
 	// Test a file with no integrity check:
 	assert_lzma_ret(lzma_stream_decoder_mt(&strm, &options), LZMA_OK);
 	strm.next_in = no_check_xz_data;
 	strm.avail_in = no_check_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_NO_CHECK);
 	assert_lzma_check(lzma_get_check(&strm), LZMA_CHECK_NONE);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 
 	// Test a file with an unsupported integrity check type:
 	assert_lzma_ret(lzma_stream_decoder_mt(&strm, &options), LZMA_OK);
 	strm.next_in = unsupported_check_xz_data;
 	strm.avail_in = unsupported_check_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_UNSUPPORTED_CHECK);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 
 	// Test a file with CRC32 as the integrity check:
 #ifdef HAVE_CHECK_CRC32
 	assert_lzma_ret(lzma_stream_decoder_mt(&strm, &options), LZMA_OK);
 	strm.next_in = crc32_xz_data;
 	strm.avail_in = crc32_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_GET_CHECK);
 	assert_lzma_check(lzma_get_check(&strm), LZMA_CHECK_CRC32);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 #endif
 
 	// Test a file with CRC64 as the integrity check:
 #ifdef HAVE_CHECK_CRC64
 	assert_lzma_ret(lzma_stream_decoder_mt(&strm, &options), LZMA_OK);
 	strm.next_in = crc64_xz_data;
 	strm.avail_in = crc64_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_GET_CHECK);
 	assert_lzma_check(lzma_get_check(&strm), LZMA_CHECK_CRC64);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 #endif
 
 	// Test a file with SHA-256 as the integrity check:
 #ifdef HAVE_CHECK_SHA256
 	assert_lzma_ret(lzma_stream_decoder_mt(&strm,&options), LZMA_OK);
 	strm.next_in = sha256_xz_data;
 	strm.avail_in = sha256_size;
 	strm.next_out = outbuf;
 	strm.avail_out = sizeof(outbuf);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_GET_CHECK);
 	assert_lzma_check(lzma_get_check(&strm), LZMA_CHECK_SHA256);
 	assert_lzma_ret(lzma_code(&strm, LZMA_RUN), LZMA_STREAM_END);
 #endif
 
 	lzma_end(&strm);
+#endif
 }
 
 
 extern int
 main(int argc, char **argv)
 {
 	tuktest_start(argc, argv);
 
 	no_check_xz_data = tuktest_file_from_srcdir(
 			"files/good-1-check-none.xz", &no_check_size);
 
 	unsupported_check_xz_data = tuktest_file_from_srcdir(
 			"files/unsupported-check.xz",
 			&unsupported_check_size);
 
 #ifdef HAVE_CHECK_CRC32
 	crc32_xz_data = tuktest_file_from_srcdir(
 			"files/good-1-check-crc32.xz", &crc32_size);
 #endif
 
 #ifdef HAVE_CHECK_CRC64
 	crc64_xz_data = tuktest_file_from_srcdir(
 			"files/good-1-check-crc64.xz", &crc64_size);
 #endif
 
 #ifdef HAVE_CHECK_SHA256
 	sha256_xz_data = tuktest_file_from_srcdir(
 			"files/good-1-check-sha256.xz", &sha256_size);
 #endif
 
 	tuktest_run(test_lzma_crc32);
 	tuktest_run(test_lzma_crc64);
 	tuktest_run(test_lzma_supported_checks);
 	tuktest_run(test_lzma_check_size);
 	tuktest_run(test_lzma_get_check_st);
 	tuktest_run(test_lzma_get_check_mt);
 
 	return tuktest_end();
 }
diff --git a/tests/test_hardware.c b/tests/test_hardware.c
index 34d07892..17c51da2 100644
--- a/tests/test_hardware.c
+++ b/tests/test_hardware.c
@@ -1,45 +1,49 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       test_hardware.c
 /// \brief      Tests src/liblzma/api/lzma/hardware.h API functions
 ///
 /// Since the output values of these functions are hardware dependent, these
 /// tests are trivial. They are simply used to detect errors and machines
 /// that these function are not supported on.
 //
 //  Author:     Jia Tan
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "tests.h"
 
 
 static void
 test_lzma_physmem(void)
 {
 	// NOTE: Use _skip instead of _fail because 0 can also mean that we
 	// don't know how to get this information on this operating system.
 	if (lzma_physmem() == 0)
 		assert_skip("Could not determine amount of physical memory");
 }
 
 
 static void
 test_lzma_cputhreads(void)
 {
+#ifndef MYTHREAD_ENABLED
+	assert_skip("Threading support disabed");
+#else
 	if (lzma_cputhreads() == 0)
 		assert_skip("Could not determine cpu core count");
+#endif
 }
 
 
 extern int
 main(int argc, char **argv)
 {
 	tuktest_start(argc, argv);
 	tuktest_run(test_lzma_physmem);
 	tuktest_run(test_lzma_cputhreads);
 	return tuktest_end();
 }
diff --git a/tests/test_memlimit.c b/tests/test_memlimit.c
index 24b7f6e1..6e2e62e1 100644
--- a/tests/test_memlimit.c
+++ b/tests/test_memlimit.c
@@ -1,151 +1,155 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       test_memlimit.c
 /// \brief      Tests memory usage limit in decoders
 //
 //  Author:     Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "tests.h"
 
 
 #define MEMLIMIT_TOO_LOW 1234U
 #define MEMLIMIT_HIGH_ENOUGH (2U << 20)
 
 
 static uint8_t *in;
 static size_t in_size;
 static uint8_t out[8192];
 
 
 static void
 test_memlimit_stream_decoder(void)
 {
 	lzma_stream strm = LZMA_STREAM_INIT;
 	assert_lzma_ret(lzma_stream_decoder(&strm, MEMLIMIT_TOO_LOW, 0),
 			LZMA_OK);
 
 	strm.next_in = in;
 	strm.avail_in = in_size;
 	strm.next_out = out;
 	strm.avail_out = sizeof(out);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_MEMLIMIT_ERROR);
 
 	assert_uint_eq(lzma_memlimit_get(&strm), MEMLIMIT_TOO_LOW);
 	assert_lzma_ret(lzma_memlimit_set(&strm, MEMLIMIT_TOO_LOW + 1),
 			LZMA_MEMLIMIT_ERROR);
 	assert_lzma_ret(lzma_memlimit_set(&strm, MEMLIMIT_HIGH_ENOUGH),
 			LZMA_OK);
 
 	// This fails before commit 660739f99ab211edec4071de98889fb32ed04e98
 	// (liblzma <= 5.2.6, liblzma <= 5.3.3alpha). It was fixed in 5.2.7.
 	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
 
 	lzma_end(&strm);
 }
 
 
 static void
 test_memlimit_stream_decoder_mt(void)
 {
+#ifndef MYTHREAD_ENABLED
+	assert_skip("Threading support disabed");
+#else
 	lzma_stream strm = LZMA_STREAM_INIT;
 	lzma_mt mt = {
 		.flags = 0,
 		.threads = 1,
 		.timeout = 0,
 		.memlimit_threading = 0,
 		.memlimit_stop = MEMLIMIT_TOO_LOW,
 	};
 
 	assert_lzma_ret(lzma_stream_decoder_mt(&strm, &mt), LZMA_OK);
 
 	strm.next_in = in;
 	strm.avail_in = in_size;
 	strm.next_out = out;
 	strm.avail_out = sizeof(out);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_MEMLIMIT_ERROR);
 
 	assert_uint_eq(lzma_memlimit_get(&strm), MEMLIMIT_TOO_LOW);
 	assert_lzma_ret(lzma_memlimit_set(&strm, MEMLIMIT_TOO_LOW + 1),
 			LZMA_MEMLIMIT_ERROR);
 	assert_lzma_ret(lzma_memlimit_set(&strm, MEMLIMIT_HIGH_ENOUGH),
 			LZMA_OK);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
 	lzma_end(&strm);
+#endif
 }
 
 
 static void
 test_memlimit_alone_decoder(void)
 {
 	size_t alone_size;
 	uint8_t *alone_buf = tuktest_file_from_srcdir(
 			"files/good-unknown_size-with_eopm.lzma", &alone_size);
 
 	lzma_stream strm = LZMA_STREAM_INIT;
 	assert_lzma_ret(lzma_alone_decoder(&strm, MEMLIMIT_TOO_LOW), LZMA_OK);
 
 	strm.next_in = alone_buf;
 	strm.avail_in = alone_size;
 	strm.next_out = out;
 	strm.avail_out = sizeof(out);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_MEMLIMIT_ERROR);
 
 	assert_uint_eq(lzma_memlimit_get(&strm), MEMLIMIT_TOO_LOW);
 	assert_lzma_ret(lzma_memlimit_set(&strm, MEMLIMIT_TOO_LOW + 1),
 			LZMA_MEMLIMIT_ERROR);
 	assert_lzma_ret(lzma_memlimit_set(&strm, MEMLIMIT_HIGH_ENOUGH),
 			LZMA_OK);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
 	lzma_end(&strm);
 }
 
 
 static void
 test_memlimit_auto_decoder(void)
 {
 	lzma_stream strm = LZMA_STREAM_INIT;
 	assert_lzma_ret(lzma_auto_decoder(&strm, MEMLIMIT_TOO_LOW, 0),
 			LZMA_OK);
 
 	strm.next_in = in;
 	strm.avail_in = in_size;
 	strm.next_out = out;
 	strm.avail_out = sizeof(out);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_MEMLIMIT_ERROR);
 
 	assert_uint_eq(lzma_memlimit_get(&strm), MEMLIMIT_TOO_LOW);
 	assert_lzma_ret(lzma_memlimit_set(&strm, MEMLIMIT_TOO_LOW + 1),
 			LZMA_MEMLIMIT_ERROR);
 	assert_lzma_ret(lzma_memlimit_set(&strm, MEMLIMIT_HIGH_ENOUGH),
 			LZMA_OK);
 
 	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
 	lzma_end(&strm);
 }
 
 
 extern int
 main(int argc, char **argv)
 {
 	tuktest_start(argc, argv);
 
 	in = tuktest_file_from_srcdir("files/good-1-check-crc32.xz", &in_size);
 
 	tuktest_run(test_memlimit_stream_decoder);
 	tuktest_run(test_memlimit_stream_decoder_mt);
 	tuktest_run(test_memlimit_alone_decoder);
 	tuktest_run(test_memlimit_auto_decoder);
 
 	return tuktest_end();
 }