{"id":"35087016295","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":16777373296,"size":34,"distinct_size":4,"ref":"refs/heads/xz_logo_doxygen","head":"80cdf111258746b26c0b5810fc3d4057f9b21b37","before":"178a430ed9e817f3f0ac7129498f9a0cded3bd5f","commits":[{"sha":"0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: crc_clmul.c: Tidy up the location of MSVC pragma.\n\nIt makes no difference in practice.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae"},{"sha":"93d144f0930821590524247bd174afd38003d7f0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Add empty lines.\n\nAnd remove one too.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/93d144f0930821590524247bd174afd38003d7f0"},{"sha":"9523c1300d22fa715765c181cf991d14d6112fb1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define crc_attr_no_sanitize_address in crc_common.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/9523c1300d22fa715765c181cf991d14d6112fb1"},{"sha":"d164ac0e62904126f7920c25f9a2875c8cd28b97","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Simplify existing cases with lzma_attr_no_sanitize_address.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d164ac0e62904126f7920c25f9a2875c8cd28b97"},{"sha":"e3833e297dfb5021a197bda34ba2a795e30aaf8a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: crc_clmul.c: Add crc_attr_target macro.\n\nThis reduces the number of the complex #if directives.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e3833e297dfb5021a197bda34ba2a795e30aaf8a"},{"sha":"419f55f9dfc2df8792902b8953d50690121afeea","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Avoid extern lzma_crc32_clmul() and lzma_crc64_clmul().\n\nA CLMUL-only build will have the crcxx_clmul() inlined into\nlzma_crcxx(). Previously a jump to the extern lzma_crcxx_clmul()\nwas needed. Notes about shared liblzma on ELF platforms:\n\n  - On platforms that support ifunc and -fvisibility=hidden, this\n    was silly because CLMUL-only build would have that single extra\n    jump instruction of extra overhead.\n\n  - On platforms that support neither -fvisibility=hidden nor linker\n    version script (liblzma*.map), jumping to lzma_crcxx_clmul()\n    would go via PLT so a few more instructions of overhead (still\n    not a big issue but silly nevertheless).\n\nThere was a downside with static liblzma too: if an application only\nneeds lzma_crc64(), static linking would make the linker include the\nCLMUL code for both CRC32 and CRC64 from crc_x86_clmul.o even though\nthe CRC32 code wouldn't be needed, thus increasing code size of the\nexecutable (assuming that -ffunction-sections isn't used).\n\nAlso, now compilers are likely to inline crc_simd_body()\neven if they don't support the always_inline attribute\n(or MSVC's __forceinline). Quite possibly all compilers\nthat build the code do support such an attribute. But now\nit likely isn't a problem even if the attribute wasn't supported.\n\nNow all x86-specific stuff is in crc_x86_clmul.h. If other archs\nThe other archs can then have their own headers with their own\nis_clmul_supported() and crcxx_clmul().\n\nAnother bonus is that the build system doesn't need to care if\ncrc_clmul.c is needed.\n\nis_clmul_supported() stays as inline function as it's not needed\nwhen doing a CLMUL-only build (avoids a warning about unused function).","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/419f55f9dfc2df8792902b8953d50690121afeea"},{"sha":"3dbed75b0b9c7087c76fe687acb5cf582cd57b99","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix a comment in crc_common.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3dbed75b0b9c7087c76fe687acb5cf582cd57b99"},{"sha":"66f080e8016129576536482ac377e2ecac7a2b90","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Rename arch-specific CRC functions and macros.\n\nCRC_CLMUL was split to CRC_ARCH_OPTIMIZED and CRC_X86_CLMUL.\nCRC_ARCH_OPTIMIZED is defined when an arch-optimized version is used.\nCurrently the x86 CLMUL implementations are the only arch-optimized\nversions, and these also use the CRC_x86_CLMUL macro to tell when\ncrc_x86_clmul.h needs to be included.\n\nis_clmul_supported() was renamed to is_arch_extension_supported().\ncrc32_clmul() and crc64_clmul() were renamed to\ncrc32_arch_optimized() and crc64_arch_optimized().\nThis way the names make sense with arch-specific non-CLMUL\nimplementations as well.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/66f080e8016129576536482ac377e2ecac7a2b90"},{"sha":"35c03ec6bf66f1b159964c9721a2dce0e2859b20","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Update CLMUL comments to more generic wording.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/35c03ec6bf66f1b159964c9721a2dce0e2859b20"},{"sha":"4f518c1b6b7b7ce5dcefea81acd44d7a086a8882","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Remove crc_always_inline, use lzma_always_inline instead.\n\nNow crc_simd_body() in crc_x86_clmul.h is only called once\nin a translation unit, we no longer need to be so cautious\nabout ensuring the always-inline behavior.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/4f518c1b6b7b7ce5dcefea81acd44d7a086a8882"},{"sha":"fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Add a comment to crc_x86_clmul.h about BUILDING_ macros.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b"},{"sha":"c26812c5b2c8a2a47f43214afe6b0b840c73e4f5","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Update website URL.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c26812c5b2c8a2a47f43214afe6b0b840c73e4f5"},{"sha":"fce4758018f3a3589236f3fe7999fd9dd08c77e9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Docs: Update website URLs.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/fce4758018f3a3589236f3fe7999fd9dd08c77e9"},{"sha":"6b63c4c6139fa1bb21b570521d3d2b4a608bc34d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Update website URL.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6b63c4c6139fa1bb21b570521d3d2b4a608bc34d"},{"sha":"22d86192f8cf00902a1f90ee2a83ca600794459b","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Update website URLs in the man pages.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/22d86192f8cf00902a1f90ee2a83ca600794459b"},{"sha":"5540f4329bbdb4deb4850d4af48b18ad074bba19","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Docs: Update .xz file format specification to 1.2.0.\n\nThe new RISC-V filter was added to the specification, in addition to\nupdating the specification URL.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5540f4329bbdb4deb4850d4af48b18ad074bba19"},{"sha":"440a2eccb082dc13400c09e22308a58fef85146c","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Add RISC-V BCJ filter.\n\nThe new Filter ID is 0x0B.\n\nThanks to Chien Wong <m@xv97.com> for the initial version of the Filter,\nthe xz CLI updates, and the Autotools build system modifications.\n\nThanks to Igor Pavlov for his many contributions to the design of\nthe filter.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/440a2eccb082dc13400c09e22308a58fef85146c"},{"sha":"34372a5adbe5a7f6bf29498410ba3a463a720966","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Support RISC-V BCJ Filter for encoding and decoding.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/34372a5adbe5a7f6bf29498410ba3a463a720966"},{"sha":"2959dbc7358efcf421ce51bc9cd7eae8fdd8fec4","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Update string_conversion.c to support RISC-V Filter.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2959dbc7358efcf421ce51bc9cd7eae8fdd8fec4"},{"sha":"ac3691ccca051d67f60b4a3b05b88e511d0b1b28","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Tests: Add RISC-V Filter test in test_compress.sh.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/ac3691ccca051d67f60b4a3b05b88e511d0b1b28"}]},"public":true,"created_at":"2024-01-24T14:32:56Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"35087294178","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":16777505330,"size":91,"distinct_size":7,"ref":"refs/heads/w32_update","head":"2da94959e40635401d501d5ec8b91673ae9d8228","before":"c25f546f71a4041e8c187ad524308d70f67c8129","commits":[{"sha":"a2f5ca706acc6f7715b8d260a8c6ed50d7717478","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define lzma_attr_visibility_hidden in common.h.\n\nIn ELF shared libs:\n\n-fvisibility=hidden affects definitions of symbols but not\ndeclarations.[*] This doesn't affect direct calls to functions\ninside liblzma as a linker can replace a call to lzma_foo@plt\nwith a call directly to lzma_foo when -fvisibility=hidden is used.\n\n[*] It has to be like this because otherwise every installed\n    header file would need to explictly set the symbol visibility\n    to default.\n\nWhen accessing extern variables that aren't defined in the\nsame translation unit, compiler assumes that the variable has\nthe default visibility and thus indirection is needed. Unlike\nfunction calls, linker cannot optimize this.\n\nUsing __attribute__((__visibility__(\"hidden\"))) with the extern\nvariable declarations tells the compiler that indirection isn't\nneeded because the definition is in the same shared library.\n\nAbout 15+ years ago, someone told me that it would be good if\nthe CRC tables would be defined in the same translation unit\nas the C code of the CRC functions. While I understood that it\ncould help a tiny amount, I didn't want to change the code because\na separate translation unit for the CRC tables was needed for the\nx86 assembly code anyway. But when visibility attributes are\nsupported, simply marking the extern declaration with the\nhidden attribute will get identical result. When there are only\na few affected variables, this is trivial to do. I wish I had\nunderstood this back then already.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a2f5ca706acc6f7715b8d260a8c6ed50d7717478"},{"sha":"41113fe30a47f6fd3e30cb4494dd538e86212edf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use lzma_attr_visibility_hidden on private extern declarations.\n\nThese variables are internal to liblzma and not exposed in the API.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/41113fe30a47f6fd3e30cb4494dd538e86212edf"},{"sha":"dcfe5632992fb7f06f921da13fcdd84f83d0d285","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define lzma_always_inline in common.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/dcfe5632992fb7f06f921da13fcdd84f83d0d285"},{"sha":"e7a86b94cd247435ac96bc79ba528b690b9ca388","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use lzma_always_inline in memcmplen.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e7a86b94cd247435ac96bc79ba528b690b9ca388"},{"sha":"8c36ab79cbf23104ce7a3d533d5ac98cd492e57c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add a note why crc_always_inline exists for now.\n\nSolaris Studio is a possible example (not tested) which\nsupports the always_inline attribute but might not get\ndetected by the common.h #ifdefs.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8c36ab79cbf23104ce7a3d533d5ac98cd492e57c"},{"sha":"148e20607e95781558bdfc823ecba07b7af4b590","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Fix text wrapping in an output message.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/148e20607e95781558bdfc823ecba07b7af4b590"},{"sha":"46007049cd42e606543dbe650feb17bdf4469c29","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix compilation of fastpos_tablegen.c.\n\nThe macro lzma_attr_visibility_hidden has to be defined to make\nfastpos.h usable. The visibility attribute is irrelevant to\nfastpos_tablegen.c so simply #define the macro to an empty value.\n\nfastpos_tablegen.c is never built by the included build systems\nand so the problem wasn't noticed earlier. It's just a standalone\nprogram for generating fastpos_table.c.\n\nFixes: https://github.com/tukaani-project/xz/pull/69\nThanks to GitHub user Jamaika1.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/46007049cd42e606543dbe650feb17bdf4469c29"},{"sha":"5fe1450603dc625340b8b7866fb4a83ff748ad06","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Add NEWS for 5.4.5.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5fe1450603dc625340b8b7866fb4a83ff748ad06"},{"sha":"2ade7246e7ba729a91460d2fab0f4c7b89d3998b","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Add missing comments to lz_encoder.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2ade7246e7ba729a91460d2fab0f4c7b89d3998b"},{"sha":"d4f4a4d040ef47a5e82dffd0f067e92716606ddf","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Detect when all data will be written to standard out earlier.\n\nIf the -c, --stdout argument is not used, then we can still detect when\nthe data will be written to standard out if all of the provided\nfilenames are \"-\" (denoting standard in) or if no filenames are\nprovided.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d4f4a4d040ef47a5e82dffd0f067e92716606ddf"},{"sha":"837ea40b1c9d4998cac4500b55171bf33e0c31a6","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Move suffix check after stdout mode is detected.\n\nThis fixes a bug introduced in cc5aa9ab138beeecaee5a1e81197591893ee9ca0\nwhen the suffix check was initially moved. This caused a situation that\npreviously worked:\n\n    echo foo | xz -Fraw --lzma1 | wc -c\n\nto fail because the old code knew that this would write to standard out\nso a suffix was not needed.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/837ea40b1c9d4998cac4500b55171bf33e0c31a6"},{"sha":"f481523baac946fa3bc13d79186ffaf0c0b818a7","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Refactor suffix test with raw format.\n\nThe previous version set opt_stdout, but this caused an issue with\ncopying an input file to standard out when decompressing an unknown file\ntype. The following needs to result in an error:\n\n    echo foo | xz -df\n\nsince -c, --stdout is not used. This fixes the previous error by not\nsetting opt_stdout.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f481523baac946fa3bc13d79186ffaf0c0b818a7"},{"sha":"299920bab9ae258a247366339264e8aefca9e3ce","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Tests: Fix typo in a comment.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/299920bab9ae258a247366339264e8aefca9e3ce"},{"sha":"2a732aba22da1b0d4a1241cb32280ed010ba03ce","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Fix a bug with --files and --files0 in raw mode without a suffix.\n\nThe following command caused a segmentation fault:\n\n    xz -Fraw --lzma1 --files=foo\n\nwhen foo was a valid file. The usage of --files or --files0 was not\nbeing checked when compressing or decompressing in raw mode without a\nsuffix. The suffix checking code was meant to validate that all files\nto be processed are \"-\" (if not writing to standard out), meaning the\ndata is only coming from standard in. In this case, there were no file\nnames to check since --files and --files0 store their file name in a\ndifferent place.\n\nLater code assumed the suffix was set and caused a segmentation fault.\nNow, the above command results in an error.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2a732aba22da1b0d4a1241cb32280ed010ba03ce"},{"sha":"ca278eb2b7f5a4940f5ab18955297b398d423824","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Tests: Create test_suffix.sh.\n\nThis tests some complicated interactions with the --suffix= option.\nThe suffix option must be used with --format=raw, but can optionally\nbe used to override the default .xz suffix.\n\nThis test also verifies some recent bugs have been correctly solved\nand to hopefully avoid further regressions in the future.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/ca278eb2b7f5a4940f5ab18955297b398d423824"},{"sha":"659aca0d695807c0762d4101765189e4e33d1e2c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Move the check for --suffix with --format=raw a few lines earlier.\n\nNow it reads from argv[] instead of args->arg_names.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/659aca0d695807c0762d4101765189e4e33d1e2c"},{"sha":"6b05f827f50e686537e9a23c49c5aa4c0aa6b23d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"tuklib_integer: Fix typo discovered by codespell.\n\nBased on internet dictionary searches, 'choise' is an outdated spelling\nof 'choice'.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6b05f827f50e686537e9a23c49c5aa4c0aa6b23d"},{"sha":"584e3a258f32d579b1d07f99b4dc6e856c10ac7e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Create separate is_tty() function.\n\nThe new is_tty() will report if a file descriptor is a terminal or not.\nOn POSIX systems, it is a wrapper around isatty(). However, the native\nWindows implementation of isatty() will return true for all character\ndevices, not just terminals. So is_tty() has a special case for Windows\nso it can use alternative Windows API functions to determine if a file\ndescriptor is a terminal.\n\nThis fixes a bug with MSVC and MinGW-w64 builds that refused to read from\nor write to non-terminal character devices because xz thought it was a\nterminal. For instance:\n\n    xz foo -c > /dev/null\n\nwould fail because /dev/null was assumed to be a terminal.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/584e3a258f32d579b1d07f99b4dc6e856c10ac7e"},{"sha":"2ab2e4b5a542eab93902985ce4e642719a8b7a4e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Use is_tty() in message.c.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2ab2e4b5a542eab93902985ce4e642719a8b7a4e"},{"sha":"12b89bcc9915090eb42ae638e565af44b6832a23","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Tweak a comment.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/12b89bcc9915090eb42ae638e565af44b6832a23"}]},"public":true,"created_at":"2024-01-24T14:41:12Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
