{"id":"27654508884","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/43","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/43/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/43/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/43/events","html_url":"https://github.com/tukaani-project/xz/pull/43","id":1610442947,"node_id":"PR_kwDOIQBEvs5LUTCK","number":43,"title":"xz: Improve compatibility with systems without capability mode support","user":{"login":"delphij","id":1045626,"node_id":"MDQ6VXNlcjEwNDU2MjY=","avatar_url":"https://avatars.githubusercontent.com/u/1045626?v=4","gravatar_id":"","url":"https://api.github.com/users/delphij","html_url":"https://github.com/delphij","followers_url":"https://api.github.com/users/delphij/followers","following_url":"https://api.github.com/users/delphij/following{/other_user}","gists_url":"https://api.github.com/users/delphij/gists{/gist_id}","starred_url":"https://api.github.com/users/delphij/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/delphij/subscriptions","organizations_url":"https://api.github.com/users/delphij/orgs","repos_url":"https://api.github.com/users/delphij/repos","events_url":"https://api.github.com/users/delphij/events{/privacy}","received_events_url":"https://api.github.com/users/delphij/received_events","type":"User","site_admin":false},"labels":[{"id":4687621022,"node_id":"LA_kwDOIQBEvs8AAAABF2drng","url":"https://api.github.com/repos/tukaani-project/xz/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":5016626567,"node_id":"LA_kwDOIQBEvs8AAAABKwOlhw","url":"https://api.github.com/repos/tukaani-project/xz/labels/5.4.2","name":"5.4.2","color":"006b75","default":false,"description":"Item earmarked for 5.4.2 release"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2023-03-05T23:55:38Z","updated_at":"2023-03-11T20:05:51Z","closed_at":"2023-03-11T17:56:04Z","author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/43","html_url":"https://github.com/tukaani-project/xz/pull/43","diff_url":"https://github.com/tukaani-project/xz/pull/43.diff","patch_url":"https://github.com/tukaani-project/xz/pull/43.patch","merged_at":null},"body":"When the kernel is built without capability mode support, or when using an emulator like qemu-user-static that does not translate system calls, these calls will return a negative number and set the errno to ENOSYS. However, this error does not indicate a real programming or runtime error and is generally ignored by base system applications built with capability mode sandboxing.\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [X] Build was run locally and without warnings or errors\r\n- [X] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\nPlease check the type of change your PR introduces:\r\n- [X] Bugfix\r\n\r\n## What is the current behavior?\r\n\r\nxz would abort execution with `Failed to enable the sandbox` when capability mode system calls failed, regardless if the host system have capability mode support.\r\n\r\nIt is advisable that binaries with capability mode sandbox enabled to ignore capability mode errors when they are solely because the system does not have the support, this is done on many applications including OpenSSH and base system utilities.  In fact, FreeBSD have a set of macros called [capsicum_helpers(3)](https://man.freebsd.org/cgi/man.cgi?query=capsicum_helpers&sektion=3) which [wraps](https://cgit.freebsd.org/src/tree/lib/libcapsicum/capsicum_helpers.h#n153) this anti-pattern.\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=269185\r\n\r\n\r\n## What is the new behavior?\r\n\r\nxz will ignore sandbox failures caused by the kernel lacking support of capsicum mode.\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n## Other information\r\n\r\nThe proposed patch modified `cap_*` calls to also check if the failure was caused by the lack of support (ENOSYS) and make it ignore it.  If possible, it's probably reasonable to just use `caph_*` calls found in `capsicum_helpers(3)`.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/43/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/43/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1465002769","html_url":"https://github.com/tukaani-project/xz/pull/43#issuecomment-1465002769","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/43","id":1465002769,"node_id":"IC_kwDOIQBEvs5XUisR","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2023-03-11T20:05:50Z","updated_at":"2023-03-11T20:05:50Z","author_association":"MEMBER","body":"In contrast to v5.4, v5.2 (and thus 5.2.10) don't exit if enabling the sandbox fails. v5.2 only displays a message if double-verbose (`xz -vv`). The new stricter behavior was intentionally not backported to v5.2 since it seemed a risky change. So that's why the problem didn't appear until 5.4.x got into FreeBSD. I will discuss with JiaT75, perhaps it's best to not change the Capsicum code in v5.2 at all, we'll see.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1465002769/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-11T20:05:51Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"27654531108","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":12908394775,"size":21,"distinct_size":21,"ref":"refs/heads/v5.2","head":"01f1da25e5b4b851f850eb3263e184a57cefe923","before":"f7c2cc55618b9af3318f0c908cf8db0df1e28e7c","commits":[{"sha":"f62e5aae51c6dcb03ea675f67f8a0cf72ea8d259","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Update .gitignore for CMake artifacts from in source build.\n\nIn source builds are not recommended, but we can make it easier\nby ignoring the generated artifacts from CMake.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f62e5aae51c6dcb03ea675f67f8a0cf72ea8d259"},{"sha":"7067c1ca6534bfb4a5f0293109e945d8316ebbf5","author":{"email":"jiat0218@gmail.com","name":"Jia Cheong Tan"},"message":"Doxygen: Update .gitignore for generating docs for in source build.\n\nIn source builds are not recommended, but we should still ignore\nthe generated artifacts.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/7067c1ca6534bfb4a5f0293109e945d8316ebbf5"},{"sha":"2155fef5285bd524a9b8476dd7d146d845c846a9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Update documentation for lzma_filter_encoder.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2155fef5285bd524a9b8476dd7d146d845c846a9"},{"sha":"4dbdbd02d2a09e7e8c530d46de3d31e31c8f09a7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Add resource files to xz.exe and xzdec.exe.\n\nThe command line tools cannot be built with MSVC for now but\nthey can be built with MinGW-w64.\n\nThanks to Iouri Kharon for the bug report and the original patch.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/4dbdbd02d2a09e7e8c530d46de3d31e31c8f09a7"},{"sha":"7c337404bf8eedf574b30322524063048873df96","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Fix a copypaste error in xzdec Windows resource file handling.\n\nIt was my mistake. Thanks to Iouri Kharon for the bug report.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/7c337404bf8eedf574b30322524063048873df96"},{"sha":"f8cae7cee0c03f72ac7ada7677e9c65682955e84","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f8cae7cee0c03f72ac7ada7677e9c65682955e84"},{"sha":"35167d71f8bdc72e68296aa808f80d2113eb5bcd","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Update cmake_minimum_required from 3.13...3.16 to 3.13...3.25.\n\nThe changes listed on cmake-policies(7) for versions 3.17 to 3.25\nshouldn't affect this project.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/35167d71f8bdc72e68296aa808f80d2113eb5bcd"},{"sha":"f2192d13b5723e4869bb7f1b18c4b21cd72975af","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Add a workaround for windres from GNU binutils.\n\nThis is combined from the following commits in the master branch:\n443dfebced041adc88f10d824188eeef5b5821a9\n6b117d3b1fe91eb26d533ab16a2e552f84148d47\n5e34774c31d1b7509b5cb77a3be9973adec59ea0\n\nThanks to Iouri Kharon for the bug report, the original patch,\nand testing.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f2192d13b5723e4869bb7f1b18c4b21cd72975af"},{"sha":"3e2b345cfd28bdf0aabbd326254bc7246dd1125e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Fix warning -Wformat-nonliteral on clang in message.c.\n\nclang and gcc differ in how they handle -Wformat-nonliteral. gcc will\r\nallow a non-literal format string as long as the function takes its\r\nformat arguments as a va_list.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3e2b345cfd28bdf0aabbd326254bc7246dd1125e"},{"sha":"f900dd937f35f88b80536a60e8040664ba53dc1f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Fix warnings from clang -Wdocumentation.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f900dd937f35f88b80536a60e8040664ba53dc1f"},{"sha":"2ca95b7cfea589fa7c79c38b99deafc44d851803","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Silence warnings from clang -Wconditional-uninitialized.\n\nThis is similar to 2ce4f36f179a81d0c6e182a409f363df759d1ad0.\nThe actual initialization of the variables is done inside\nmythread_sync() macro. Clang doesn't seem to see that\nthe initialization code inside the macro is always executed.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2ca95b7cfea589fa7c79c38b99deafc44d851803"},{"sha":"6df383be4a22963e87ee06f9ac630d4c0ed927c9","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Use ssize_t for the to-be-ignored return value from write(fd, ptr, 1).\n\nIt makes no difference here as the return value fits into an int\ntoo and it then gets ignored but this looks better.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6df383be4a22963e87ee06f9ac630d4c0ed927c9"},{"sha":"ccbb991efab1b03783fa00bc7bb2ab14180674f8","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Do not set compression settings with raw format in list mode.\n\nCalling coder_set_compression_settings() in list mode with verbose mode\non caused the filter chain and memory requirements to print. This was\nunnecessary since the command results in an error and not consistent\nwith other formats like lzma and alone.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/ccbb991efab1b03783fa00bc7bb2ab14180674f8"},{"sha":"6c9a2c2e465a80aa079cf3c8b3fdd382b396d21f","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Add missing comment for coder_set_compression_settings()","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6c9a2c2e465a80aa079cf3c8b3fdd382b396d21f"},{"sha":"8daaac8e10f68289b44f68d0925e169176ce8a5c","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"tuklib_physmem: Silence warning from -Wcast-function-type on MinGW-w64.\n\ntuklib_physmem depends on GetProcAddress() for both MSVC and MinGW-w64\nto retrieve a function address. The proper way to do this is to cast the\nreturn value to the type of function pointer retrieved. Unfortunately,\nthis causes a cast-function-type warning, so the best solution is to\nsimply ignore the warning.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8daaac8e10f68289b44f68d0925e169176ce8a5c"},{"sha":"050c6dbf96b15dc3b546589e554e0abc83e19816","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix documentation for LZMA_MEMLIMIT_ERROR.\n\nLZMA_MEMLIMIT_ERROR was missing the \"<\" character needed to put\ndocumentation after a member.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/050c6dbf96b15dc3b546589e554e0abc83e19816"},{"sha":"3cc8ece2dcd7bd60835b4a7b0619254d9f75e164","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Use only the generic symbol versioning on MicroBlaze.\n\nOn MicroBlaze, GCC 12 is broken in sense that\n__has_attribute(__symver__) returns true but it still doesn't\nsupport the __symver__ attribute even though the platform is ELF\nand symbol versioning is supported if using the traditional\n__asm__(\".symver ...\") method. Avoiding the traditional method is\ngood because it breaks LTO (-flto) builds with GCC.\n\nSee also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101766\n\nFor now the only extra symbols in liblzma_linux.map are the\ncompatibility symbols with the patch that spread from RHEL/CentOS 7.\nThese require the use of __symver__ attribute or __asm__(\".symver ...\")\nin the C code. Compatibility with the patch from CentOS 7 doesn't\nseem valuable on MicroBlaze so use liblzma_generic.map on MicroBlaze\ninstead. It doesn't require anything special in the C code and thus\nno LTO issues either.\n\nAn alternative would be to detect support for __symver__\nattribute in configure.ac and CMakeLists.txt and fall back\nto __asm__(\".symver ...\") but then LTO would be silently broken\non MicroBlaze. It sounds likely that MicroBlaze is a special\ncase so let's treat it as a such because that is simpler. If\na similar issue exists on some other platform too then hopefully\nsomeone will report it and this can be reconsidered.\n\n(This doesn't do the same fix in CMakeLists.txt. Perhaps it should\nbut perhaps CMake build of liblzma doesn't matter much on MicroBlaze.\nThe problem breaks the build so it's easy to notice and can be fixed\nlater.)\n\nThanks to Vincent Fazio for reporting the problem and proposing\na patch (in the end that solution wasn't used):\nhttps://github.com/tukaani-project/xz/pull/32","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3cc8ece2dcd7bd60835b4a7b0619254d9f75e164"},{"sha":"d9445b5b2da0e666e9dfd92b3120d769de7bd9d1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d9445b5b2da0e666e9dfd92b3120d769de7bd9d1"},{"sha":"09363bea466ec0bf93f8a9d55609296bdd345780","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Avoid null pointer + 0 (undefined behavior in C).\n\nIn the C99 and C17 standards, section 6.5.6 paragraph 8 means that\nadding 0 to a null pointer is undefined behavior. As of writing,\n\"clang -fsanitize=undefined\" (Clang 15) diagnoses this. However,\nI'm not aware of any compiler that would take advantage of this\nwhen optimizing (Clang 15 included). It's good to avoid this anyway\nsince compilers might some day infer that pointer arithmetic implies\nthat the pointer is not NULL. That is, the following foo() would then\nunconditionally return 0, even for foo(NULL, 0):\n\n    void bar(char *a, char *b);\n\n    int foo(char *a, size_t n)\n    {\n        bar(a, a + n);\n        return a == NULL;\n    }\n\nIn contrast to C, C++ explicitly allows null pointer + 0. So if\nthe above is compiled as C++ then there is no undefined behavior\nin the foo(NULL, 0) call.\n\nTo me it seems that changing the C standard would be the sane\nthing to do (just add one sentence) as it would ensure that a huge\namount of old code won't break in the future. Based on web searches\nit seems that a large number of codebases (where null pointer + 0\noccurs) are being fixed instead to be future-proof in case compilers\nwill some day optimize based on it (like making the above foo(NULL, 0)\nreturn 0) which in the worst case will cause security bugs.\n\nSome projects don't plan to change it. For example, gnulib and thus\nmany GNU tools currently require that null pointer + 0 is defined:\n\n    https://lists.gnu.org/archive/html/bug-gnulib/2021-11/msg00000.html\n\n    https://www.gnu.org/software/gnulib/manual/html_node/Other-portability-assumptions.html\n\nIn XZ Utils null pointer + 0 issue should be fixed after this\ncommit. This adds a few if-statements and thus branches to avoid\nnull pointer + 0. These check for size > 0 instead of ptr != NULL\nbecause this way bugs where size > 0 && ptr == NULL will likely\nget caught quickly. None of them are in hot spots so it shouldn't\nmatter for performance.\n\nA little less readable version would be replacing\n\n    ptr + offset\n\nwith\n\n    offset != 0 ? ptr + offset : ptr\n\nor creating a macro for it:\n\n    #define my_ptr_add(ptr, offset) \\\n            ((offset) != 0 ? ((ptr) + (offset)) : (ptr))\n\nChecking for offset != 0 instead of ptr != NULL allows GCC >= 8.1,\nClang >= 7, and Clang-based ICX to optimize it to the very same code\nas ptr + offset. That is, it won't create a branch. So for hot code\nthis could be a good solution to avoid null pointer + 0. Unfortunately\nother compilers like ICC 2021 or MSVC 19.33 (VS2022) will create a\nbranch from my_ptr_add().\n\nThanks to Marcin Kowalczyk for reporting the problem:\nhttps://github.com/tukaani-project/xz/issues/36","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/09363bea466ec0bf93f8a9d55609296bdd345780"},{"sha":"2333bb5454631226393d82b336340ada0eaa7ed7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2333bb5454631226393d82b336340ada0eaa7ed7"}]},"public":true,"created_at":"2023-03-11T20:09:22Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
