{"id":"38809324713","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/112","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/events","html_url":"https://github.com/tukaani-project/xz/issues/112","id":2253168482,"node_id":"I_kwDOIQBEvs6GTJ9i","number":112,"title":"no_sanitize_address isn't required","user":{"login":"nigeltao","id":8565232,"node_id":"MDQ6VXNlcjg1NjUyMzI=","avatar_url":"https://avatars.githubusercontent.com/u/8565232?v=4","gravatar_id":"","url":"https://api.github.com/users/nigeltao","html_url":"https://github.com/nigeltao","followers_url":"https://api.github.com/users/nigeltao/followers","following_url":"https://api.github.com/users/nigeltao/following{/other_user}","gists_url":"https://api.github.com/users/nigeltao/gists{/gist_id}","starred_url":"https://api.github.com/users/nigeltao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nigeltao/subscriptions","organizations_url":"https://api.github.com/users/nigeltao/orgs","repos_url":"https://api.github.com/users/nigeltao/repos","events_url":"https://api.github.com/users/nigeltao/events{/privacy}","received_events_url":"https://api.github.com/users/nigeltao/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2024-04-19T14:32:35Z","updated_at":"2024-05-29T10:57:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://tukaani.org/xz-backdoor/review.html discusses the `crc_attr_no_sanitize_address` (i.e. `__attribute__((__no_sanitize_address__))`) in `crc_x86_clmul.h`:\r\n\r\n> This attribute is obviously scary but it is unfortunately required with the x86 SIMD code. The code makes aligned 16-byte reads which may read up to 15 bytes before the beginning or past the end of the buffer if the buffer is misaligned. The unneeded bytes are then ignored. It cannot cross page boundaries and thus cannot cause access violations.\r\n\r\nDisabling sanitzers is indeed scary. But also, I don't think the disabling is required to use x86 SIMD.\r\n\r\nInstead, you can add `crc_simd_body` preconditions that its `buf` and `size` arguments must be 16-byte aligned. Make the callers (`crc32_arch_optimized` and `crc64_arch_optimized`) responsible for the leading/lagging bytes that aren't 16-byte aligned. Out-of-bounds reads are no longer needed.\r\n\r\n```diff\r\ndiff --git a/src/liblzma/check/crc_x86_clmul.h b/src/liblzma/check/crc_x86_clmul.h\r\nindex f1254ece..7ecd16ee 100644\r\n--- a/src/liblzma/check/crc_x86_clmul.h\r\n+++ b/src/liblzma/check/crc_x86_clmul.h\r\n@@ -91,6 +91,9 @@ crc_simd_body(const uint8_t *buf, const size_t size, __m128i *v0, __m128i *v1,\r\n        //     [skip_start][size][skip_end]\r\n        //     [     size2      ]\r\n        //\r\n+       // This code can be simplified. skip_start and skip_end are now always 0,\r\n+       // size is a positive multiple of 16 and size2 = size.\r\n+       //\r\n        // A and D are 16-byte aligned. B and C are 1-byte aligned.\r\n        // skip_start and skip_end are 0-15 bytes. size is at least 1 byte.\r\n        //\r\n@@ -253,6 +256,15 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)\r\n                return crc;\r\n #endif\r\n \r\n+       // Process any leading bytes (before the 16-byte chunks).\r\n+       crc = ~crc;\r\n+       while (15 & (uintptr_t)buf) {\r\n+               if (size == 0)\r\n+                       return ~crc;\r\n+               crc = lzma_crc32_table[0][*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);\r\n+               --size;\r\n+       }\r\n+\r\n        // uint32_t poly = 0xedb88320;\r\n        const int64_t p = 0x1db710640; // p << 1\r\n        const int64_t mu = 0x1f7011641; // calc_lo(p, p, 32) << 1 | 1\r\n@@ -264,21 +276,34 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)\r\n        const __m128i vfold8 = _mm_set_epi64x(0, k5);\r\n        const __m128i vfold16 = _mm_set_epi64x(k4, k3);\r\n \r\n-       __m128i v0, v1, v2;\r\n+       // Process 16-byte chunks that are 16-byte aligned.\r\n+       size_t size1 = size & 15;\r\n+       size_t size0 = size - size1;\r\n+       if (size0) {\r\n+               __m128i v0, v1, v2;\r\n+\r\n+               crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n+                               _mm_cvtsi32_si128((int32_t)~crc));\r\n+               buf += size0;\r\n+\r\n+               v1 = _mm_xor_si128(\r\n+                               _mm_clmulepi64_si128(v0, vfold16, 0x10), v1); // xxx0\r\n+               v2 = _mm_shuffle_epi32(v1, 0xe7); // 0xx0\r\n+               v0 = _mm_slli_epi64(v1, 32);  // [0]\r\n+               v0 = _mm_clmulepi64_si128(v0, vfold8, 0x00);\r\n+               v0 = _mm_xor_si128(v0, v2);   // [1] [2]\r\n+               v2 = _mm_clmulepi64_si128(v0, vfold4, 0x10);\r\n+               v2 = _mm_clmulepi64_si128(v2, vfold4, 0x00);\r\n+               v0 = _mm_xor_si128(v0, v2);   // [2]\r\n+               crc = ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n+       }\r\n \r\n-       crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n-                       _mm_cvtsi32_si128((int32_t)~crc));\r\n-\r\n-       v1 = _mm_xor_si128(\r\n-                       _mm_clmulepi64_si128(v0, vfold16, 0x10), v1); // xxx0\r\n-       v2 = _mm_shuffle_epi32(v1, 0xe7); // 0xx0\r\n-       v0 = _mm_slli_epi64(v1, 32);  // [0]\r\n-       v0 = _mm_clmulepi64_si128(v0, vfold8, 0x00);\r\n-       v0 = _mm_xor_si128(v0, v2);   // [1] [2]\r\n-       v2 = _mm_clmulepi64_si128(v0, vfold4, 0x10);\r\n-       v2 = _mm_clmulepi64_si128(v2, vfold4, 0x00);\r\n-       v0 = _mm_xor_si128(v0, v2);   // [2]\r\n-       return ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n+       // Process any lagging bytes (after the 16-byte chunks).\r\n+       while (size1--) {\r\n+               crc = lzma_crc32_table[0][*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);\r\n+       }\r\n+\r\n+       return ~crc;\r\n }\r\n #endif // BUILDING_CRC32_CLMUL\r\n \r\n@@ -343,6 +368,8 @@ crc64_arch_optimized(const uint8_t *buf, size_t size, uint64_t crc)\r\n                return crc;\r\n #endif\r\n \r\n+       // Ditto.\r\n+\r\n        // const uint64_t poly = 0xc96c5795d7870f42; // CRC polynomial\r\n        const uint64_t p  = 0x92d8af2baf0e1e85; // (poly << 1) | 1\r\n        const uint64_t mu = 0x9c3e466c172963d5; // (calc_lo(poly) << 1) | 1\r\n```","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2137131907","html_url":"https://github.com/tukaani-project/xz/issues/112#issuecomment-2137131907","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/112","id":2137131907,"node_id":"IC_kwDOIQBEvs5_YguD","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2024-05-29T10:57:30Z","updated_at":"2024-05-29T10:57:30Z","author_association":"MEMBER","body":"I created the branch crc_edits two weeks ago but I'm not happy with the performance especially with small buffers. I have better code coming which is faster with both big and small buffers and won't trigger sanitizers. :-) It won't be in the bug fix releases as it wouldn't make sense to risk regressions when the current code works correctly.\r\n\r\nNote that doing 16-byte-aligned reads is likely a common way in assembly code. The idea is described, for example, in [Agner Fog's](https://www.agner.org/optimize/) optimizing_assembly.pdf (2023-Jul-01) page 126 \"Reading from the nearest preceding 16-bytes boundary\". Sanitizers don't sanitize assembly code and Valgrind is smart enough to see when bytes in the SIMD registers get ignored. Valgrind doesn't complain about the C code either. (Basically every ```__asm__``` statement in the C code is implicitly also `no_sanitize_address` but implicit doesn't look as scary.)\r\n\r\nAlso, the current CLMUL code isn't used merely on x86. It is compatible with E2K too. It's quite likely that separate versions are needed as unaligned access (MOVDQU) on x86 seems to fine in terms of performance on processors that support CLMUL. I have no clue about E2K myself but I hope to get feedback from the contributor who tested the current code on E2K.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2137131907/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-05-29T10:57:31Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
