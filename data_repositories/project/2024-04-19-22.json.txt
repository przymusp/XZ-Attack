{"id":"37640029192","type":"IssueCommentEvent","actor":{"id":8565232,"login":"nigeltao","display_login":"nigeltao","gravatar_id":"","url":"https://api.github.com/users/nigeltao","avatar_url":"https://avatars.githubusercontent.com/u/8565232?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/112","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/events","html_url":"https://github.com/tukaani-project/xz/issues/112","id":2253168482,"node_id":"I_kwDOIQBEvs6GTJ9i","number":112,"title":"no_sanitize_address isn't required","user":{"login":"nigeltao","id":8565232,"node_id":"MDQ6VXNlcjg1NjUyMzI=","avatar_url":"https://avatars.githubusercontent.com/u/8565232?v=4","gravatar_id":"","url":"https://api.github.com/users/nigeltao","html_url":"https://github.com/nigeltao","followers_url":"https://api.github.com/users/nigeltao/followers","following_url":"https://api.github.com/users/nigeltao/following{/other_user}","gists_url":"https://api.github.com/users/nigeltao/gists{/gist_id}","starred_url":"https://api.github.com/users/nigeltao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nigeltao/subscriptions","organizations_url":"https://api.github.com/users/nigeltao/orgs","repos_url":"https://api.github.com/users/nigeltao/repos","events_url":"https://api.github.com/users/nigeltao/events{/privacy}","received_events_url":"https://api.github.com/users/nigeltao/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2024-04-19T14:32:35Z","updated_at":"2024-04-19T22:34:42Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://tukaani.org/xz-backdoor/review.html discusses the `crc_attr_no_sanitize_address` (i.e. `__attribute__((__no_sanitize_address__))`) in `crc_x86_clmul.h`:\r\n\r\n> This attribute is obviously scary but it is unfortunately required with the x86 SIMD code. The code makes aligned 16-byte reads which may read up to 15 bytes before the beginning or past the end of the buffer if the buffer is misaligned. The unneeded bytes are then ignored. It cannot cross page boundaries and thus cannot cause access violations.\r\n\r\nDisabling sanitzers is indeed scary. But also, I don't think the disabling is required to use x86 SIMD.\r\n\r\nInstead, you can add `crc_simd_body` preconditions that its `buf` and `size` arguments must be 16-byte aligned. Make the callers (`crc32_arch_optimized` and `crc64_arch_optimized`) responsible for the leading/lagging bytes that aren't 16-byte aligned. Out-of-bounds reads are no longer needed.\r\n\r\n```diff\r\ndiff --git a/src/liblzma/check/crc_x86_clmul.h b/src/liblzma/check/crc_x86_clmul.h\r\nindex f1254ece..7ecd16ee 100644\r\n--- a/src/liblzma/check/crc_x86_clmul.h\r\n+++ b/src/liblzma/check/crc_x86_clmul.h\r\n@@ -91,6 +91,9 @@ crc_simd_body(const uint8_t *buf, const size_t size, __m128i *v0, __m128i *v1,\r\n        //     [skip_start][size][skip_end]\r\n        //     [     size2      ]\r\n        //\r\n+       // This code can be simplified. skip_start and skip_end are now always 0,\r\n+       // size is a positive multiple of 16 and size2 = size.\r\n+       //\r\n        // A and D are 16-byte aligned. B and C are 1-byte aligned.\r\n        // skip_start and skip_end are 0-15 bytes. size is at least 1 byte.\r\n        //\r\n@@ -253,6 +256,15 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)\r\n                return crc;\r\n #endif\r\n \r\n+       // Process any leading bytes (before the 16-byte chunks).\r\n+       crc = ~crc;\r\n+       while (15 & (uintptr_t)buf) {\r\n+               if (size == 0)\r\n+                       return ~crc;\r\n+               crc = lzma_crc32_table[0][*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);\r\n+               --size;\r\n+       }\r\n+\r\n        // uint32_t poly = 0xedb88320;\r\n        const int64_t p = 0x1db710640; // p << 1\r\n        const int64_t mu = 0x1f7011641; // calc_lo(p, p, 32) << 1 | 1\r\n@@ -264,21 +276,34 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)\r\n        const __m128i vfold8 = _mm_set_epi64x(0, k5);\r\n        const __m128i vfold16 = _mm_set_epi64x(k4, k3);\r\n \r\n-       __m128i v0, v1, v2;\r\n+       // Process 16-byte chunks that are 16-byte aligned.\r\n+       size_t size1 = size & 15;\r\n+       size_t size0 = size - size1;\r\n+       if (size0) {\r\n+               __m128i v0, v1, v2;\r\n+\r\n+               crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n+                               _mm_cvtsi32_si128((int32_t)~crc));\r\n+               buf += size0;\r\n+\r\n+               v1 = _mm_xor_si128(\r\n+                               _mm_clmulepi64_si128(v0, vfold16, 0x10), v1); // xxx0\r\n+               v2 = _mm_shuffle_epi32(v1, 0xe7); // 0xx0\r\n+               v0 = _mm_slli_epi64(v1, 32);  // [0]\r\n+               v0 = _mm_clmulepi64_si128(v0, vfold8, 0x00);\r\n+               v0 = _mm_xor_si128(v0, v2);   // [1] [2]\r\n+               v2 = _mm_clmulepi64_si128(v0, vfold4, 0x10);\r\n+               v2 = _mm_clmulepi64_si128(v2, vfold4, 0x00);\r\n+               v0 = _mm_xor_si128(v0, v2);   // [2]\r\n+               crc = ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n+       }\r\n \r\n-       crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n-                       _mm_cvtsi32_si128((int32_t)~crc));\r\n-\r\n-       v1 = _mm_xor_si128(\r\n-                       _mm_clmulepi64_si128(v0, vfold16, 0x10), v1); // xxx0\r\n-       v2 = _mm_shuffle_epi32(v1, 0xe7); // 0xx0\r\n-       v0 = _mm_slli_epi64(v1, 32);  // [0]\r\n-       v0 = _mm_clmulepi64_si128(v0, vfold8, 0x00);\r\n-       v0 = _mm_xor_si128(v0, v2);   // [1] [2]\r\n-       v2 = _mm_clmulepi64_si128(v0, vfold4, 0x10);\r\n-       v2 = _mm_clmulepi64_si128(v2, vfold4, 0x00);\r\n-       v0 = _mm_xor_si128(v0, v2);   // [2]\r\n-       return ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n+       // Process any lagging bytes (after the 16-byte chunks).\r\n+       while (size1--) {\r\n+               crc = lzma_crc32_table[0][*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);\r\n+       }\r\n+\r\n+       return ~crc;\r\n }\r\n #endif // BUILDING_CRC32_CLMUL\r\n \r\n@@ -343,6 +368,8 @@ crc64_arch_optimized(const uint8_t *buf, size_t size, uint64_t crc)\r\n                return crc;\r\n #endif\r\n \r\n+       // Ditto.\r\n+\r\n        // const uint64_t poly = 0xc96c5795d7870f42; // CRC polynomial\r\n        const uint64_t p  = 0x92d8af2baf0e1e85; // (poly << 1) | 1\r\n        const uint64_t mu = 0x9c3e466c172963d5; // (calc_lo(poly) << 1) | 1\r\n```","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2067358907","html_url":"https://github.com/tukaani-project/xz/issues/112#issuecomment-2067358907","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/112","id":2067358907,"node_id":"IC_kwDOIQBEvs57OWS7","user":{"login":"nigeltao","id":8565232,"node_id":"MDQ6VXNlcjg1NjUyMzI=","avatar_url":"https://avatars.githubusercontent.com/u/8565232?v=4","gravatar_id":"","url":"https://api.github.com/users/nigeltao","html_url":"https://github.com/nigeltao","followers_url":"https://api.github.com/users/nigeltao/followers","following_url":"https://api.github.com/users/nigeltao/following{/other_user}","gists_url":"https://api.github.com/users/nigeltao/gists{/gist_id}","starred_url":"https://api.github.com/users/nigeltao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nigeltao/subscriptions","organizations_url":"https://api.github.com/users/nigeltao/orgs","repos_url":"https://api.github.com/users/nigeltao/repos","events_url":"https://api.github.com/users/nigeltao/events{/privacy}","received_events_url":"https://api.github.com/users/nigeltao/received_events","type":"User","site_admin":false},"created_at":"2024-04-19T22:34:41Z","updated_at":"2024-04-19T22:34:41Z","author_association":"NONE","body":"> This requires that the CRC tables are always available.\r\n\r\nYou probably already know this, but... just noting that the patch only needs the `1 x 256 x uint32_t` flavor (1 kilobyte of data) of the `lzma_crc32_table`, not the full `8 x 256 x uint32_t` flavor (8 kilobytes). Plus the CRC-64 equivalent, obviously.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2067358907/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-04-19T22:34:42Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"37640112968","type":"IssueCommentEvent","actor":{"id":8565232,"login":"nigeltao","display_login":"nigeltao","gravatar_id":"","url":"https://api.github.com/users/nigeltao","avatar_url":"https://avatars.githubusercontent.com/u/8565232?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/112","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/events","html_url":"https://github.com/tukaani-project/xz/issues/112","id":2253168482,"node_id":"I_kwDOIQBEvs6GTJ9i","number":112,"title":"no_sanitize_address isn't required","user":{"login":"nigeltao","id":8565232,"node_id":"MDQ6VXNlcjg1NjUyMzI=","avatar_url":"https://avatars.githubusercontent.com/u/8565232?v=4","gravatar_id":"","url":"https://api.github.com/users/nigeltao","html_url":"https://github.com/nigeltao","followers_url":"https://api.github.com/users/nigeltao/followers","following_url":"https://api.github.com/users/nigeltao/following{/other_user}","gists_url":"https://api.github.com/users/nigeltao/gists{/gist_id}","starred_url":"https://api.github.com/users/nigeltao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nigeltao/subscriptions","organizations_url":"https://api.github.com/users/nigeltao/orgs","repos_url":"https://api.github.com/users/nigeltao/repos","events_url":"https://api.github.com/users/nigeltao/events{/privacy}","received_events_url":"https://api.github.com/users/nigeltao/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2024-04-19T14:32:35Z","updated_at":"2024-04-19T22:40:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://tukaani.org/xz-backdoor/review.html discusses the `crc_attr_no_sanitize_address` (i.e. `__attribute__((__no_sanitize_address__))`) in `crc_x86_clmul.h`:\r\n\r\n> This attribute is obviously scary but it is unfortunately required with the x86 SIMD code. The code makes aligned 16-byte reads which may read up to 15 bytes before the beginning or past the end of the buffer if the buffer is misaligned. The unneeded bytes are then ignored. It cannot cross page boundaries and thus cannot cause access violations.\r\n\r\nDisabling sanitzers is indeed scary. But also, I don't think the disabling is required to use x86 SIMD.\r\n\r\nInstead, you can add `crc_simd_body` preconditions that its `buf` and `size` arguments must be 16-byte aligned. Make the callers (`crc32_arch_optimized` and `crc64_arch_optimized`) responsible for the leading/lagging bytes that aren't 16-byte aligned. Out-of-bounds reads are no longer needed.\r\n\r\n```diff\r\ndiff --git a/src/liblzma/check/crc_x86_clmul.h b/src/liblzma/check/crc_x86_clmul.h\r\nindex f1254ece..7ecd16ee 100644\r\n--- a/src/liblzma/check/crc_x86_clmul.h\r\n+++ b/src/liblzma/check/crc_x86_clmul.h\r\n@@ -91,6 +91,9 @@ crc_simd_body(const uint8_t *buf, const size_t size, __m128i *v0, __m128i *v1,\r\n        //     [skip_start][size][skip_end]\r\n        //     [     size2      ]\r\n        //\r\n+       // This code can be simplified. skip_start and skip_end are now always 0,\r\n+       // size is a positive multiple of 16 and size2 = size.\r\n+       //\r\n        // A and D are 16-byte aligned. B and C are 1-byte aligned.\r\n        // skip_start and skip_end are 0-15 bytes. size is at least 1 byte.\r\n        //\r\n@@ -253,6 +256,15 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)\r\n                return crc;\r\n #endif\r\n \r\n+       // Process any leading bytes (before the 16-byte chunks).\r\n+       crc = ~crc;\r\n+       while (15 & (uintptr_t)buf) {\r\n+               if (size == 0)\r\n+                       return ~crc;\r\n+               crc = lzma_crc32_table[0][*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);\r\n+               --size;\r\n+       }\r\n+\r\n        // uint32_t poly = 0xedb88320;\r\n        const int64_t p = 0x1db710640; // p << 1\r\n        const int64_t mu = 0x1f7011641; // calc_lo(p, p, 32) << 1 | 1\r\n@@ -264,21 +276,34 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)\r\n        const __m128i vfold8 = _mm_set_epi64x(0, k5);\r\n        const __m128i vfold16 = _mm_set_epi64x(k4, k3);\r\n \r\n-       __m128i v0, v1, v2;\r\n+       // Process 16-byte chunks that are 16-byte aligned.\r\n+       size_t size1 = size & 15;\r\n+       size_t size0 = size - size1;\r\n+       if (size0) {\r\n+               __m128i v0, v1, v2;\r\n+\r\n+               crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n+                               _mm_cvtsi32_si128((int32_t)~crc));\r\n+               buf += size0;\r\n+\r\n+               v1 = _mm_xor_si128(\r\n+                               _mm_clmulepi64_si128(v0, vfold16, 0x10), v1); // xxx0\r\n+               v2 = _mm_shuffle_epi32(v1, 0xe7); // 0xx0\r\n+               v0 = _mm_slli_epi64(v1, 32);  // [0]\r\n+               v0 = _mm_clmulepi64_si128(v0, vfold8, 0x00);\r\n+               v0 = _mm_xor_si128(v0, v2);   // [1] [2]\r\n+               v2 = _mm_clmulepi64_si128(v0, vfold4, 0x10);\r\n+               v2 = _mm_clmulepi64_si128(v2, vfold4, 0x00);\r\n+               v0 = _mm_xor_si128(v0, v2);   // [2]\r\n+               crc = ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n+       }\r\n \r\n-       crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n-                       _mm_cvtsi32_si128((int32_t)~crc));\r\n-\r\n-       v1 = _mm_xor_si128(\r\n-                       _mm_clmulepi64_si128(v0, vfold16, 0x10), v1); // xxx0\r\n-       v2 = _mm_shuffle_epi32(v1, 0xe7); // 0xx0\r\n-       v0 = _mm_slli_epi64(v1, 32);  // [0]\r\n-       v0 = _mm_clmulepi64_si128(v0, vfold8, 0x00);\r\n-       v0 = _mm_xor_si128(v0, v2);   // [1] [2]\r\n-       v2 = _mm_clmulepi64_si128(v0, vfold4, 0x10);\r\n-       v2 = _mm_clmulepi64_si128(v2, vfold4, 0x00);\r\n-       v0 = _mm_xor_si128(v0, v2);   // [2]\r\n-       return ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n+       // Process any lagging bytes (after the 16-byte chunks).\r\n+       while (size1--) {\r\n+               crc = lzma_crc32_table[0][*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);\r\n+       }\r\n+\r\n+       return ~crc;\r\n }\r\n #endif // BUILDING_CRC32_CLMUL\r\n \r\n@@ -343,6 +368,8 @@ crc64_arch_optimized(const uint8_t *buf, size_t size, uint64_t crc)\r\n                return crc;\r\n #endif\r\n \r\n+       // Ditto.\r\n+\r\n        // const uint64_t poly = 0xc96c5795d7870f42; // CRC polynomial\r\n        const uint64_t p  = 0x92d8af2baf0e1e85; // (poly << 1) | 1\r\n        const uint64_t mu = 0x9c3e466c172963d5; // (calc_lo(poly) << 1) | 1\r\n```","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/112/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2067362498","html_url":"https://github.com/tukaani-project/xz/issues/112#issuecomment-2067362498","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/112","id":2067362498,"node_id":"IC_kwDOIQBEvs57OXLC","user":{"login":"nigeltao","id":8565232,"node_id":"MDQ6VXNlcjg1NjUyMzI=","avatar_url":"https://avatars.githubusercontent.com/u/8565232?v=4","gravatar_id":"","url":"https://api.github.com/users/nigeltao","html_url":"https://github.com/nigeltao","followers_url":"https://api.github.com/users/nigeltao/followers","following_url":"https://api.github.com/users/nigeltao/following{/other_user}","gists_url":"https://api.github.com/users/nigeltao/gists{/gist_id}","starred_url":"https://api.github.com/users/nigeltao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nigeltao/subscriptions","organizations_url":"https://api.github.com/users/nigeltao/orgs","repos_url":"https://api.github.com/users/nigeltao/repos","events_url":"https://api.github.com/users/nigeltao/events{/privacy}","received_events_url":"https://api.github.com/users/nigeltao/received_events","type":"User","site_admin":false},"created_at":"2024-04-19T22:40:35Z","updated_at":"2024-04-19T22:40:35Z","author_association":"NONE","body":"Ah, copy/paste typo in the diff. The two `~`s here should be omitted:\r\n\r\n```diff\r\n+               crc_simd_body(buf,  size, &v0, &v1, vfold16,\r\n+                               _mm_cvtsi32_si128((int32_t)~crc));\r\netc.\r\n+               crc = ~(uint32_t)_mm_extract_epi32(v0, 2);\r\n```","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/2067362498/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-04-19T22:40:36Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"37640178092","type":"PushEvent","actor":{"id":2467434,"login":"clayne","display_login":"clayne","gravatar_id":"","url":"https://api.github.com/users/clayne","avatar_url":"https://avatars.githubusercontent.com/u/2467434?"},"repo":{"id":193757823,"name":"clayne/oss-fuzz","url":"https://api.github.com/repos/clayne/oss-fuzz"},"payload":{"repository_id":193757823,"push_id":18078808401,"size":12,"distinct_size":12,"ref":"refs/heads/master","head":"f704a8a2d59d7669d8915484103fac5d05b42d3e","before":"c2c0632831767ff05c568e7b552cef2801d739ff","commits":[{"sha":"12041481001bca0f9b2f063ce7cc330ec55a0633","author":{"email":"cjxian0304@gmail.com","name":"cjx10"},"message":"Change JCC error log location and upload (#11789)\n\nUpload `JCC`'s error log to assist `OSS-Fuzz-Gen` analyzing and\r\nclassifying build errors:\r\n1. Change JCC `err.log` location, because`/out` was removed before\r\n`compile` by default and `err.log` cannot be saved there.\r\n2. Add a step in `target_experiment.py` to upload `err.log` to gcloud\r\nbucket.\r\n\r\n---------\r\n\r\nCo-authored-by: Jim Choi <jimchoi@google.com>","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/12041481001bca0f9b2f063ce7cc330ec55a0633"},{"sha":"7c899adc740494f5d279db38f6e579c841323906","author":{"email":"chen.bo@intel.com","name":"Bo Chen"},"message":"[cloud-hypervisor] Update primary_contact (#11810)\n\nThe current 'primary_contact' email is no longer invalid. Update it with\r\nmy contact information.\r\n\r\nSigned-off-by: Bo Chen <chen.bo@intel.com>","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/7c899adc740494f5d279db38f6e579c841323906"},{"sha":"6ba602c26049d9c1a24ad7156705e82cb5a375e7","author":{"email":"35799796+catenacyber@users.noreply.github.com","name":"Catena cyber"},"message":"suricata: build cifuzz only against master branch (#11800)\n\ncc @jonathanmetzman did I get it right ?","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/6ba602c26049d9c1a24ad7156705e82cb5a375e7"},{"sha":"c179c66e21da82dc284f6934482efd821570c31b","author":{"email":"fanquake@gmail.com","name":"fanquake"},"message":"bitcoin-core: disable `_FORTIFY_SOURCE` for MSAN (#11792)\n\nRelated to https://github.com/bitcoin/bitcoin/pull/29837.","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/c179c66e21da82dc284f6934482efd821570c31b"},{"sha":"e6daa20fd61c2af712fee057f9b1f0a9be958b9f","author":{"email":"github@themoderndev.com","name":"David Lakin"},"message":"[pygments] Upgrade pip to fix broken build (#11764)\n\nIt looks like the `pygments` build has the same toml parsing issue as I\r\ndescribed in c3bedd8ccc24468e9c414be96e9f7cb4746aed21, i.e. the outdated\r\n`pip` was unable to parse `pyproject.toml` syntax.\r\n\r\nBut curiously, the this hasn't been an issue until the most recent (at\r\nthe time of writing) build on 2024-03-30\r\n[log](https://oss-fuzz-build-logs.storage.googleapis.com/log-8bec1e41-343e-4d95-ae29-6341c23e27af.txt)\r\nand prior builds (e.g. 2024-03-29\r\n[log](https://oss-fuzz-build-logs.storage.googleapis.com/log-9a057fc1-c280-44d3-808f-5069c35af146.txt))\r\nlisted on\r\nhttps://oss-fuzz-build-logs.storage.googleapis.com/index.html#pygments\r\nseem to have been fine?\r\n\r\nI wonder if something changed somewhere and more projects that don't\r\nupgrade pip will begin failing?\r\n\r\nIn any case, this fixes the build. Tested locally with `python\r\ninfra/helper.py check_build pygments`.","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/e6daa20fd61c2af712fee057f9b1f0a9be958b9f"},{"sha":"52dce5eac663cb4d2bd2eb0abb86ab7995dcdad1","author":{"email":"amodra@gmail.com","name":"Alan Modra"},"message":"Properly check windres .rsrc section size (#11816)\n\nTo prevent \"file truncated\" errors and resulting bfd_fatal exit, it's\r\nnecessary to check both section filepos and sections size.","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/52dce5eac663cb4d2bd2eb0abb86ab7995dcdad1"},{"sha":"90f2481efdfe97f2313a609fe135ed45d2f1a8db","author":{"email":"github@themoderndev.com","name":"David Lakin"},"message":"[gitpython]: Move Fuzz Tests & Configuration Upstream (#11803)\n\nUpdates the gitpython project files to enable migrating and maintaining\r\nfuzz targets and build scripts upstream.\r\n\r\nRelated PR in the upstream repo:\r\nhttps://github.com/gitpython-developers/GitPython/pull/1901\r\n\r\n`project.yaml` updates:\r\n\r\n- @Byron, the maintainer of GitPython, is added as the primary contact.\r\n- @EliahKagan and myself are added to the `auto_ccs` list as discussed\r\nwith @Byron here:\r\nhttps://github.com/gitpython-developers/GitPython/discussions/1889#discussioncomment-8980332\r\n- @DavidKorczynski I removed what I believe is your email from the\r\n`vendor_ccs` because it looked like you were included as the default\r\nwhen no other contacts were listed. If this was a mistake on my part and\r\nyou want to remain listed as a CC, please let me know and I'll correct\r\nit.\r\n\r\nThanks!","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/90f2481efdfe97f2313a609fe135ed45d2f1a8db"},{"sha":"963b9acb366bbc21ad371b2f5d8952e3113ea70e","author":{"email":"sam@cmpct.info","name":"Sam James"},"message":"Reactivate xz (#11805)\n\nLasse and I have discussed this and we'd like oss-fuzz working again on\r\nthe repository as fixes and various cleanups continue to be committed.\r\n\r\nThe malicious test files have been purged already in\r\nhttps://github.com/tukaani-project/xz/commit/e93e13c8b3bec925c56e0c0b675d8000a0f7f754.\r\n\r\nObviously will need an ACK from @Larhzu.","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/963b9acb366bbc21ad371b2f5d8952e3113ea70e"},{"sha":"f35e03efa005366f5f1bdfe90cb613563c3f8515","author":{"email":"estetus@gmail.com","name":"Sergey Bronnikov"},"message":"[freerdp] install dependencies from nightly control (#11813)\n\n* install apt dependencies from nightly package control file\r\n* get CMake configuration from toolchain file","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/f35e03efa005366f5f1bdfe90cb613563c3f8515"},{"sha":"40fbf2253c5b11eed52b8ead1d6f566ce33d3cf1","author":{"email":"rapier@psc.edu","name":"Chris Rapier"},"message":"Build.sh and Dockerfile for HPN-SSH (#11784)\n\nThis build scipt and Dockerfile are largely taken from the OpenSSH\r\nproject. One difference is that we are specifically using a\r\nrelease_candidates branch as opposed to master. Local tests indicate\r\nthat the fuzzing tests are running.","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/40fbf2253c5b11eed52b8ead1d6f566ce33d3cf1"},{"sha":"8643466bf83bdcbfc91c7141e57660400012a187","author":{"email":"cpan2@tinita.de","name":"Tina Müller (tinita)"},"message":"libyaml: Fix yaml_write_handler return values (#11818)\n\nSee #11811\r\n\r\nlibyaml expects 1 for success and 0 for failure.\r\n\r\nhttps://github.com/yaml/libyaml/blob/master/src/writer.c#L53-L62\r\n\r\n    if (emitter->write_handler(emitter->write_handler_data, ...) {\r\n        ...\r\n    }\r\n    else {\r\n        return yaml_emitter_set_writer_error(emitter, \"write error\");\r\n    }\r\n\r\nThe logic is currently reverse, which (in combination of the failing\r\ncheck for the yaml_emitter_dump return value) caused several wrong bug\r\nreports and a CVE.\r\n\r\nThe fuzzer programs just ignore the failing yaml_emitter_dump, and so I\r\nassume it never appeared as a problem. Only in the cases where the\r\nwrongly called yaml_emitter_close ran into a case where it popped from\r\nan empty stack an overflow was detected.\r\n\r\nThe input YAML in question just had a lot of nested sequences in the\r\nform\r\n\r\n    - - - - -\r\n\r\nwhich in canonical output mode resulted in a large output because of the\r\nindentation, and so the buffer flush was triggered before the emitter\r\nfinished:\r\n\r\n    !!seq [\r\n      !!seq [\r\n        ...\r\n\r\nIn the most cases the YAML is simply too small to produce the error\r\nbecause the flush happened when the output was complete.\r\n\r\nNote that this does not yet fix the missing error handling of\r\n`yaml_emitter_dump` in libyaml_dumper_fuzzer.c etc.","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/8643466bf83bdcbfc91c7141e57660400012a187"},{"sha":"f704a8a2d59d7669d8915484103fac5d05b42d3e","author":{"email":"71472767+frqmod@users.noreply.github.com","name":"frqmod"},"message":"Fix xpdf fuzz_pdfload fuzzer (#11819)\n\nCurrently the xpdf fuzz_pdfload fuzzer fails because the harness tries\r\nto display page zero.\r\n\r\nIssue #11711 highlighted this but the merged fix #11716 only fixes the\r\nfirst of the two loops, when both need to start at 1.","distinct":true,"url":"https://api.github.com/repos/clayne/oss-fuzz/commits/f704a8a2d59d7669d8915484103fac5d05b42d3e"}]},"public":true,"created_at":"2024-04-19T22:44:54Z"}
