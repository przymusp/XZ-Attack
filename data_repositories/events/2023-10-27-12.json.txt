{"id":"32898060101","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15591430427,"size":8,"distinct_size":0,"ref":"refs/heads/master","head":"2c7ee92e44e1e66f0a427555233eb22c78f6c4f8","before":"88588b1246d8c26ffbc138b3e5c413c5f14c3179","commits":[{"sha":"e67aaf698de75c73443a5ec786781cbf2034461d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix the import library filename.\n\nBoth PREFIX and IMPORT_PERFIX have to be set to \"\" to get\nliblzma.dll and liblzma.dll.a.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e67aaf698de75c73443a5ec786781cbf2034461d"},{"sha":"08d12595f486890cf601b87f36ee0ddbce57728e","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Change one CMAKE_CURRENT_SOURCE_DIR to CMAKE_CURRENT_LIST_DIR.\n\nIn this case they have identical values.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/08d12595f486890cf601b87f36ee0ddbce57728e"},{"sha":"80e0750e3996c1c659e972ce9cf789ca2e99f702","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Create liblzma.def when building liblzma.dll with MinGW-w64.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/80e0750e3996c1c659e972ce9cf789ca2e99f702"},{"sha":"a7d1b2825c49dc83f1910eeb8ba0f1dfbd886d91","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add Cflags.private to liblzma.pc.in for MSYS2.\n\nIt properly adds -DLZMA_API_STATIC when compiling code that\nwill be linked against static liblzma. Having it there on\nsystems other than Windows does no harm.\n\nSee: https://www.msys2.org/docs/pkgconfig/","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a7d1b2825c49dc83f1910eeb8ba0f1dfbd886d91"},{"sha":"2add71966f891d315105d6245f724ed4f43a4eff","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Rearrange the PACKAGE_ variables.\n\nThe windres workaround now replaces spaces with \\x20 so\nthe package name isn't repeated.\n\nThese changes will help with creation of liblzma.pc.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2add71966f891d315105d6245f724ed4f43a4eff"},{"sha":"1bc548b8210366e44ba35b0b11577a8e328c1228","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Generate and install liblzma.pc if not using MSVC.\n\nAutotools based build uses -pthread and thus adds it to Libs.private\nin liblzma.pc. CMake doesn't use -pthread at all if pthread functions\nare available in libc so Libs.private doesn't get -pthread either.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1bc548b8210366e44ba35b0b11577a8e328c1228"},{"sha":"597f49b61475438a43a417236989b2acc968a686","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Use -D_FILE_OFFSET_BITS=64 if (and only if) needed.\n\nA CMake option LARGE_FILE_SUPPORT is created if and only if\n-D_FILE_OFFSET_BITS=64 affects sizeof(off_t).\n\nThis is needed on many 32-bit platforms and even with 64-bit builds\nwith MinGW-w64 to get support for files larger than 2 GiB.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/597f49b61475438a43a417236989b2acc968a686"},{"sha":"2c7ee92e44e1e66f0a427555233eb22c78f6c4f8","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Refer to MinGW-w64 instead of MinGW in the API headers.\n\nMinGW (formely a MinGW.org Project, later the MinGW.OSDN Project\nat <https://osdn.net/projects/mingw/>) has GCC 9.2.0 as the\nmost recent GCC package (released 2021-02-02). The project might\nstill be alive but majority of people have switched to MinGW-w64.\nThus it seems clearer to refer to MinGW-w64 in our API headers too.\nBuilding with MinGW is likely to still work but I haven't tested it\nin the recent years.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2c7ee92e44e1e66f0a427555233eb22c78f6c4f8"}]},"public":true,"created_at":"2023-10-27T12:07:21Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
