commit cc5aa9ab138beeecaee5a1e81197591893ee9ca0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jan 7 21:55:06 2023 +0800

    xz: Refactor duplicated check for custom suffix when using --format=raw

diff --git a/src/xz/args.c b/src/xz/args.c
index c31f759a..3468e276 100644
--- a/src/xz/args.c
+++ b/src/xz/args.c
@@ -1,752 +1,760 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       args.c
 /// \brief      Argument parsing
 ///
 /// \note       Filter-specific options parsing is in options.c.
 //
 //  Author:     Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "private.h"
 
 #include "getopt.h"
 #include <ctype.h>
 
 
 bool opt_stdout = false;
 bool opt_force = false;
 bool opt_keep_original = false;
 bool opt_robot = false;
 bool opt_ignore_check = false;
 
 // We don't modify or free() this, but we need to assign it in some
 // non-const pointers.
 const char stdin_filename[] = "(stdin)";
 
 
 /// Parse and set the memory usage limit for compression, decompression,
 /// and/or multithreaded decompression.
 static void
 parse_memlimit(const char *name, const char *name_percentage, const char *str,
 		bool set_compress, bool set_decompress, bool set_mtdec)
 {
 	bool is_percentage = false;
 	uint64_t value;
 
 	const size_t len = strlen(str);
 	if (len > 0 && str[len - 1] == '%') {
 		// Make a copy so that we can get rid of %.
 		//
 		// In the past str wasn't const and we modified it directly
 		// but that modified argv[] and thus affected what was visible
 		// in "ps auxf" or similar tools which was confusing. For
 		// example, --memlimit=50% would show up as --memlimit=50
 		// since the percent sign was overwritten here.
 		char *s = xstrdup(str);
 		s[len - 1] = '\0';
 		is_percentage = true;
 		value = str_to_uint64(name_percentage, s, 1, 100);
 		free(s);
 	} else {
 		// On 32-bit systems, SIZE_MAX would make more sense than
 		// UINT64_MAX. But use UINT64_MAX still so that scripts
 		// that assume > 4 GiB values don't break.
 		value = str_to_uint64(name, str, 0, UINT64_MAX);
 	}
 
 	hardware_memlimit_set(value, set_compress, set_decompress, set_mtdec,
 			is_percentage);
 	return;
 }
 
 
 static void
 parse_block_list(const char *str_const)
 {
 	// We need a modifiable string in the for-loop.
 	char *str_start = xstrdup(str_const);
 	char *str = str_start;
 
 	// It must be non-empty and not begin with a comma.
 	if (str[0] == '\0' || str[0] == ',')
 		message_fatal(_("%s: Invalid argument to --block-list"), str);
 
 	// Count the number of comma-separated strings.
 	size_t count = 1;
 	for (size_t i = 0; str[i] != '\0'; ++i)
 		if (str[i] == ',')
 			++count;
 
 	// Prevent an unlikely integer overflow.
 	if (count > SIZE_MAX / sizeof(uint64_t) - 1)
 		message_fatal(_("%s: Too many arguments to --block-list"),
 				str);
 
 	// Allocate memory to hold all the sizes specified.
 	// If --block-list was specified already, its value is forgotten.
 	free(opt_block_list);
 	opt_block_list = xmalloc((count + 1) * sizeof(uint64_t));
 
 	for (size_t i = 0; i < count; ++i) {
 		// Locate the next comma and replace it with \0.
 		char *p = strchr(str, ',');
 		if (p != NULL)
 			*p = '\0';
 
 		if (str[0] == '\0') {
 			// There is no string, that is, a comma follows
 			// another comma. Use the previous value.
 			//
 			// NOTE: We checked earlier that the first char
 			// of the whole list cannot be a comma.
 			assert(i > 0);
 			opt_block_list[i] = opt_block_list[i - 1];
 		} else {
 			opt_block_list[i] = str_to_uint64("block-list", str,
 					0, UINT64_MAX);
 
 			// Zero indicates no more new Blocks.
 			if (opt_block_list[i] == 0) {
 				if (i + 1 != count)
 					message_fatal(_("0 can only be used "
 							"as the last element "
 							"in --block-list"));
 
 				opt_block_list[i] = UINT64_MAX;
 			}
 		}
 
 		str = p + 1;
 	}
 
 	// Terminate the array.
 	opt_block_list[count] = 0;
 
 	free(str_start);
 	return;
 }
 
 
 static void
 parse_real(args_info *args, int argc, char **argv)
 {
 	enum {
 		OPT_X86 = INT_MIN,
 		OPT_POWERPC,
 		OPT_IA64,
 		OPT_ARM,
 		OPT_ARMTHUMB,
 		OPT_ARM64,
 		OPT_SPARC,
 		OPT_DELTA,
 		OPT_LZMA1,
 		OPT_LZMA2,
 
 		OPT_SINGLE_STREAM,
 		OPT_NO_SPARSE,
 		OPT_FILES,
 		OPT_FILES0,
 		OPT_BLOCK_SIZE,
 		OPT_BLOCK_LIST,
 		OPT_MEM_COMPRESS,
 		OPT_MEM_DECOMPRESS,
 		OPT_MEM_MT_DECOMPRESS,
 		OPT_NO_ADJUST,
 		OPT_INFO_MEMORY,
 		OPT_ROBOT,
 		OPT_FLUSH_TIMEOUT,
 		OPT_IGNORE_CHECK,
 	};
 
 	static const char short_opts[]
 			= "cC:defF:hHlkM:qQrS:tT:vVz0123456789";
 
 	static const struct option long_opts[] = {
 		// Operation mode
 		{ "compress",     no_argument,       NULL,  'z' },
 		{ "decompress",   no_argument,       NULL,  'd' },
 		{ "uncompress",   no_argument,       NULL,  'd' },
 		{ "test",         no_argument,       NULL,  't' },
 		{ "list",         no_argument,       NULL,  'l' },
 
 		// Operation modifiers
 		{ "keep",         no_argument,       NULL,  'k' },
 		{ "force",        no_argument,       NULL,  'f' },
 		{ "stdout",       no_argument,       NULL,  'c' },
 		{ "to-stdout",    no_argument,       NULL,  'c' },
 		{ "single-stream", no_argument,      NULL,  OPT_SINGLE_STREAM },
 		{ "no-sparse",    no_argument,       NULL,  OPT_NO_SPARSE },
 		{ "suffix",       required_argument, NULL,  'S' },
 		// { "recursive",      no_argument,       NULL,  'r' }, // TODO
 		{ "files",        optional_argument, NULL,  OPT_FILES },
 		{ "files0",       optional_argument, NULL,  OPT_FILES0 },
 
 		// Basic compression settings
 		{ "format",       required_argument, NULL,  'F' },
 		{ "check",        required_argument, NULL,  'C' },
 		{ "ignore-check", no_argument,       NULL,  OPT_IGNORE_CHECK },
 		{ "block-size",   required_argument, NULL,  OPT_BLOCK_SIZE },
 		{ "block-list",  required_argument, NULL,  OPT_BLOCK_LIST },
 		{ "memlimit-compress",   required_argument, NULL, OPT_MEM_COMPRESS },
 		{ "memlimit-decompress", required_argument, NULL, OPT_MEM_DECOMPRESS },
 		{ "memlimit-mt-decompress", required_argument, NULL, OPT_MEM_MT_DECOMPRESS },
 		{ "memlimit",     required_argument, NULL,  'M' },
 		{ "memory",       required_argument, NULL,  'M' }, // Old alias
 		{ "no-adjust",    no_argument,       NULL,  OPT_NO_ADJUST },
 		{ "threads",      required_argument, NULL,  'T' },
 		{ "flush-timeout", required_argument, NULL, OPT_FLUSH_TIMEOUT },
 
 		{ "extreme",      no_argument,       NULL,  'e' },
 		{ "fast",         no_argument,       NULL,  '0' },
 		{ "best",         no_argument,       NULL,  '9' },
 
 		// Filters
 		{ "lzma1",        optional_argument, NULL,  OPT_LZMA1 },
 		{ "lzma2",        optional_argument, NULL,  OPT_LZMA2 },
 		{ "x86",          optional_argument, NULL,  OPT_X86 },
 		{ "powerpc",      optional_argument, NULL,  OPT_POWERPC },
 		{ "ia64",         optional_argument, NULL,  OPT_IA64 },
 		{ "arm",          optional_argument, NULL,  OPT_ARM },
 		{ "armthumb",     optional_argument, NULL,  OPT_ARMTHUMB },
 		{ "arm64",        optional_argument, NULL,  OPT_ARM64 },
 		{ "sparc",        optional_argument, NULL,  OPT_SPARC },
 		{ "delta",        optional_argument, NULL,  OPT_DELTA },
 
 		// Other options
 		{ "quiet",        no_argument,       NULL,  'q' },
 		{ "verbose",      no_argument,       NULL,  'v' },
 		{ "no-warn",      no_argument,       NULL,  'Q' },
 		{ "robot",        no_argument,       NULL,  OPT_ROBOT },
 		{ "info-memory",  no_argument,       NULL,  OPT_INFO_MEMORY },
 		{ "help",         no_argument,       NULL,  'h' },
 		{ "long-help",    no_argument,       NULL,  'H' },
 		{ "version",      no_argument,       NULL,  'V' },
 
 		{ NULL,           0,                 NULL,   0 }
 	};
 
 	int c;
 
 	while ((c = getopt_long(argc, argv, short_opts, long_opts, NULL))
 			!= -1) {
 		switch (c) {
 		// Compression preset (also for decompression if --format=raw)
 		case '0': case '1': case '2': case '3': case '4':
 		case '5': case '6': case '7': case '8': case '9':
 			coder_set_preset((uint32_t)(c - '0'));
 			break;
 
 		// --memlimit-compress
 		case OPT_MEM_COMPRESS:
 			parse_memlimit("memlimit-compress",
 					"memlimit-compress%", optarg,
 					true, false, false);
 			break;
 
 		// --memlimit-decompress
 		case OPT_MEM_DECOMPRESS:
 			parse_memlimit("memlimit-decompress",
 					"memlimit-decompress%", optarg,
 					false, true, false);
 			break;
 
 		// --memlimit-mt-decompress
 		case OPT_MEM_MT_DECOMPRESS:
 			parse_memlimit("memlimit-mt-decompress",
 					"memlimit-mt-decompress%", optarg,
 					false, false, true);
 			break;
 
 		// --memlimit
 		case 'M':
 			parse_memlimit("memlimit", "memlimit%", optarg,
 					true, true, true);
 			break;
 
 		// --suffix
 		case 'S':
 			suffix_set(optarg);
 			break;
 
 		case 'T': {
 			// Since xz 5.4.0: Ignore leading '+' first.
 			const char *s = optarg;
 			if (optarg[0] == '+')
 				++s;
 
 			// The max is from src/liblzma/common/common.h.
 			uint32_t t = str_to_uint64("threads", s, 0, 16384);
 
 			// If leading '+' was used then use multi-threaded
 			// mode even if exactly one thread was specified.
 			if (t == 1 && optarg[0] == '+')
 				t = UINT32_MAX;
 
 			hardware_threads_set(t);
 			break;
 		}
 
 		// --version
 		case 'V':
 			// This doesn't return.
 			message_version();
 
 		// --stdout
 		case 'c':
 			opt_stdout = true;
 			break;
 
 		// --decompress
 		case 'd':
 			opt_mode = MODE_DECOMPRESS;
 			break;
 
 		// --extreme
 		case 'e':
 			coder_set_extreme();
 			break;
 
 		// --force
 		case 'f':
 			opt_force = true;
 			break;
 
 		// --info-memory
 		case OPT_INFO_MEMORY:
 			// This doesn't return.
 			hardware_memlimit_show();
 
 		// --help
 		case 'h':
 			// This doesn't return.
 			message_help(false);
 
 		// --long-help
 		case 'H':
 			// This doesn't return.
 			message_help(true);
 
 		// --list
 		case 'l':
 			opt_mode = MODE_LIST;
 			break;
 
 		// --keep
 		case 'k':
 			opt_keep_original = true;
 			break;
 
 		// --quiet
 		case 'q':
 			message_verbosity_decrease();
 			break;
 
 		case 'Q':
 			set_exit_no_warn();
 			break;
 
 		case 't':
 			opt_mode = MODE_TEST;
 			break;
 
 		// --verbose
 		case 'v':
 			message_verbosity_increase();
 			break;
 
 		// --robot
 		case OPT_ROBOT:
 			opt_robot = true;
 
 			// This is to make sure that floating point numbers
 			// always have a dot as decimal separator.
 			setlocale(LC_NUMERIC, "C");
 			break;
 
 		case 'z':
 			opt_mode = MODE_COMPRESS;
 			break;
 
 		// Filter setup
 
 		case OPT_X86:
 			coder_add_filter(LZMA_FILTER_X86,
 					options_bcj(optarg));
 			break;
 
 		case OPT_POWERPC:
 			coder_add_filter(LZMA_FILTER_POWERPC,
 					options_bcj(optarg));
 			break;
 
 		case OPT_IA64:
 			coder_add_filter(LZMA_FILTER_IA64,
 					options_bcj(optarg));
 			break;
 
 		case OPT_ARM:
 			coder_add_filter(LZMA_FILTER_ARM,
 					options_bcj(optarg));
 			break;
 
 		case OPT_ARMTHUMB:
 			coder_add_filter(LZMA_FILTER_ARMTHUMB,
 					options_bcj(optarg));
 			break;
 
 		case OPT_ARM64:
 			coder_add_filter(LZMA_FILTER_ARM64,
 					options_bcj(optarg));
 			break;
 
 		case OPT_SPARC:
 			coder_add_filter(LZMA_FILTER_SPARC,
 					options_bcj(optarg));
 			break;
 
 		case OPT_DELTA:
 			coder_add_filter(LZMA_FILTER_DELTA,
 					options_delta(optarg));
 			break;
 
 		case OPT_LZMA1:
 			coder_add_filter(LZMA_FILTER_LZMA1,
 					options_lzma(optarg));
 			break;
 
 		case OPT_LZMA2:
 			coder_add_filter(LZMA_FILTER_LZMA2,
 					options_lzma(optarg));
 			break;
 
 		// Other
 
 		// --format
 		case 'F': {
 			// Just in case, support both "lzma" and "alone" since
 			// the latter was used for forward compatibility in
 			// LZMA Utils 4.32.x.
 			static const struct {
 				char str[8];
 				enum format_type format;
 			} types[] = {
 				{ "auto",   FORMAT_AUTO },
 				{ "xz",     FORMAT_XZ },
 				{ "lzma",   FORMAT_LZMA },
 				{ "alone",  FORMAT_LZMA },
 #ifdef HAVE_LZIP_DECODER
 				{ "lzip",   FORMAT_LZIP },
 #endif
 				{ "raw",    FORMAT_RAW },
 			};
 
 			size_t i = 0;
 			while (strcmp(types[i].str, optarg) != 0)
 				if (++i == ARRAY_SIZE(types))
 					message_fatal(_("%s: Unknown file "
 							"format type"),
 							optarg);
 
 			opt_format = types[i].format;
 			break;
 		}
 
 		// --check
 		case 'C': {
 			static const struct {
 				char str[8];
 				lzma_check check;
 			} types[] = {
 				{ "none",   LZMA_CHECK_NONE },
 				{ "crc32",  LZMA_CHECK_CRC32 },
 				{ "crc64",  LZMA_CHECK_CRC64 },
 				{ "sha256", LZMA_CHECK_SHA256 },
 			};
 
 			size_t i = 0;
 			while (strcmp(types[i].str, optarg) != 0) {
 				if (++i == ARRAY_SIZE(types))
 					message_fatal(_("%s: Unsupported "
 							"integrity "
 							"check type"), optarg);
 			}
 
 			// Use a separate check in case we are using different
 			// liblzma than what was used to compile us.
 			if (!lzma_check_is_supported(types[i].check))
 				message_fatal(_("%s: Unsupported integrity "
 						"check type"), optarg);
 
 			coder_set_check(types[i].check);
 			break;
 		}
 
 		case OPT_IGNORE_CHECK:
 			opt_ignore_check = true;
 			break;
 
 		case OPT_BLOCK_SIZE:
 			opt_block_size = str_to_uint64("block-size", optarg,
 					0, LZMA_VLI_MAX);
 			break;
 
 		case OPT_BLOCK_LIST: {
 			parse_block_list(optarg);
 			break;
 		}
 
 		case OPT_SINGLE_STREAM:
 			opt_single_stream = true;
 			break;
 
 		case OPT_NO_SPARSE:
 			io_no_sparse();
 			break;
 
 		case OPT_FILES:
 			args->files_delim = '\n';
 
 		// Fall through
 
 		case OPT_FILES0:
 			if (args->files_name != NULL)
 				message_fatal(_("Only one file can be "
 						"specified with `--files' "
 						"or `--files0'."));
 
 			if (optarg == NULL) {
 				args->files_name = stdin_filename;
 				args->files_file = stdin;
 			} else {
 				args->files_name = optarg;
 				args->files_file = fopen(optarg,
 						c == OPT_FILES ? "r" : "rb");
 				if (args->files_file == NULL)
 					message_fatal("%s: %s", optarg,
 							strerror(errno));
 			}
 
 			break;
 
 		case OPT_NO_ADJUST:
 			opt_auto_adjust = false;
 			break;
 
 		case OPT_FLUSH_TIMEOUT:
 			opt_flush_timeout = str_to_uint64("flush-timeout",
 					optarg, 0, UINT64_MAX);
 			break;
 
 		default:
 			message_try_help();
 			tuklib_exit(E_ERROR, E_ERROR, false);
 		}
 	}
 
 	return;
 }
 
 
 static void
 parse_environment(args_info *args, char *argv0, const char *varname)
 {
 	char *env = getenv(varname);
 	if (env == NULL)
 		return;
 
 	// We modify the string, so make a copy of it.
 	env = xstrdup(env);
 
 	// Calculate the number of arguments in env. argc stats at one
 	// to include space for the program name.
 	int argc = 1;
 	bool prev_was_space = true;
 	for (size_t i = 0; env[i] != '\0'; ++i) {
 		// NOTE: Cast to unsigned char is needed so that correct
 		// value gets passed to isspace(), which expects
 		// unsigned char cast to int. Casting to int is done
 		// automatically due to integer promotion, but we need to
 		// force char to unsigned char manually. Otherwise 8-bit
 		// characters would get promoted to wrong value if
 		// char is signed.
 		if (isspace((unsigned char)env[i])) {
 			prev_was_space = true;
 		} else if (prev_was_space) {
 			prev_was_space = false;
 
 			// Keep argc small enough to fit into a signed int
 			// and to keep it usable for memory allocation.
 			if (++argc == my_min(
 					INT_MAX, SIZE_MAX / sizeof(char *)))
 				message_fatal(_("The environment variable "
 						"%s contains too many "
 						"arguments"), varname);
 		}
 	}
 
 	// Allocate memory to hold pointers to the arguments. Add one to get
 	// space for the terminating NULL (if some systems happen to need it).
 	char **argv = xmalloc(((size_t)(argc) + 1) * sizeof(char *));
 	argv[0] = argv0;
 	argv[argc] = NULL;
 
 	// Go through the string again. Split the arguments using '\0'
 	// characters and add pointers to the resulting strings to argv.
 	argc = 1;
 	prev_was_space = true;
 	for (size_t i = 0; env[i] != '\0'; ++i) {
 		if (isspace((unsigned char)env[i])) {
 			prev_was_space = true;
 			env[i] = '\0';
 		} else if (prev_was_space) {
 			prev_was_space = false;
 			argv[argc++] = env + i;
 		}
 	}
 
 	// Parse the argument list we got from the environment. All non-option
 	// arguments i.e. filenames are ignored.
 	parse_real(args, argc, argv);
 
 	// Reset the state of the getopt_long() so that we can parse the
 	// command line options too. There are two incompatible ways to
 	// do it.
 #ifdef HAVE_OPTRESET
 	// BSD
 	optind = 1;
 	optreset = 1;
 #else
 	// GNU, Solaris
 	optind = 0;
 #endif
 
 	// We don't need the argument list from environment anymore.
 	free(argv);
 	free(env);
 
 	return;
 }
 
 
 extern void
 args_parse(args_info *args, int argc, char **argv)
 {
 	// Initialize those parts of *args that we need later.
 	args->files_name = NULL;
 	args->files_file = NULL;
 	args->files_delim = '\0';
 
 	// Check how we were called.
 	{
 		// Remove the leading path name, if any.
 		const char *name = strrchr(argv[0], '/');
 		if (name == NULL)
 			name = argv[0];
 		else
 			++name;
 
 		// NOTE: It's possible that name[0] is now '\0' if argv[0]
 		// is weird, but it doesn't matter here.
 
 		// Look for full command names instead of substrings like
 		// "un", "cat", and "lz" to reduce possibility of false
 		// positives when the programs have been renamed.
 		if (strstr(name, "xzcat") != NULL) {
 			opt_mode = MODE_DECOMPRESS;
 			opt_stdout = true;
 		} else if (strstr(name, "unxz") != NULL) {
 			opt_mode = MODE_DECOMPRESS;
 		} else if (strstr(name, "lzcat") != NULL) {
 			opt_format = FORMAT_LZMA;
 			opt_mode = MODE_DECOMPRESS;
 			opt_stdout = true;
 		} else if (strstr(name, "unlzma") != NULL) {
 			opt_format = FORMAT_LZMA;
 			opt_mode = MODE_DECOMPRESS;
 		} else if (strstr(name, "lzma") != NULL) {
 			opt_format = FORMAT_LZMA;
 		}
 	}
 
 	// First the flags from the environment
 	parse_environment(args, argv[0], "XZ_DEFAULTS");
 	parse_environment(args, argv[0], "XZ_OPT");
 
 	// Then from the command line
 	parse_real(args, argc, argv);
 
 	// If encoder or decoder support was omitted at build time,
 	// show an error now so that the rest of the code can rely on
 	// that whatever is in opt_mode is also supported.
 #ifndef HAVE_ENCODERS
 	if (opt_mode == MODE_COMPRESS)
 		message_fatal(_("Compression support was disabled "
 				"at build time"));
 #endif
 #ifndef HAVE_DECODERS
 	// Even MODE_LIST cannot work without decoder support so MODE_COMPRESS
 	// is the only valid choice.
 	if (opt_mode != MODE_COMPRESS)
 		message_fatal(_("Decompression support was disabled "
 				"at build time"));
 #endif
 
 #ifdef HAVE_LZIP_DECODER
 	if (opt_mode == MODE_COMPRESS && opt_format == FORMAT_LZIP)
 		message_fatal(_("Compression of lzip files (.lz) "
 				"is not supported"));
 #endif
 
 	// Never remove the source file when the destination is not on disk.
 	// In test mode the data is written nowhere, but setting opt_stdout
 	// will make the rest of the code behave well.
 	if (opt_stdout || opt_mode == MODE_TEST) {
 		opt_keep_original = true;
 		opt_stdout = true;
 	}
 
 	// When compressing, if no --format flag was used, or it
 	// was --format=auto, we compress to the .xz format.
 	if (opt_mode == MODE_COMPRESS && opt_format == FORMAT_AUTO)
 		opt_format = FORMAT_XZ;
 
 	// Compression settings need to be validated (options themselves and
 	// their memory usage) when compressing to any file format. It has to
 	// be done also when uncompressing raw data, since for raw decoding
 	// the options given on the command line are used to know what kind
 	// of raw data we are supposed to decode.
 	if (opt_mode == MODE_COMPRESS || (opt_format == FORMAT_RAW
 			&& opt_mode != MODE_LIST))
 		coder_set_compression_settings();
 
+	// If raw format is used and a custom suffix is not provided,
+	// then only stdout mode can be used when compressing or decompressing.
+	if (opt_format == FORMAT_RAW && suffix_is_set() && !opt_stdout &&
+			(opt_mode == MODE_COMPRESS ||
+			opt_mode == MODE_DECOMPRESS))
+		message_fatal(_("With --format=raw, --suffix=.SUF is "
+				"required unless writing to stdout"));
+
 	// If no filenames are given, use stdin.
 	if (argv[optind] == NULL && args->files_name == NULL) {
 		// We don't modify or free() the "-" constant. The caller
 		// modifies this so don't make the struct itself const.
 		static char *names_stdin[2] = { (char *)"-", NULL };
 		args->arg_names = names_stdin;
 		args->arg_count = 1;
 	} else {
 		// We got at least one filename from the command line, or
 		// --files or --files0 was specified.
 		args->arg_names = argv + optind;
 		args->arg_count = (unsigned int)(argc - optind);
 	}
 
 	return;
 }
 
 
 #ifndef NDEBUG
 extern void
 args_free(void)
 {
 	free(opt_block_list);
 	return;
 }
 #endif
diff --git a/src/xz/suffix.c b/src/xz/suffix.c
index 09add381..a9cdbd8a 100644
--- a/src/xz/suffix.c
+++ b/src/xz/suffix.c
@@ -1,411 +1,401 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       suffix.c
 /// \brief      Checks filename suffix and creates the destination filename
 //
 //  Author:     Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "private.h"
 
 #ifdef __DJGPP__
 #	include <fcntl.h>
 #endif
 
 // For case-insensitive filename suffix on case-insensitive systems
 #if defined(TUKLIB_DOSLIKE) || defined(__VMS)
 #	ifdef HAVE_STRINGS_H
 #		include <strings.h>
 #	endif
 #	define strcmp strcasecmp
 #endif
 
 
 static char *custom_suffix = NULL;
 
 
 /// \brief      Test if the char is a directory separator
 static bool
 is_dir_sep(char c)
 {
 #ifdef TUKLIB_DOSLIKE
 	return c == '/' || c == '\\' || c == ':';
 #else
 	return c == '/';
 #endif
 }
 
 
 /// \brief      Test if the string contains a directory separator
 static bool
 has_dir_sep(const char *str)
 {
 #ifdef TUKLIB_DOSLIKE
 	return strpbrk(str, "/\\:") != NULL;
 #else
 	return strchr(str, '/') != NULL;
 #endif
 }
 
 
 #ifdef __DJGPP__
 /// \brief      Test for special suffix used for 8.3 short filenames (SFN)
 ///
 /// \return     If str matches *.?- or *.??-, true is returned. Otherwise
 ///             false is returned.
 static bool
 has_sfn_suffix(const char *str, size_t len)
 {
 	if (len >= 4 && str[len - 1] == '-' && str[len - 2] != '.'
 			&& !is_dir_sep(str[len - 2])) {
 		// *.?-
 		if (str[len - 3] == '.')
 			return !is_dir_sep(str[len - 4]);
 
 		// *.??-
 		if (len >= 5 && !is_dir_sep(str[len - 3])
 				&& str[len - 4] == '.')
 			return !is_dir_sep(str[len - 5]);
 	}
 
 	return false;
 }
 #endif
 
 
 /// \brief      Checks if src_name has given compressed_suffix
 ///
 /// \param      suffix      Filename suffix to look for
 /// \param      src_name    Input filename
 /// \param      src_len     strlen(src_name)
 ///
 /// \return     If src_name has the suffix, src_len - strlen(suffix) is
 ///             returned. It's always a positive integer. Otherwise zero
 ///             is returned.
 static size_t
 test_suffix(const char *suffix, const char *src_name, size_t src_len)
 {
 	const size_t suffix_len = strlen(suffix);
 
 	// The filename must have at least one character in addition to
 	// the suffix. src_name may contain path to the filename, so we
 	// need to check for directory separator too.
 	if (src_len <= suffix_len
 			|| is_dir_sep(src_name[src_len - suffix_len - 1]))
 		return 0;
 
 	if (strcmp(suffix, src_name + src_len - suffix_len) == 0)
 		return src_len - suffix_len;
 
 	return 0;
 }
 
 
 /// \brief      Removes the filename suffix of the compressed file
 ///
 /// \return     Name of the uncompressed file, or NULL if file has unknown
 ///             suffix.
 static char *
 uncompressed_name(const char *src_name, const size_t src_len)
 {
 	static const struct {
 		const char *compressed;
 		const char *uncompressed;
 	} suffixes[] = {
 		{ ".xz",    "" },
 		{ ".txz",   ".tar" }, // .txz abbreviation for .txt.gz is rare.
 		{ ".lzma",  "" },
 #ifdef __DJGPP__
 		{ ".lzm",   "" },
 #endif
 		{ ".tlz",   ".tar" }, // Both .tar.lzma and .tar.lz
 #ifdef HAVE_LZIP_DECODER
 		{ ".lz",    "" },
 #endif
 	};
 
 	const char *new_suffix = "";
 	size_t new_len = 0;
 
-	if (opt_format == FORMAT_RAW) {
-		// Don't check for known suffixes when --format=raw was used.
-		if (custom_suffix == NULL) {
-			message_error(_("%s: With --format=raw, "
-					"--suffix=.SUF is required unless "
-					"writing to stdout"), src_name);
-			return NULL;
-		}
-	} else {
+	if (opt_format != FORMAT_RAW) {
 		for (size_t i = 0; i < ARRAY_SIZE(suffixes); ++i) {
 			new_len = test_suffix(suffixes[i].compressed,
 					src_name, src_len);
 			if (new_len != 0) {
 				new_suffix = suffixes[i].uncompressed;
 				break;
 			}
 		}
 
 #ifdef __DJGPP__
 		// Support also *.?- -> *.? and *.??- -> *.?? on DOS.
 		// This is done also when long filenames are available
 		// to keep it easy to decompress files created when
 		// long filename support wasn't available.
 		if (new_len == 0 && has_sfn_suffix(src_name, src_len)) {
 			new_suffix = "";
 			new_len = src_len - 1;
 		}
 #endif
 	}
 
 	if (new_len == 0 && custom_suffix != NULL)
 		new_len = test_suffix(custom_suffix, src_name, src_len);
 
 	if (new_len == 0) {
 		message_warning(_("%s: Filename has an unknown suffix, "
 				"skipping"), src_name);
 		return NULL;
 	}
 
 	const size_t new_suffix_len = strlen(new_suffix);
 	char *dest_name = xmalloc(new_len + new_suffix_len + 1);
 
 	memcpy(dest_name, src_name, new_len);
 	memcpy(dest_name + new_len, new_suffix, new_suffix_len);
 	dest_name[new_len + new_suffix_len] = '\0';
 
 	return dest_name;
 }
 
 
 /// This message is needed in multiple places in compressed_name(),
 /// so the message has been put into its own function.
 static void
 msg_suffix(const char *src_name, const char *suffix)
 {
 	message_warning(_("%s: File already has `%s' suffix, skipping"),
 			src_name, suffix);
 	return;
 }
 
 
 /// \brief      Appends suffix to src_name
 ///
 /// In contrast to uncompressed_name(), we check only suffixes that are valid
 /// for the specified file format.
 static char *
 compressed_name(const char *src_name, size_t src_len)
 {
 	// The order of these must match the order in args.h.
 	static const char *const all_suffixes[][4] = {
 		{
 			".xz",
 			".txz",
 			NULL
 		}, {
 			".lzma",
 #ifdef __DJGPP__
 			".lzm",
 #endif
 			".tlz",
 			NULL
 #ifdef HAVE_LZIP_DECODER
 		// This is needed to keep the table indexing in sync with
 		// enum format_type from coder.h.
 		}, {
 /*
 			".lz",
 */
 			NULL
 #endif
 		}, {
 			// --format=raw requires specifying the suffix
 			// manually or using stdout.
 			NULL
 		}
 	};
 
 	// args.c ensures these.
 	assert(opt_format != FORMAT_AUTO);
 #ifdef HAVE_LZIP_DECODER
 	assert(opt_format != FORMAT_LZIP);
 #endif
 
 	const size_t format = opt_format - 1;
 	const char *const *suffixes = all_suffixes[format];
 
 	// Look for known filename suffixes and refuse to compress them.
 	for (size_t i = 0; suffixes[i] != NULL; ++i) {
 		if (test_suffix(suffixes[i], src_name, src_len) != 0) {
 			msg_suffix(src_name, suffixes[i]);
 			return NULL;
 		}
 	}
 
 #ifdef __DJGPP__
 	// Recognize also the special suffix that is used when long
 	// filename (LFN) support isn't available. This suffix is
 	// recognized on LFN systems too.
 	if (opt_format == FORMAT_XZ && has_sfn_suffix(src_name, src_len)) {
 		msg_suffix(src_name, "-");
 		return NULL;
 	}
 #endif
 
 	if (custom_suffix != NULL) {
 		if (test_suffix(custom_suffix, src_name, src_len) != 0) {
 			msg_suffix(src_name, custom_suffix);
 			return NULL;
 		}
 	}
 
-	// TODO: Hmm, maybe it would be better to validate this in args.c,
-	// since the suffix handling when decoding is weird now.
-	if (opt_format == FORMAT_RAW && custom_suffix == NULL) {
-		message_error(_("%s: With --format=raw, "
-				"--suffix=.SUF is required unless "
-				"writing to stdout"), src_name);
-		return NULL;
-	}
-
 	const char *suffix = custom_suffix != NULL
 			? custom_suffix : suffixes[0];
 	size_t suffix_len = strlen(suffix);
 
 #ifdef __DJGPP__
 	if (!_use_lfn(src_name)) {
 		// Long filename (LFN) support isn't available and we are
 		// limited to 8.3 short filenames (SFN).
 		//
 		// Look for suffix separator from the filename, and make sure
 		// that it is in the filename, not in a directory name.
 		const char *sufsep = strrchr(src_name, '.');
 		if (sufsep == NULL || sufsep[1] == '\0'
 				|| has_dir_sep(sufsep)) {
 			// src_name has no filename extension.
 			//
 			// Examples:
 			// xz foo         -> foo.xz
 			// xz -F lzma foo -> foo.lzm
 			// xz -S x foo    -> foox
 			// xz -S x foo.   -> foo.x
 			// xz -S x.y foo  -> foox.y
 			// xz -S .x foo   -> foo.x
 			// xz -S .x foo.  -> foo.x
 			//
 			// Avoid double dots:
 			if (sufsep != NULL && sufsep[1] == '\0'
 					&& suffix[0] == '.')
 				--src_len;
 
 		} else if (custom_suffix == NULL
 				&& strcasecmp(sufsep, ".tar") == 0) {
 			// ".tar" is handled specially.
 			//
 			// Examples:
 			// xz foo.tar          -> foo.txz
 			// xz -F lzma foo.tar  -> foo.tlz
 			static const char *const tar_suffixes[] = {
 				".txz", // .tar.xz
 				".tlz", // .tar.lzma
 /*
 				".tlz", // .tar.lz
 */
 			};
 			suffix = tar_suffixes[format];
 			suffix_len = 4;
 			src_len -= 4;
 
 		} else {
 			if (custom_suffix == NULL && opt_format == FORMAT_XZ) {
 				// Instead of the .xz suffix, use a single
 				// character at the end of the filename
 				// extension. This is to minimize name
 				// conflicts when compressing multiple files
 				// with the same basename. E.g. foo.txt and
 				// foo.exe become foo.tx- and foo.ex-. Dash
 				// is rare as the last character of the
 				// filename extension, so it seems to be
 				// quite safe choice and it stands out better
 				// in directory listings than e.g. x. For
 				// comparison, gzip uses z.
 				suffix = "-";
 				suffix_len = 1;
 			}
 
 			if (suffix[0] == '.') {
 				// The first character of the suffix is a dot.
 				// Throw away the original filename extension
 				// and replace it with the new suffix.
 				//
 				// Examples:
 				// xz -F lzma foo.txt  -> foo.lzm
 				// xz -S .x  foo.txt   -> foo.x
 				src_len = sufsep - src_name;
 
 			} else {
 				// The first character of the suffix is not
 				// a dot. Preserve the first 0-2 characters
 				// of the original filename extension.
 				//
 				// Examples:
 				// xz foo.txt         -> foo.tx-
 				// xz -S x  foo.c     -> foo.cx
 				// xz -S ab foo.c     -> foo.cab
 				// xz -S ab foo.txt   -> foo.tab
 				// xz -S abc foo.txt  -> foo.abc
 				//
 				// Truncate the suffix to three chars:
 				if (suffix_len > 3)
 					suffix_len = 3;
 
 				// If needed, overwrite 1-3 characters.
 				if (strlen(sufsep) > 4 - suffix_len)
 					src_len = sufsep - src_name
 							+ 4 - suffix_len;
 			}
 		}
 	}
 #endif
 
 	char *dest_name = xmalloc(src_len + suffix_len + 1);
 
 	memcpy(dest_name, src_name, src_len);
 	memcpy(dest_name + src_len, suffix, suffix_len);
 	dest_name[src_len + suffix_len] = '\0';
 
 	return dest_name;
 }
 
 
 extern char *
 suffix_get_dest_name(const char *src_name)
 {
 	assert(src_name != NULL);
 
 	// Length of the name is needed in all cases to locate the end of
 	// the string to compare the suffix, so calculate the length here.
 	const size_t src_len = strlen(src_name);
 
 	return opt_mode == MODE_COMPRESS
 			? compressed_name(src_name, src_len)
 			: uncompressed_name(src_name, src_len);
 }
 
 
 extern void
 suffix_set(const char *suffix)
 {
 	// Empty suffix and suffixes having a directory separator are
 	// rejected. Such suffixes would break things later.
 	if (suffix[0] == '\0' || has_dir_sep(suffix))
 		message_fatal(_("%s: Invalid filename suffix"), suffix);
 
 	// Replace the old custom_suffix (if any) with the new suffix.
 	free(custom_suffix);
 	custom_suffix = xstrdup(suffix);
 	return;
 }
+
+
+extern bool
+suffix_is_set(void)
+{
+	return custom_suffix == NULL;
+}
diff --git a/src/xz/suffix.h b/src/xz/suffix.h
index 5537d732..cb36dd61 100644
--- a/src/xz/suffix.h
+++ b/src/xz/suffix.h
@@ -1,28 +1,35 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       suffix.h
 /// \brief      Checks filename suffix and creates the destination filename
 //
 //  Author:     Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 /// \brief      Get the name of the destination file
 ///
 /// Depending on the global variable opt_mode, this tries to find a matching
 /// counterpart for src_name. If the name can be constructed, it is allocated
 /// and returned (caller must free it). On error, a message is printed and
 /// NULL is returned.
 extern char *suffix_get_dest_name(const char *src_name);
 
 
 /// \brief      Set a custom filename suffix
 ///
 /// This function calls xstrdup() for the given suffix, thus the caller
 /// doesn't need to keep the memory allocated. There can be only one custom
 /// suffix, thus if this is called multiple times, the old suffixes are freed
 /// and forgotten.
 extern void suffix_set(const char *suffix);
+
+/// \brief      Check if a custom suffix has been set
+///
+/// Returns true if the internal tracking of the suffix string has been set
+/// and false if the string has not been set. This will keep the suffix
+/// string encapsulated instead of extern-ing the variable.
+extern bool suffix_is_set(void);