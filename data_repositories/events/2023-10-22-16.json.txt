{"id":"32752758825","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15518600726,"size":6,"distinct_size":6,"ref":"refs/heads/master","head":"c57858b60e186d020b2dbaf7aabd9b32c71da824","before":"988e09f27b9b04a43d45d10f92782e0092ee27a9","commits":[{"sha":"cdb4d91f2464b50c985ef7b9517314ea237ddda7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Use GetTickCount64() with MinGW-w64 if using Vista threads.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/cdb4d91f2464b50c985ef7b9517314ea237ddda7"},{"sha":"46fd991cd2808ef62554853864c946232e7547f0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Ensure that clock_gettime() isn't used with MinGW-w64.\n\nThis commit alone doesn't change anything in the real-world:\n\n  - configure.ac currently checks for clock_gettime() only\n    when using pthreads.\n\n  - CMakeLists.txt doesn't check for clock_gettime() on Windows.\n\nSo clock_gettime() wasn't used with MinGW-w64 before either.\n\nclock_gettime() provides monotonic time and it's better than\ngettimeofday() in this sense. But clock_gettime() is defined\nin winpthreads, and liblzma or xz needs nothing else from\nwinpthreads. By avoiding clock_gettime(), we avoid the dependency on\nlibwinpthread-1.dll or the need to link against the static version.\n\nAs a bonus, GetTickCount64() and MinGW-w64's gettimeofday() can be\nfaster than clock_gettime(CLOCK_MONOTONIC, &tv). The resolution\nis more than good enough for the progress indicator in xz.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/46fd991cd2808ef62554853864c946232e7547f0"},{"sha":"1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Check for clock_gettime() even if not using POSIX threads.\n\nSee the new comment in the code.\n\nThis also makes the check for clock_gettime() run with MinGW-w64\nwith which we don't want to use clock_gettime(). The previous\ncommit already took care of this situation.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419"},{"sha":"680e52cdd086e92691d8a0bca2c98815565f60ca","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Check for clock_gettime() even on Windows.\n\nThis mirrors configure.ac although currently MinGW-w64 builds\ndon't use clock_gettime() even if it is found.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/680e52cdd086e92691d8a0bca2c98815565f60ca"},{"sha":"dd32f628bb5541ef4e8ce66966ef456a1934084c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"mythread.h: Make MYTHREAD_POSIX compatible with MinGW-w64's winpthreads.\n\nThis might be almost useless but it doesn't need much extra code either.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/dd32f628bb5541ef4e8ce66966ef456a1934084c"},{"sha":"c57858b60e186d020b2dbaf7aabd9b32c71da824","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Allow clock_gettime with POSIX threads.\n\nIf winpthreads are used for threading, it's OK to use clock_gettime()\nfrom winpthreads too.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c57858b60e186d020b2dbaf7aabd9b32c71da824"}]},"public":true,"created_at":"2023-10-22T16:04:18Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32752763881","type":"DeleteEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"ref":"clock_gettime","ref_type":"branch","pusher_type":"user"},"public":true,"created_at":"2023-10-22T16:04:55Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32752767712","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15518606779,"size":13,"distinct_size":7,"ref":"refs/heads/sandbox_update","head":"91c435cf1c7a1e893706d4d716dfd361621ed824","before":"6f4778a6ffc697b54167f6868f2323e033b8ae66","commits":[{"sha":"cdb4d91f2464b50c985ef7b9517314ea237ddda7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Use GetTickCount64() with MinGW-w64 if using Vista threads.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/cdb4d91f2464b50c985ef7b9517314ea237ddda7"},{"sha":"46fd991cd2808ef62554853864c946232e7547f0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Ensure that clock_gettime() isn't used with MinGW-w64.\n\nThis commit alone doesn't change anything in the real-world:\n\n  - configure.ac currently checks for clock_gettime() only\n    when using pthreads.\n\n  - CMakeLists.txt doesn't check for clock_gettime() on Windows.\n\nSo clock_gettime() wasn't used with MinGW-w64 before either.\n\nclock_gettime() provides monotonic time and it's better than\ngettimeofday() in this sense. But clock_gettime() is defined\nin winpthreads, and liblzma or xz needs nothing else from\nwinpthreads. By avoiding clock_gettime(), we avoid the dependency on\nlibwinpthread-1.dll or the need to link against the static version.\n\nAs a bonus, GetTickCount64() and MinGW-w64's gettimeofday() can be\nfaster than clock_gettime(CLOCK_MONOTONIC, &tv). The resolution\nis more than good enough for the progress indicator in xz.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/46fd991cd2808ef62554853864c946232e7547f0"},{"sha":"1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Check for clock_gettime() even if not using POSIX threads.\n\nSee the new comment in the code.\n\nThis also makes the check for clock_gettime() run with MinGW-w64\nwith which we don't want to use clock_gettime(). The previous\ncommit already took care of this situation.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419"},{"sha":"680e52cdd086e92691d8a0bca2c98815565f60ca","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Check for clock_gettime() even on Windows.\n\nThis mirrors configure.ac although currently MinGW-w64 builds\ndon't use clock_gettime() even if it is found.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/680e52cdd086e92691d8a0bca2c98815565f60ca"},{"sha":"dd32f628bb5541ef4e8ce66966ef456a1934084c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"mythread.h: Make MYTHREAD_POSIX compatible with MinGW-w64's winpthreads.\n\nThis might be almost useless but it doesn't need much extra code either.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/dd32f628bb5541ef4e8ce66966ef456a1934084c"},{"sha":"c57858b60e186d020b2dbaf7aabd9b32c71da824","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Allow clock_gettime with POSIX threads.\n\nIf winpthreads are used for threading, it's OK to use clock_gettime()\nfrom winpthreads too.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c57858b60e186d020b2dbaf7aabd9b32c71da824"},{"sha":"2e2cd11535ad77364cf021297e0b3f162fa3a3d0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Simplify detection of Capsicum support.\n\nThis removes support for FreeBSD 10.0 and 10.1 which used\n<sys/capability.h> instead of <sys/capsicum.h>. Support for\nFreeBSD 10.1 ended on 2016-12-31. So now FreeBSD >= 10.2 is\nrequired to enable Capsicum support.\n\nThis also removes support for Capsicum on Linux (libcaprights)\nwhich seems to have been unmaintained since 2017 and Linux 4.11:\nhttps://github.com/google/capsicum-linux","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2e2cd11535ad77364cf021297e0b3f162fa3a3d0"},{"sha":"3f53870c249945d657ca3d75e0993e6267d71f75","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Add sandboxing support.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3f53870c249945d657ca3d75e0993e6267d71f75"},{"sha":"bf011352528ae3539ea7b780b45b96736ee57a99","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Use FATAL_ERROR if user-supplied options aren't understood.\n\nThis way typos are caught quickly and compounding error messages\nare avoided (a single typo could cause more than one error).\n\nThis keeps using SEND_ERROR when the system is lacking a feature\n(like threading library or sandboxing method). This way the whole\nconfiguration log will be generated in case someone wishes to\nreport a problem upstream.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/bf011352528ae3539ea7b780b45b96736ee57a99"},{"sha":"3a1e9fd031b9320d769d63b503ef4e82e1b6ea8c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Edit threading related messages.\n\nIt's mostly to change from \"thread method\" to \"threading method\".","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3a1e9fd031b9320d769d63b503ef4e82e1b6ea8c"},{"sha":"8276c7f41c671eee4aa3239490658b23dcfd3021","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Support basic sandboxing with Linux Landlock (ABI versions 1-3).\n\nIt is enabled only when decompressing one file to stdout,\nsimilar to how Capsicum is used.\n\nLandlock was added in Linux 5.13.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8276c7f41c671eee4aa3239490658b23dcfd3021"},{"sha":"fa1609eb9393ecd30decfed4891c907829f06710","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Docs: Update INSTALL about sandboxing support.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/fa1609eb9393ecd30decfed4891c907829f06710"},{"sha":"91c435cf1c7a1e893706d4d716dfd361621ed824","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Don't shadow the cache entry ENABLE_THREADS with a normal variable.\n\nUsing set(ENABLE_THREADS \"posix\") is confusing because it sets\na new normal variable and leaves the cache entry with the same\nname unchanged. The intent wasn't to change the cache entry so\nthis switches to a different variable name.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/91c435cf1c7a1e893706d4d716dfd361621ed824"}]},"public":true,"created_at":"2023-10-22T16:05:21Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32752781663","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15518616285,"size":8,"distinct_size":2,"ref":"refs/heads/visibility_hidden","head":"980d07c1522bf0f818a53d2ede13f08d8d7831c3","before":"2e9dcfd31afbef5ec2575f3f20cc9f1602dacee2","commits":[{"sha":"cdb4d91f2464b50c985ef7b9517314ea237ddda7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Use GetTickCount64() with MinGW-w64 if using Vista threads.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/cdb4d91f2464b50c985ef7b9517314ea237ddda7"},{"sha":"46fd991cd2808ef62554853864c946232e7547f0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Ensure that clock_gettime() isn't used with MinGW-w64.\n\nThis commit alone doesn't change anything in the real-world:\n\n  - configure.ac currently checks for clock_gettime() only\n    when using pthreads.\n\n  - CMakeLists.txt doesn't check for clock_gettime() on Windows.\n\nSo clock_gettime() wasn't used with MinGW-w64 before either.\n\nclock_gettime() provides monotonic time and it's better than\ngettimeofday() in this sense. But clock_gettime() is defined\nin winpthreads, and liblzma or xz needs nothing else from\nwinpthreads. By avoiding clock_gettime(), we avoid the dependency on\nlibwinpthread-1.dll or the need to link against the static version.\n\nAs a bonus, GetTickCount64() and MinGW-w64's gettimeofday() can be\nfaster than clock_gettime(CLOCK_MONOTONIC, &tv). The resolution\nis more than good enough for the progress indicator in xz.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/46fd991cd2808ef62554853864c946232e7547f0"},{"sha":"1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Check for clock_gettime() even if not using POSIX threads.\n\nSee the new comment in the code.\n\nThis also makes the check for clock_gettime() run with MinGW-w64\nwith which we don't want to use clock_gettime(). The previous\ncommit already took care of this situation.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419"},{"sha":"680e52cdd086e92691d8a0bca2c98815565f60ca","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Check for clock_gettime() even on Windows.\n\nThis mirrors configure.ac although currently MinGW-w64 builds\ndon't use clock_gettime() even if it is found.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/680e52cdd086e92691d8a0bca2c98815565f60ca"},{"sha":"dd32f628bb5541ef4e8ce66966ef456a1934084c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"mythread.h: Make MYTHREAD_POSIX compatible with MinGW-w64's winpthreads.\n\nThis might be almost useless but it doesn't need much extra code either.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/dd32f628bb5541ef4e8ce66966ef456a1934084c"},{"sha":"c57858b60e186d020b2dbaf7aabd9b32c71da824","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Allow clock_gettime with POSIX threads.\n\nIf winpthreads are used for threading, it's OK to use clock_gettime()\nfrom winpthreads too.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c57858b60e186d020b2dbaf7aabd9b32c71da824"},{"sha":"bad5ea59280978def96624c5a7f056ba966aed76","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define lzma_attr_visibility_hidden in common.h.\n\nIn ELF shared libs:\n\n-fvisibility=hidden affects definitions of symbols but not\ndeclarations.[*] This doesn't affect direct calls to functions\ninside liblzma as a linker can replace a call to lzma_foo@plt\nwith a call directly to lzma_foo when -fvisibility=hidden is used.\n\n[*] It has to be like this because otherwise every installed\n    header file would need to explictly set the symbol visibility\n    to default.\n\nWhen accessing extern variables that aren't defined in the\nsame translation unit, compiler assumes that the variable has\nthe default visibility and thus indirection is needed. Unlike\nfunction calls, linker cannot optimize this.\n\nUsing __attribute__((__visibility__(\"hidden\"))) with the extern\nvariable declarations tells the compiler that indirection isn't\nneeded because the definition is in the same shared library.\n\nAbout 15+ years ago, someone told me that it would be good if\nthe CRC tables would be defined in the same translation unit\nas the C code of the CRC functions. While I understood that it\ncould help a tiny amount, I didn't want to change the code because\na separate translation unit for the CRC tables was needed for the\nx86 assembly code anyway. But when visibility attributes are\nsupported, simply marking the extern declaration with a the\nhidden attribute will get identical result. When there are only\na few affected variables, this is trivial to do. I wish I had\nunderstood this back then already.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/bad5ea59280978def96624c5a7f056ba966aed76"},{"sha":"980d07c1522bf0f818a53d2ede13f08d8d7831c3","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use lzma_attr_visibility_hidden on private extern declarations.\n\nThese variables are internal to liblzma and not exposed in the API.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/980d07c1522bf0f818a53d2ede13f08d8d7831c3"}]},"public":true,"created_at":"2023-10-22T16:07:03Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32752816279","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15518640609,"size":31,"distinct_size":8,"ref":"refs/heads/build_werror2","head":"ac4cd8c9a8a8ef15fef24d5333306f43e79c9df6","before":"64d9a85c7c159cbdb6a5e6a7f9a59ea2d2e40a41","commits":[{"sha":"a3ebc2c516b09616638060806c841bd4bcf7bce3","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Define CRC_USE_IFUNC in crc_common.h.\n\nWhen ifunc is supported, we can define a simpler macro instead of\nrepeating the more complex check in both crc32_fast.c and crc64_fast.c.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a3ebc2c516b09616638060806c841bd4bcf7bce3"},{"sha":"8c0f9376f58c0696d5d6719705164d35542dd891","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Create crc_clmul.c.\n\nBoth crc32_clmul() and crc64_clmul() are now exported from\ncrc32_clmul.c as lzma_crc32_clmul() and lzma_crc64_clmul(). This\nensures that is_clmul_supported() (now lzma_is_clmul_supported()) is\nnot duplicated between crc32_fast.c and crc64_fast.c.\n\nAlso, it encapsulates the complexity of the CLMUL implementations into a\nsingle file and reduces the complexity of crc32_fast.c and crc64_fast.c.\nBefore, CLMUL code was present in crc32_fast.c, crc64_fast.c, and\ncrc_common.h.\n\nDuring the conversion, various cleanups were applied to code (thanks to\nLasse Collin) including:\n\n- Require using semicolons with MASK_/L/H/LH macros.\n- Variable typing and const handling improvements.\n- Improvements to comments.\n- Fixes to the pragmas used.\n- Removed unneeded variables.\n- Whitespace improvements.\n- Fixed CRC_USE_GENERIC_FOR_SMALL_INPUTS handling.\n- Silenced warnings and removed the need for some #pragmas","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8c0f9376f58c0696d5d6719705164d35542dd891"},{"sha":"96b663f67c0e738a99ba8f35d9f4ced9add74544","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Refactor CRC comments.\n\nA detailed description of the three dispatch methods was added. Also,\nduplicated comments now only appear in crc32_fast.c or were removed from\nboth crc32_fast.c and crc64_fast.c if they appeared in crc_clmul.c.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/96b663f67c0e738a99ba8f35d9f4ced9add74544"},{"sha":"a5966c276bd6fa975f0389f8a8dc61393de750b0","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Create crc_always_inline macro.\n\nThis macro must be used instead of the inline keyword. On MSVC, it is\na replacement for __forceinline which is an MSVC specific keyword that\nshould not be used with inline (it will issue a warning if it is).\n\nIt does not use a build system check to determine if\n__attribute__((__always_inline__)) since all compilers that can use\nCLMUL extensions (except the special case for MSVC) should support this\nattribute. If this assumption is incorrect then it will result in a bug\nreport instead of silently producing slow code.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a5966c276bd6fa975f0389f8a8dc61393de750b0"},{"sha":"40abd88afcc61a8157fcd12d78d491caeb8e12be","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Add the crc_always_inline macro to crc_simd_body().\n\nForcing this to be inline has a significant speed improvement at the\ncost of a few repeated instructions. The compilers tested on did not\ninline this function since it is large and is used twice in the same\ntranslation unit.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/40abd88afcc61a8157fcd12d78d491caeb8e12be"},{"sha":"e13b7947b92355c334edd594295d3a2c99c4bca1","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Add include guards to crc_common.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e13b7947b92355c334edd594295d3a2c99c4bca1"},{"sha":"27735380491bb5ce0d0f41d5244d89c1d0825f6b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Include common.h in crc_common.h.\n\ncrc_common.h depends on common.h. The headers include common.h except\nwhen there is a reason to not do so.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/27735380491bb5ce0d0f41d5244d89c1d0825f6b"},{"sha":"5ce0f7a48bdf5c3b45430850a4487307afac6143","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC_USE_GENERIC_FOR_SMALL_INPUTS cannot be used with ifunc.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5ce0f7a48bdf5c3b45430850a4487307afac6143"},{"sha":"1c8884f0af28b3a4690bb573cdf3240a8ec73416","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Set the MSVC optimization fix to only cover lzma_crc64_clmul().\n\nAfter testing a 32-bit Release build on MSVC, only lzma_crc64_clmul()\nhas the bug. crc_simd_body() and lzma_crc32_clmul() do not need the\noptimizations disabled.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1c8884f0af28b3a4690bb573cdf3240a8ec73416"},{"sha":"6828242735cbf61b93d140383336e1e51a006f2d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer: Add missing write64be and write64le fallback functions.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6828242735cbf61b93d140383336e1e51a006f2d"},{"sha":"c8f715f1bca4c30db814fcf1fd2fe88b8992ede2","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer: Revise unaligned reads and writes on strict-align archs.\n\nIn XZ Utils context this doesn't matter much because\nunaligned reads and writes aren't used in hot code\nwhen TUKLIB_FAST_UNALIGNED_ACCESS isn't #defined.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c8f715f1bca4c30db814fcf1fd2fe88b8992ede2"},{"sha":"2f81ac852bc5aafc91c8e2adc66b5114761703c4","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Enabled unaligned access by default on PowerPC64LE and some RISC-V.\n\nPowerPC64LE wasn't tested but it seems like a safe change.\nPOWER8 supports unaligned access in little endian mode. Testing\non godbolt.org shows that GCC uses unaligned access by default.\n\nThe RISC-V macro __riscv_misaligned_fast is very new and not\nin any stable compiler release yet.\n\nDocumentation in INSTALL was updated to match.\n\nDocumentation about an autodetection bug when using ARM64 GCC\nwith -mstrict-align was added to INSTALL.\n\nCMake files weren't updated yet.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2f81ac852bc5aafc91c8e2adc66b5114761703c4"},{"sha":"9a78971261bc67622cbd7dae02f6966968ac1393","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"tuklib_integer: Update the CMake test for fast unaligned access.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/9a78971261bc67622cbd7dae02f6966968ac1393"},{"sha":"c60b25569d414bb73b705977a4dd342f8f9f1965","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix -fsanitize=address failure with crc_clmul functions.\n\nAfter forcing crc_simd_body() to always be inlined it caused\n-fsanitize=address to fail for lzma_crc32_clmul() and\nlzma_crc64_clmul(). The __no_sanitize_address__ attribute was added\nto lzma_crc32_clmul() and lzma_crc64_clmul(), but not removed from\ncrc_simd_body(). ASAN and inline functions behavior has changed over\nthe years for GCC specifically, so while strictly required we will\nkeep __attribute__((__no_sanitize_address__)) on crc_simd_body() in\ncase this becomes a requirement in the future.\n\nOlder GCC versions refuse to inline a function with ASAN if the\ncaller and callee do not agree on sanitization flags\n(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89124#c3). If the\nfunction was forced to be inlined, it will not compile if the callee\nfunction has __no_sanitize_address__ but the caller doesn't.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c60b25569d414bb73b705977a4dd342f8f9f1965"},{"sha":"139757170468f0f1fafdf0a8ffa74363d1ea1d0c","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Add ALLOW_CLMUL_CRC option to enable/disable CLMUL.\n\nThe option is enabled by default, but will only be visible to a user\nlisting cache variables or using a CMake GUI application if the\nimmintrin.h header file is found.\n\nThis mirrors our Autotools build --disable-clmul-crc functionality.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/139757170468f0f1fafdf0a8ffa74363d1ea1d0c"},{"sha":"105c7ca90d4152942e0798580a37f736d02faa22","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Remove check for COND_CHECK_CRC32 in check/Makefile.inc.\n\nCurrently crc32 is always enabled, so COND_CHECK_CRC32 must always be\nset. Because of this, it makes the recent change to conditionally\ncompile check/crc_clmul.c appear wrong since that file has CLMUL\nimplementations for both CRC32 and CRC64.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/105c7ca90d4152942e0798580a37f736d02faa22"},{"sha":"988e09f27b9b04a43d45d10f92782e0092ee27a9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Move is_clmul_supported() back to crc_common.h.\n\nThis partially reverts creating crc_clmul.c\n(8c0f9376f58c0696d5d6719705164d35542dd891) where is_clmul_supported()\nwas moved, extern'ed, and renamed to lzma_is_clmul_supported(). This\ncaused a problem when the function call to lzma_is_clmul_supported()\nresults in a call through the PLT. ifunc resolvers run very early in\nthe dynamic loading sequence, so the PLT may not be setup properly at\nthis point. Whether the PLT is used or not for\nlzma_is_clmul_supported() depened upon the compiler-toolchain used and\nflags.\n\nIn liblzma compiled with GCC, for instance, GCC will go through the PLT\nfor function calls internal to liblzma if the version scripts and\nsymbol visibility hiding are not used. If lazy-binding is disabled,\nthen it would have made any program linked with liblzma fail during\ndynamic loading in the ifunc resolver.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/988e09f27b9b04a43d45d10f92782e0092ee27a9"},{"sha":"cdb4d91f2464b50c985ef7b9517314ea237ddda7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Use GetTickCount64() with MinGW-w64 if using Vista threads.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/cdb4d91f2464b50c985ef7b9517314ea237ddda7"},{"sha":"46fd991cd2808ef62554853864c946232e7547f0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz/Windows: Ensure that clock_gettime() isn't used with MinGW-w64.\n\nThis commit alone doesn't change anything in the real-world:\n\n  - configure.ac currently checks for clock_gettime() only\n    when using pthreads.\n\n  - CMakeLists.txt doesn't check for clock_gettime() on Windows.\n\nSo clock_gettime() wasn't used with MinGW-w64 before either.\n\nclock_gettime() provides monotonic time and it's better than\ngettimeofday() in this sense. But clock_gettime() is defined\nin winpthreads, and liblzma or xz needs nothing else from\nwinpthreads. By avoiding clock_gettime(), we avoid the dependency on\nlibwinpthread-1.dll or the need to link against the static version.\n\nAs a bonus, GetTickCount64() and MinGW-w64's gettimeofday() can be\nfaster than clock_gettime(CLOCK_MONOTONIC, &tv). The resolution\nis more than good enough for the progress indicator in xz.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/46fd991cd2808ef62554853864c946232e7547f0"},{"sha":"1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Check for clock_gettime() even if not using POSIX threads.\n\nSee the new comment in the code.\n\nThis also makes the check for clock_gettime() run with MinGW-w64\nwith which we don't want to use clock_gettime(). The previous\ncommit already took care of this situation.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419"}]},"public":true,"created_at":"2023-10-22T16:11:18Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
