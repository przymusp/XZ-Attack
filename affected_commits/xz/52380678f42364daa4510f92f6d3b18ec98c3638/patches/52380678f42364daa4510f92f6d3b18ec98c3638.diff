commit 52380678f42364daa4510f92f6d3b18ec98c3638
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 4 23:58:58 2023 +0800

    Tests: Replace non portable shell parameter expansion
    
    The shell parameter expansion using # and ## is not supported in
    Solaris 10 Bourne shell (/bin/sh). Even though this is POSIX, it is not fully
    portable, so we should avoid it.

diff --git a/tests/create_compress_files.c b/tests/create_compress_files.c
index 797a73e7..76aa3e30 100644
--- a/tests/create_compress_files.c
+++ b/tests/create_compress_files.c
@@ -1,163 +1,163 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
 /// \file       create_compress_files.c
 /// \brief      Creates bunch of test files to be compressed
 ///
 /// Using a test file generator program saves space in the source code
 /// package considerably.
 //
 //  Author:     Lasse Collin
 //
 //  This file has been put into the public domain.
 //  You can do whatever you want with this file.
 //
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "sysdefs.h"
 #include <stdio.h>
 
 
 // If a command-line argument was given, only create the file if its
 // name was specified on the command line. If no args were given then
 // all files are created.
 //
 // Avoid re-creating the test files every time the tests are run.
 #define maybe_create_test(argc, argv, name) \
 do { \
-	if ((argc < 2 || strcmp(argv[1], #name) == 0) \
+	if ((argc < 2 || strcmp(argv[1], "compress_generated_" #name) == 0) \
 			&& !file_exists("compress_generated_" #name)) { \
 		FILE *file = file_create("compress_generated_" #name); \
 		write_ ## name(file); \
 		file_finish(file, "compress_generated_" #name); \
 	} \
 } while (0)
 
 
 static bool
 file_exists(const char *filename)
 {
 	// Trying to be somewhat portable by avoiding stat().
 	FILE *file = fopen(filename, "rb");
 	bool ret;
 
 	if (file != NULL) {
 		fclose(file);
 		ret = true;
 	} else {
 		ret = false;
 	}
 
 	return ret;
 }
 
 
 static FILE *
 file_create(const char *filename)
 {
 	FILE *file = fopen(filename, "wb");
 
 	if (file == NULL) {
 		perror(filename);
 		exit(EXIT_FAILURE);
 	}
 
 	return file;
 }
 
 
 static void
 file_finish(FILE *file, const char *filename)
 {
 	const bool ferror_fail = ferror(file);
 	const bool fclose_fail = fclose(file);
 
 	if (ferror_fail || fclose_fail) {
 		perror(filename);
 		exit(EXIT_FAILURE);
 	}
 }
 
 
 // File that repeats "abc\n" a few thousand times. This is targeted
 // especially at Subblock filter's run-length encoder.
 static void
 write_abc(FILE *file)
 {
 	for (size_t i = 0; i < 12345; ++i)
 		if (fwrite("abc\n", 4, 1, file) != 1)
 			exit(EXIT_FAILURE);
 }
 
 
 // File that doesn't compress. We always use the same random seed to
 // generate identical files on all systems.
 static void
 write_random(FILE *file)
 {
 	uint32_t n = 5;
 
 	for (size_t i = 0; i < 123456; ++i) {
 		n = 101771 * n + 71777;
 
 		putc((uint8_t)(n), file);
 		putc((uint8_t)(n >> 8), file);
 		putc((uint8_t)(n >> 16), file);
 		putc((uint8_t)(n >> 24), file);
 	}
 }
 
 
 // Text file
 static void
 write_text(FILE *file)
 {
 	static const char *lorem[] = {
 		"Lorem", "ipsum", "dolor", "sit", "amet,", "consectetur",
 		"adipisicing", "elit,", "sed", "do", "eiusmod", "tempor",
 		"incididunt", "ut", "labore", "et", "dolore", "magna",
 		"aliqua.", "Ut", "enim", "ad", "minim", "veniam,", "quis",
 		"nostrud", "exercitation", "ullamco", "laboris", "nisi",
 		"ut", "aliquip", "ex", "ea", "commodo", "consequat.",
 		"Duis", "aute", "irure", "dolor", "in", "reprehenderit",
 		"in", "voluptate", "velit", "esse", "cillum", "dolore",
 		"eu", "fugiat", "nulla", "pariatur.", "Excepteur", "sint",
 		"occaecat", "cupidatat", "non", "proident,", "sunt", "in",
 		"culpa", "qui", "officia", "deserunt", "mollit", "anim",
 		"id", "est", "laborum."
 	};
 
 	// Let the first paragraph be the original text.
 	for (size_t w = 0; w < ARRAY_SIZE(lorem); ++w) {
 		fprintf(file, "%s ", lorem[w]);
 
 		if (w % 7 == 6)
 			fprintf(file, "\n");
 	}
 
 	// The rest shall be (hopefully) meaningless combinations of
 	// the same words.
 	uint32_t n = 29;
 
 	for (size_t p = 0; p < 500; ++p) {
 		fprintf(file, "\n\n");
 
 		for (size_t w = 0; w < ARRAY_SIZE(lorem); ++w) {
 			n = 101771 * n + 71777;
 
 			fprintf(file, "%s ", lorem[n % ARRAY_SIZE(lorem)]);
 
 			if (w % 7 == 6)
 				fprintf(file, "\n");
 		}
 	}
 }
 
 
 int
 main(int argc, char **argv)
 {
 	maybe_create_test(argc, argv, abc);
 	maybe_create_test(argc, argv, random);
 	maybe_create_test(argc, argv, text);
 	return EXIT_SUCCESS;
 }
diff --git a/tests/test_compress.sh b/tests/test_compress.sh
index 0692a8b1..361903a7 100755
--- a/tests/test_compress.sh
+++ b/tests/test_compress.sh
@@ -1,141 +1,147 @@
 #!/bin/sh
 
 ###############################################################################
 #
 # Author: Lasse Collin
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 ###############################################################################
 
 # If xz wasn't built, this test is skipped.
 if test -x ../src/xz/xz ; then
 	:
 else
 	exit 77
 fi
 
 # If compression or decompression support is missing, this test is skipped.
 # This isn't perfect as if only some compressors or decompressors are disabled
 # then this script can still fail because for now this doesn't check the
 # availability of each filter.
 if grep 'define HAVE_ENCODERS' ../config.h > /dev/null \
 		&& grep 'define HAVE_DECODERS' ../config.h > /dev/null ; then
 	:
 else
 	echo "Compression or decompression support is disabled, skipping this test."
 	exit 77
 fi
 
 # Find out if our shell supports functions.
 eval 'unset foo ; foo() { return 42; } ; foo'
 if test $? != 42 ; then
 	echo "/bin/sh doesn't support functions, skipping this test."
 	exit 77
 fi
 
 test_xz() {
 	if $XZ -c "$@" "$FILE" > "$TMP_COMP"; then
 		:
 	else
 		echo "Compressing failed: $* $FILE"
 		exit 1
 	fi
 
 	if $XZ -cd "$TMP_COMP" > "$TMP_UNCOMP" ; then
 		:
 	else
 		echo "Decompressing failed: $* $FILE"
 		exit 1
 	fi
 
 	if cmp "$TMP_UNCOMP" "$FILE" ; then
 		:
 	else
 		echo "Decompressed file does not match" \
 				"the original: $* $FILE"
 		exit 1
 	fi
 
 	if test -n "$XZDEC" ; then
 		if $XZDEC "$TMP_COMP" > "$TMP_UNCOMP" ; then
 			:
 		else
 			echo "Decompressing failed: $* $FILE"
 			exit 1
 		fi
 
 		if cmp "$TMP_UNCOMP" "$FILE" ; then
 			:
 		else
 			echo "Decompressed file does not match" \
 					"the original: $* $FILE"
 			exit 1
 		fi
 	fi
 }
 
 XZ="../src/xz/xz --memlimit-compress=48MiB --memlimit-decompress=5MiB \
 		--no-adjust --threads=1 --check=crc32"
 grep "define HAVE_CHECK_CRC64" ../config.h > /dev/null \
 		&& XZ="$XZ --check=crc64"
 XZDEC="../src/xzdec/xzdec" # No memory usage limiter available
 test -x ../src/xzdec/xzdec || XZDEC=
 
 # Create the required input file if needed.
 FILE=$1
+# Derive temporary filenames for compressed and uncompressed outputs
+# from the input filename. This is needed when multiple tests are
+# run in parallel.
+TMP_COMP="tmp_comp_$FILE"
+TMP_UNCOMP="tmp_uncomp_$FILE"
 case $FILE in
+#	compress_generated files will be created in the build directory
+#	in the /tests/ sub-directory.
 	compress_generated_*)
-		if ./create_compress_files "${FILE#compress_generated_}" ; then
+		if ./create_compress_files "$FILE" ; then
 			:
 		else
 			rm -f "$FILE"
 			echo "Failed to create the file '$FILE'."
 			exit 1
 		fi
 		;;
+#	compress_prepared files exist in the source directory since they
+#       do not need to be copied or regenerated.
+	compress_prepared_*)
+		FILE="$srcdir/$FILE"
+		;;
 	'')
 		echo "No test file was specified."
 		exit 1
 		;;
 esac
 
-# Derive temporary filenames for compressed and uncompressed outputs
-# from the input filename. This is needed when multiple tests are
-# run in parallel.
-TMP_COMP="tmp_comp_${FILE##*/}"
-TMP_UNCOMP="tmp_uncomp_${FILE##*/}"
-
 # Remove temporary now (in case they are something weird), and on exit.
 rm -f "$TMP_COMP" "$TMP_UNCOMP"
 trap 'rm -f "$TMP_COMP" "$TMP_UNCOMP"' 0
 
 # Compress and decompress the file with various filter configurations.
 #
 # Don't test with empty arguments; it breaks some ancient
 # proprietary /bin/sh versions due to $@ used in test_xz().
 test_xz -1
 test_xz -2
 test_xz -3
 test_xz -4
 
 test_filter()
 {
 	grep "define HAVE_ENCODER_$1" ../config.h > /dev/null || return
 	grep "define HAVE_DECODER_$1" ../config.h > /dev/null || return
 	shift
 	test_xz "$@" --lzma2=dict=64KiB,nice=32,mode=fast
 }
 
 test_filter DELTA --delta=dist=1
 test_filter DELTA --delta=dist=4
 test_filter DELTA --delta=dist=256
 test_filter X86 --x86
 test_filter POWERPC --power
 test_filter IA64 --ia64
 test_filter ARM --arm
 test_filter ARMTHUMB --armthumb
 test_filter SPARC --sparc
 
 exit 0
diff --git a/tests/test_compress_prepared_bcj_sparc b/tests/test_compress_prepared_bcj_sparc
index 01447e13..deb76ef6 100755
--- a/tests/test_compress_prepared_bcj_sparc
+++ b/tests/test_compress_prepared_bcj_sparc
@@ -1,3 +1,3 @@
 #!/bin/sh
 
-exec "$srcdir/test_compress.sh" "$srcdir/compress_prepared_bcj_sparc"
+exec "$srcdir/test_compress.sh" compress_prepared_bcj_sparc
diff --git a/tests/test_compress_prepared_bcj_x86 b/tests/test_compress_prepared_bcj_x86
index a2771498..3452d7ff 100755
--- a/tests/test_compress_prepared_bcj_x86
+++ b/tests/test_compress_prepared_bcj_x86
@@ -1,3 +1,3 @@
 #!/bin/sh
 
-exec "$srcdir/test_compress.sh" "$srcdir/compress_prepared_bcj_x86"
+exec "$srcdir/test_compress.sh" compress_prepared_bcj_x86