{"id":"37192387377","type":"IssueCommentEvent","actor":{"id":76864299,"login":"Rudxain","display_login":"Rudxain","gravatar_id":"","url":"https://api.github.com/users/Rudxain","avatar_url":"https://avatars.githubusercontent.com/u/76864299?"},"repo":{"id":54495193,"name":"ansuz/RIIR","url":"https://api.github.com/repos/ansuz/RIIR"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/ansuz/RIIR/issues/123","repository_url":"https://api.github.com/repos/ansuz/RIIR","labels_url":"https://api.github.com/repos/ansuz/RIIR/issues/123/labels{/name}","comments_url":"https://api.github.com/repos/ansuz/RIIR/issues/123/comments","events_url":"https://api.github.com/repos/ansuz/RIIR/issues/123/events","html_url":"https://github.com/ansuz/RIIR/issues/123","id":2216110549,"node_id":"I_kwDOAz-H2c6EFynV","number":123,"title":"Rewrite xz in rust","user":{"login":"jmwielandt","id":37153467,"node_id":"MDQ6VXNlcjM3MTUzNDY3","avatar_url":"https://avatars.githubusercontent.com/u/37153467?v=4","gravatar_id":"","url":"https://api.github.com/users/jmwielandt","html_url":"https://github.com/jmwielandt","followers_url":"https://api.github.com/users/jmwielandt/followers","following_url":"https://api.github.com/users/jmwielandt/following{/other_user}","gists_url":"https://api.github.com/users/jmwielandt/gists{/gist_id}","starred_url":"https://api.github.com/users/jmwielandt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jmwielandt/subscriptions","organizations_url":"https://api.github.com/users/jmwielandt/orgs","repos_url":"https://api.github.com/users/jmwielandt/repos","events_url":"https://api.github.com/users/jmwielandt/events{/privacy}","received_events_url":"https://api.github.com/users/jmwielandt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2024-03-30T00:24:28Z","updated_at":"2024-04-05T06:42:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://github.com/tukaani-project/xz/issues/102\r\n\r\nI think in this case it makes a little bit of sense xD","reactions":{"url":"https://api.github.com/repos/ansuz/RIIR/issues/123/reactions","total_count":1,"+1":0,"-1":0,"laugh":1,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ansuz/RIIR/issues/123/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/ansuz/RIIR/issues/comments/2039058677","html_url":"https://github.com/ansuz/RIIR/issues/123#issuecomment-2039058677","issue_url":"https://api.github.com/repos/ansuz/RIIR/issues/123","id":2039058677,"node_id":"IC_kwDOAz-H2c55iZD1","user":{"login":"Rudxain","id":76864299,"node_id":"MDQ6VXNlcjc2ODY0Mjk5","avatar_url":"https://avatars.githubusercontent.com/u/76864299?v=4","gravatar_id":"","url":"https://api.github.com/users/Rudxain","html_url":"https://github.com/Rudxain","followers_url":"https://api.github.com/users/Rudxain/followers","following_url":"https://api.github.com/users/Rudxain/following{/other_user}","gists_url":"https://api.github.com/users/Rudxain/gists{/gist_id}","starred_url":"https://api.github.com/users/Rudxain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rudxain/subscriptions","organizations_url":"https://api.github.com/users/Rudxain/orgs","repos_url":"https://api.github.com/users/Rudxain/repos","events_url":"https://api.github.com/users/Rudxain/events{/privacy}","received_events_url":"https://api.github.com/users/Rudxain/received_events","type":"User","site_admin":false},"created_at":"2024-04-05T06:42:54Z","updated_at":"2024-04-05T06:42:54Z","author_association":"NONE","body":"> macro can't be cryptographycally encrypted\r\n\r\nUnless we took inspiration from Befunge or Malbolge, lol. We could write a Brainfuck-like interpreter that decrypts the program at load-time, then runs it. We would have achieved obfuscation and obscurity (not true security, because the key is embedded in the interpreter).\r\n\r\nThis doesn't directly allow us to encrypt the macro, but we can split the interpreter (plaintext) and program (ciphertext blob). We could even add several layers of indirection to the interpreter, and encryption with multiple keys spread across the codebase. We could even use existing data from the codebase as keys, to further hide the decryption points.\r\n\r\nBut all of this is moot (and maybe BS, considering I'm no expert at insidious obfuscation), as it would be _extremely sus_ to embed an interpreter in a program that's _supposed_ to **NOT be Turing-complete**","reactions":{"url":"https://api.github.com/repos/ansuz/RIIR/issues/comments/2039058677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-04-05T06:42:55Z"}
