{"id":"31543345383","type":"PushEvent","actor":{"id":7587318,"login":"shiltian","display_login":"shiltian","gravatar_id":"","url":"https://api.github.com/users/shiltian","avatar_url":"https://avatars.githubusercontent.com/u/7587318?"},"repo":{"id":211226533,"name":"shiltian/llvm-project","url":"https://api.github.com/repos/shiltian/llvm-project"},"payload":{"repository_id":211226533,"push_id":14891927888,"size":12,"distinct_size":12,"ref":"refs/heads/main","head":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","before":"1c35c1a73907a95ce54b5a0edca513591e2bc069","commits":[{"sha":"b6310e65f61c07e90fdbdc7f7158065fb0c94656","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Add lifetimebound attributes to clamp\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, arichardson, libcxx-commits\n\nDifferential Revision: https://reviews.llvm.org/D158327","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/b6310e65f61c07e90fdbdc7f7158065fb0c94656"},{"sha":"8eb34700c2b1847ec6dfb8f92b305b65278d2ec0","author":{"email":"ellis.sparky.hoag@gmail.com","name":"Ellis Hoag"},"message":"[SpecialCaseList] Add option to use Globs instead of Regex to match patterns\n\nAdd an option in `SpecialCaseList` to use Globs instead of Regex to match patterns. `GlobPattern` was extended in https://reviews.llvm.org/D153587 to support brace expansions which allows us to use patterns like `*/src/foo.{c,cpp}`. It turns out that most patterns only take advantage of `*` so using Regex was overkill and required lots of escaping in practice. This often led to bugs due to forgetting to escape special characters.\n\nSince this would be a breaking change, we temporarily support Regex by default and use Globs when `#!special-case-list-v2` is the first line in the file. Users should switch to the glob format described in https://llvm.org/doxygen/classllvm_1_1GlobPattern.html. For example, `(abc|def)` should become `{abc,def}`.\n\nSee discussion in https://reviews.llvm.org/D152762 and https://discourse.llvm.org/t/use-glob-instead-of-regex-for-specialcaselists/71666.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D154014","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/8eb34700c2b1847ec6dfb8f92b305b65278d2ec0"},{"sha":"0b8c636211b89ba721f060d30290e8a1992879b7","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"[MLIR] Move builtin.module LLVM IR translation to before nested operations\n\nThis patch moves the call for translating an MLIR module to LLVM IR to the\nbeginning of the translation process. This enables the use of dialect\nattributes attached to `builtin.module` operations and the `amendOperation()`\nflow to initialize dialect-specific global configuration before translating\nthe contents of the module.\n\nCurrently, this patch does not impact the generated IR on its own. Testing\ninfrastructure to allow translating the Test dialect to LLVM IR is added, so\nthat it can be checked that the current behavior is not broken in the future.\n\nDifferential Revision: https://reviews.llvm.org/D158278","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/0b8c636211b89ba721f060d30290e8a1992879b7"},{"sha":"0a97720d0197e60a10c93f8af7d24e5f6d6a9807","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Assume that __BYTE_ORDER__ is always present\n\nBoth Clang and GCC always define __BYTE_ORDER__, so there is no need to test the byte order a million different ways.\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, libcxx-commits, krytarowski\n\nDifferential Revision: https://reviews.llvm.org/D158216","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/0a97720d0197e60a10c93f8af7d24e5f6d6a9807"},{"sha":"f93c271d4cc11b865b87da1402e1cb33449fe4bf","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Object] Change OffloadBinary::write to return SmallString<0>\n\nSmallString<0> is more flexible and avoids an unneeded copy in\nObjectYAML/OffloadEmitter.cpp.\n\nReviewed By: jhuber6\n\nDifferential Revision: https://reviews.llvm.org/D159335","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/f93c271d4cc11b865b87da1402e1cb33449fe4bf"},{"sha":"14c58cf5c39a39a335893bc98493c5edc75a91b3","author":{"email":"ajcbik@google.com","name":"Aart Bik"},"message":"[mlir][sparse] simplification of sparse runtime support lib\n\nIncorporated two header files directly into other since\nother parts were used (and it makes it hard to find the\ndefinitions). Removed TODOs that are less likely to be done.\n\nReviewed By: Peiming\n\nDifferential Revision: https://reviews.llvm.org/D159330","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/14c58cf5c39a39a335893bc98493c5edc75a91b3"},{"sha":"95062d74676b98a85e4d3db6628d239b15dbeb35","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Enable disassembly color highlighting\n\nEnable color highlighting of disassembly in llvm-objdump. This patch\nintroduces a new flag --disassembler-color=<mode> that enables or\ndisables highlighting disassembly with ANSI escape codes. The default\nmode is to enable color highlighting if outputting to a color-enabled\nterminal.\n\nDifferential revision: https://reviews.llvm.org/D159224","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/95062d74676b98a85e4d3db6628d239b15dbeb35"},{"sha":"885d7b759b5c166c07c07f4c58c6e0ba110fb0c2","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] [builtins] Remove unused/misnamed x86 chkstk functions\n\nFor both MSVC and MinGW targets, the compiler generates calls to\nfunctions for probing the stack, in functions that allocate a larger\namount of stack space.\n\nThe exact behaviour of these functions differ per architecture (some\ndecrement the stack, some actually decrement the stack pointer,\nsome only probe the stack). In MSVC mode, the compiler always\ngenerates calls to a symbol named \"__chkstk\". In MinGW mode, the\nsymbol is named \"__alloca\" on i386 and \"___chkstk_ms\" on x86_64,\nbut the functions behave exactly the same as their MSVC counterparts\ndespite the differing names.\n\n(On i386, these names are the raw symbol names - if considering\na C level function name with the extra implicit leading underscore,\nthey would be called \"_chkstk\" and \"_alloca\".)\n\nRemove the misleading duplicate and unused functions. These were\nadded in fbfed869106cc9c9cad7538db5e65bcd24f4d92e /\nc27de5b2790b65394c50ba13fab319995dbf5956 (adding \"___chkstk_ms\"\nfor both architectures, even if that symbol name only was used\non x86_64) and 40eb83ba56ba9c1d2e6de44deacf889ac0143cf7\n(adding \"__alloca\" and \"___chkstk\", even if the former only was\nused on i386, and the latter seeming like a misspelled form of\nthe MSVC function, with three underscores instead of two).\n\nThe x86_64 \"___chkstk\" was doubly surprising as that function had\nthe same behaviour as the function used on i386, while the\n\"__chkstk\" that MSVC emitted calls to should behave exactly like\nthe preexisting \"___chkstk_ms\".\n\nRemove the unused functions, and rename the misspelled MSVC-like\nsymbols to the correct name that MSVC mode actually uses.\n\nNote that these files aren't assembled at all when building\ncompiler-rt builtins in MSVC mode, as they are expected to be\nprovided by MSVC libraries when building code in MSVC mode.\n\nDifferential Revision: https://reviews.llvm.org/D159139","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2"},{"sha":"1f9eff100ce8faea1284d68b779d844c6e019b77","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] Rename the now lone i386/chkstk2.S to i386/chkstk.S\n\nThis step was omitted from the previous commit,\n885d7b759b5c166c07c07f4c58c6e0ba110fb0c2, for clarity.","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/1f9eff100ce8faea1284d68b779d844c6e019b77"},{"sha":"b5f041f1fe75b400d41998d9c07bf5185cf431e3","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 1f9eff100ce8","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/b5f041f1fe75b400d41998d9c07bf5185cf431e3"},{"sha":"79d06eba71d914a04aee3659b995c93611a3219e","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 885d7b759b5c","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/79d06eba71d914a04aee3659b995c93611a3219e"},{"sha":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223","distinct":true,"url":"https://api.github.com/repos/shiltian/llvm-project/commits/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"}]},"public":true,"created_at":"2023-09-01T17:01:08Z"}
{"id":"31543367930","type":"PushEvent","actor":{"id":62120345,"login":"iree-github-actions-bot","display_login":"iree-github-actions-bot","gravatar_id":"","url":"https://api.github.com/users/iree-github-actions-bot","avatar_url":"https://avatars.githubusercontent.com/u/62120345?"},"repo":{"id":388560920,"name":"iree-org/iree-llvm-fork","url":"https://api.github.com/repos/iree-org/iree-llvm-fork"},"payload":{"repository_id":388560920,"push_id":14891939104,"size":12,"distinct_size":12,"ref":"refs/heads/main","head":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","before":"1c35c1a73907a95ce54b5a0edca513591e2bc069","commits":[{"sha":"b6310e65f61c07e90fdbdc7f7158065fb0c94656","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Add lifetimebound attributes to clamp\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, arichardson, libcxx-commits\n\nDifferential Revision: https://reviews.llvm.org/D158327","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/b6310e65f61c07e90fdbdc7f7158065fb0c94656"},{"sha":"8eb34700c2b1847ec6dfb8f92b305b65278d2ec0","author":{"email":"ellis.sparky.hoag@gmail.com","name":"Ellis Hoag"},"message":"[SpecialCaseList] Add option to use Globs instead of Regex to match patterns\n\nAdd an option in `SpecialCaseList` to use Globs instead of Regex to match patterns. `GlobPattern` was extended in https://reviews.llvm.org/D153587 to support brace expansions which allows us to use patterns like `*/src/foo.{c,cpp}`. It turns out that most patterns only take advantage of `*` so using Regex was overkill and required lots of escaping in practice. This often led to bugs due to forgetting to escape special characters.\n\nSince this would be a breaking change, we temporarily support Regex by default and use Globs when `#!special-case-list-v2` is the first line in the file. Users should switch to the glob format described in https://llvm.org/doxygen/classllvm_1_1GlobPattern.html. For example, `(abc|def)` should become `{abc,def}`.\n\nSee discussion in https://reviews.llvm.org/D152762 and https://discourse.llvm.org/t/use-glob-instead-of-regex-for-specialcaselists/71666.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D154014","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/8eb34700c2b1847ec6dfb8f92b305b65278d2ec0"},{"sha":"0b8c636211b89ba721f060d30290e8a1992879b7","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"[MLIR] Move builtin.module LLVM IR translation to before nested operations\n\nThis patch moves the call for translating an MLIR module to LLVM IR to the\nbeginning of the translation process. This enables the use of dialect\nattributes attached to `builtin.module` operations and the `amendOperation()`\nflow to initialize dialect-specific global configuration before translating\nthe contents of the module.\n\nCurrently, this patch does not impact the generated IR on its own. Testing\ninfrastructure to allow translating the Test dialect to LLVM IR is added, so\nthat it can be checked that the current behavior is not broken in the future.\n\nDifferential Revision: https://reviews.llvm.org/D158278","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/0b8c636211b89ba721f060d30290e8a1992879b7"},{"sha":"0a97720d0197e60a10c93f8af7d24e5f6d6a9807","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Assume that __BYTE_ORDER__ is always present\n\nBoth Clang and GCC always define __BYTE_ORDER__, so there is no need to test the byte order a million different ways.\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, libcxx-commits, krytarowski\n\nDifferential Revision: https://reviews.llvm.org/D158216","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/0a97720d0197e60a10c93f8af7d24e5f6d6a9807"},{"sha":"f93c271d4cc11b865b87da1402e1cb33449fe4bf","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Object] Change OffloadBinary::write to return SmallString<0>\n\nSmallString<0> is more flexible and avoids an unneeded copy in\nObjectYAML/OffloadEmitter.cpp.\n\nReviewed By: jhuber6\n\nDifferential Revision: https://reviews.llvm.org/D159335","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/f93c271d4cc11b865b87da1402e1cb33449fe4bf"},{"sha":"14c58cf5c39a39a335893bc98493c5edc75a91b3","author":{"email":"ajcbik@google.com","name":"Aart Bik"},"message":"[mlir][sparse] simplification of sparse runtime support lib\n\nIncorporated two header files directly into other since\nother parts were used (and it makes it hard to find the\ndefinitions). Removed TODOs that are less likely to be done.\n\nReviewed By: Peiming\n\nDifferential Revision: https://reviews.llvm.org/D159330","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/14c58cf5c39a39a335893bc98493c5edc75a91b3"},{"sha":"95062d74676b98a85e4d3db6628d239b15dbeb35","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Enable disassembly color highlighting\n\nEnable color highlighting of disassembly in llvm-objdump. This patch\nintroduces a new flag --disassembler-color=<mode> that enables or\ndisables highlighting disassembly with ANSI escape codes. The default\nmode is to enable color highlighting if outputting to a color-enabled\nterminal.\n\nDifferential revision: https://reviews.llvm.org/D159224","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/95062d74676b98a85e4d3db6628d239b15dbeb35"},{"sha":"885d7b759b5c166c07c07f4c58c6e0ba110fb0c2","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] [builtins] Remove unused/misnamed x86 chkstk functions\n\nFor both MSVC and MinGW targets, the compiler generates calls to\nfunctions for probing the stack, in functions that allocate a larger\namount of stack space.\n\nThe exact behaviour of these functions differ per architecture (some\ndecrement the stack, some actually decrement the stack pointer,\nsome only probe the stack). In MSVC mode, the compiler always\ngenerates calls to a symbol named \"__chkstk\". In MinGW mode, the\nsymbol is named \"__alloca\" on i386 and \"___chkstk_ms\" on x86_64,\nbut the functions behave exactly the same as their MSVC counterparts\ndespite the differing names.\n\n(On i386, these names are the raw symbol names - if considering\na C level function name with the extra implicit leading underscore,\nthey would be called \"_chkstk\" and \"_alloca\".)\n\nRemove the misleading duplicate and unused functions. These were\nadded in fbfed869106cc9c9cad7538db5e65bcd24f4d92e /\nc27de5b2790b65394c50ba13fab319995dbf5956 (adding \"___chkstk_ms\"\nfor both architectures, even if that symbol name only was used\non x86_64) and 40eb83ba56ba9c1d2e6de44deacf889ac0143cf7\n(adding \"__alloca\" and \"___chkstk\", even if the former only was\nused on i386, and the latter seeming like a misspelled form of\nthe MSVC function, with three underscores instead of two).\n\nThe x86_64 \"___chkstk\" was doubly surprising as that function had\nthe same behaviour as the function used on i386, while the\n\"__chkstk\" that MSVC emitted calls to should behave exactly like\nthe preexisting \"___chkstk_ms\".\n\nRemove the unused functions, and rename the misspelled MSVC-like\nsymbols to the correct name that MSVC mode actually uses.\n\nNote that these files aren't assembled at all when building\ncompiler-rt builtins in MSVC mode, as they are expected to be\nprovided by MSVC libraries when building code in MSVC mode.\n\nDifferential Revision: https://reviews.llvm.org/D159139","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2"},{"sha":"1f9eff100ce8faea1284d68b779d844c6e019b77","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] Rename the now lone i386/chkstk2.S to i386/chkstk.S\n\nThis step was omitted from the previous commit,\n885d7b759b5c166c07c07f4c58c6e0ba110fb0c2, for clarity.","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/1f9eff100ce8faea1284d68b779d844c6e019b77"},{"sha":"b5f041f1fe75b400d41998d9c07bf5185cf431e3","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 1f9eff100ce8","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/b5f041f1fe75b400d41998d9c07bf5185cf431e3"},{"sha":"79d06eba71d914a04aee3659b995c93611a3219e","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 885d7b759b5c","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/79d06eba71d914a04aee3659b995c93611a3219e"},{"sha":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223","distinct":true,"url":"https://api.github.com/repos/iree-org/iree-llvm-fork/commits/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"}]},"public":true,"created_at":"2023-09-01T17:02:17Z","org":{"id":107954215,"login":"iree-org","gravatar_id":"","url":"https://api.github.com/orgs/iree-org","avatar_url":"https://avatars.githubusercontent.com/u/107954215?"}}
{"id":"31543425034","type":"IssueCommentEvent","actor":{"id":60944935,"login":"llvmbot","display_login":"llvmbot","gravatar_id":"","url":"https://api.github.com/users/llvmbot","avatar_url":"https://avatars.githubusercontent.com/u/60944935?"},"repo":{"id":75821432,"name":"llvm/llvm-project","url":"https://api.github.com/repos/llvm/llvm-project"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/llvm/llvm-project/issues/65122","repository_url":"https://api.github.com/repos/llvm/llvm-project","labels_url":"https://api.github.com/repos/llvm/llvm-project/issues/65122/labels{/name}","comments_url":"https://api.github.com/repos/llvm/llvm-project/issues/65122/comments","events_url":"https://api.github.com/repos/llvm/llvm-project/issues/65122/events","html_url":"https://github.com/llvm/llvm-project/issues/65122","id":1874345015,"node_id":"I_kwDOBITxeM5vuDw3","number":65122,"title":"llvm-windres handling of unescaped quotes broke building xz","user":{"login":"mstorsjo","id":69727,"node_id":"MDQ6VXNlcjY5NzI3","avatar_url":"https://avatars.githubusercontent.com/u/69727?v=4","gravatar_id":"","url":"https://api.github.com/users/mstorsjo","html_url":"https://github.com/mstorsjo","followers_url":"https://api.github.com/users/mstorsjo/followers","following_url":"https://api.github.com/users/mstorsjo/following{/other_user}","gists_url":"https://api.github.com/users/mstorsjo/gists{/gist_id}","starred_url":"https://api.github.com/users/mstorsjo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mstorsjo/subscriptions","organizations_url":"https://api.github.com/users/mstorsjo/orgs","repos_url":"https://api.github.com/users/mstorsjo/repos","events_url":"https://api.github.com/users/mstorsjo/events{/privacy}","received_events_url":"https://api.github.com/users/mstorsjo/received_events","type":"User","site_admin":false},"labels":[{"id":1958991186,"node_id":"MDU6TGFiZWwxOTU4OTkxMTg2","url":"https://api.github.com/repos/llvm/llvm-project/labels/llvm-tools","name":"llvm-tools","color":"b3aefc","default":false,"description":"All llvm tools that do not have corresponding tag"},{"id":3609292726,"node_id":"LA_kwDOBITxeM7XIW-2","url":"https://api.github.com/repos/llvm/llvm-project/labels/regression","name":"regression","color":"6699cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/llvm/llvm-project/milestones/25","html_url":"https://github.com/llvm/llvm-project/milestone/25","labels_url":"https://api.github.com/repos/llvm/llvm-project/milestones/25/labels","id":9286598,"node_id":"MI_kwDOBITxeM4AjbPG","number":25,"title":"LLVM 17.0.X Release","description":"branch: release/17.x","creator":{"login":"tbaederr","id":49720664,"node_id":"MDQ6VXNlcjQ5NzIwNjY0","avatar_url":"https://avatars.githubusercontent.com/u/49720664?v=4","gravatar_id":"","url":"https://api.github.com/users/tbaederr","html_url":"https://github.com/tbaederr","followers_url":"https://api.github.com/users/tbaederr/followers","following_url":"https://api.github.com/users/tbaederr/following{/other_user}","gists_url":"https://api.github.com/users/tbaederr/gists{/gist_id}","starred_url":"https://api.github.com/users/tbaederr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tbaederr/subscriptions","organizations_url":"https://api.github.com/users/tbaederr/orgs","repos_url":"https://api.github.com/users/tbaederr/repos","events_url":"https://api.github.com/users/tbaederr/events{/privacy}","received_events_url":"https://api.github.com/users/tbaederr/received_events","type":"User","site_admin":false},"open_issues":26,"closed_issues":196,"state":"open","created_at":"2023-04-15T06:56:51Z","updated_at":"2023-09-01T13:51:21Z","due_on":null,"closed_at":null},"comments":3,"created_at":"2023-08-30T20:48:53Z","updated_at":"2023-09-01T17:05:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The recent change (in 17.x) for llvm-windres handling of unescaped quotes in 0f4c6b120f21d582ab7c5c4f2b2a475086c34938 (which in itself fixed one aspect of https://github.com/llvm/llvm-project/issues/57334) instead broke use of llvm-windres in building xz (an llvm-windres specific workaround in https://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47, which worked before no longer works with the current llvm-windres).\r\n\r\nWe shouldn't be trading one bug for another, as the change from 0f4c6b120f21d582ab7c5c4f2b2a475086c34938 is correct in itself (making llvm-windres behaviour closer to GNU windres), we can implement the GNU windres flag `--use-temp-file` properly, which should allow the GNU windres codepath in xz to work for llvm-windres as well.\r\n\r\nA \"fix\" for this issue is up at https://reviews.llvm.org/D159223 - but to properly take that fix into use, xz will need to remove its llvm-windres specific handling.","reactions":{"url":"https://api.github.com/repos/llvm/llvm-project/issues/65122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/llvm/llvm-project/issues/65122/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/llvm/llvm-project/issues/comments/1703070690","html_url":"https://github.com/llvm/llvm-project/issues/65122#issuecomment-1703070690","issue_url":"https://api.github.com/repos/llvm/llvm-project/issues/65122","id":1703070690,"node_id":"IC_kwDOBITxeM5lgsvi","user":{"login":"llvmbot","id":60944935,"node_id":"MDQ6VXNlcjYwOTQ0OTM1","avatar_url":"https://avatars.githubusercontent.com/u/60944935?v=4","gravatar_id":"","url":"https://api.github.com/users/llvmbot","html_url":"https://github.com/llvmbot","followers_url":"https://api.github.com/users/llvmbot/followers","following_url":"https://api.github.com/users/llvmbot/following{/other_user}","gists_url":"https://api.github.com/users/llvmbot/gists{/gist_id}","starred_url":"https://api.github.com/users/llvmbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/llvmbot/subscriptions","organizations_url":"https://api.github.com/users/llvmbot/orgs","repos_url":"https://api.github.com/users/llvmbot/repos","events_url":"https://api.github.com/users/llvmbot/events{/privacy}","received_events_url":"https://api.github.com/users/llvmbot/received_events","type":"User","site_admin":false},"created_at":"2023-09-01T17:05:12Z","updated_at":"2023-09-01T17:05:12Z","author_association":"COLLABORATOR","body":"/pull-request llvm/llvm-project-release-prs#681","reactions":{"url":"https://api.github.com/repos/llvm/llvm-project/issues/comments/1703070690/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-09-01T17:05:12Z","org":{"id":17149993,"login":"llvm","gravatar_id":"","url":"https://api.github.com/orgs/llvm","avatar_url":"https://avatars.githubusercontent.com/u/17149993?"}}
{"id":"31543636183","type":"PushEvent","actor":{"id":26551020,"login":"jdenny-ornl","display_login":"jdenny-ornl","gravatar_id":"","url":"https://api.github.com/users/jdenny-ornl","avatar_url":"https://avatars.githubusercontent.com/u/26551020?"},"repo":{"id":263426851,"name":"llvm-doe-org/llvm-project","url":"https://api.github.com/repos/llvm-doe-org/llvm-project"},"payload":{"repository_id":263426851,"push_id":14892072737,"size":5,"distinct_size":5,"ref":"refs/heads/doe","head":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","before":"95062d74676b98a85e4d3db6628d239b15dbeb35","commits":[{"sha":"885d7b759b5c166c07c07f4c58c6e0ba110fb0c2","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] [builtins] Remove unused/misnamed x86 chkstk functions\n\nFor both MSVC and MinGW targets, the compiler generates calls to\nfunctions for probing the stack, in functions that allocate a larger\namount of stack space.\n\nThe exact behaviour of these functions differ per architecture (some\ndecrement the stack, some actually decrement the stack pointer,\nsome only probe the stack). In MSVC mode, the compiler always\ngenerates calls to a symbol named \"__chkstk\". In MinGW mode, the\nsymbol is named \"__alloca\" on i386 and \"___chkstk_ms\" on x86_64,\nbut the functions behave exactly the same as their MSVC counterparts\ndespite the differing names.\n\n(On i386, these names are the raw symbol names - if considering\na C level function name with the extra implicit leading underscore,\nthey would be called \"_chkstk\" and \"_alloca\".)\n\nRemove the misleading duplicate and unused functions. These were\nadded in fbfed869106cc9c9cad7538db5e65bcd24f4d92e /\nc27de5b2790b65394c50ba13fab319995dbf5956 (adding \"___chkstk_ms\"\nfor both architectures, even if that symbol name only was used\non x86_64) and 40eb83ba56ba9c1d2e6de44deacf889ac0143cf7\n(adding \"__alloca\" and \"___chkstk\", even if the former only was\nused on i386, and the latter seeming like a misspelled form of\nthe MSVC function, with three underscores instead of two).\n\nThe x86_64 \"___chkstk\" was doubly surprising as that function had\nthe same behaviour as the function used on i386, while the\n\"__chkstk\" that MSVC emitted calls to should behave exactly like\nthe preexisting \"___chkstk_ms\".\n\nRemove the unused functions, and rename the misspelled MSVC-like\nsymbols to the correct name that MSVC mode actually uses.\n\nNote that these files aren't assembled at all when building\ncompiler-rt builtins in MSVC mode, as they are expected to be\nprovided by MSVC libraries when building code in MSVC mode.\n\nDifferential Revision: https://reviews.llvm.org/D159139","distinct":true,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2"},{"sha":"1f9eff100ce8faea1284d68b779d844c6e019b77","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] Rename the now lone i386/chkstk2.S to i386/chkstk.S\n\nThis step was omitted from the previous commit,\n885d7b759b5c166c07c07f4c58c6e0ba110fb0c2, for clarity.","distinct":true,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/1f9eff100ce8faea1284d68b779d844c6e019b77"},{"sha":"b5f041f1fe75b400d41998d9c07bf5185cf431e3","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 1f9eff100ce8","distinct":true,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/b5f041f1fe75b400d41998d9c07bf5185cf431e3"},{"sha":"79d06eba71d914a04aee3659b995c93611a3219e","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 885d7b759b5c","distinct":true,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/79d06eba71d914a04aee3659b995c93611a3219e"},{"sha":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223","distinct":true,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"}]},"public":true,"created_at":"2023-09-01T17:15:57Z","org":{"id":63076043,"login":"llvm-doe-org","gravatar_id":"","url":"https://api.github.com/orgs/llvm-doe-org","avatar_url":"https://avatars.githubusercontent.com/u/63076043?"}}
{"id":"31543753069","type":"PushEvent","actor":{"id":26551020,"login":"jdenny-ornl","display_login":"jdenny-ornl","gravatar_id":"","url":"https://api.github.com/users/jdenny-ornl","avatar_url":"https://avatars.githubusercontent.com/u/26551020?"},"repo":{"id":263426851,"name":"llvm-doe-org/llvm-project","url":"https://api.github.com/repos/llvm-doe-org/llvm-project"},"payload":{"repository_id":263426851,"push_id":14892138992,"size":8,"distinct_size":3,"ref":"refs/heads/llvm.org/main","head":"823151f0cfc8f031bcecb15c8246b5649e87b31a","before":"95062d74676b98a85e4d3db6628d239b15dbeb35","commits":[{"sha":"885d7b759b5c166c07c07f4c58c6e0ba110fb0c2","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] [builtins] Remove unused/misnamed x86 chkstk functions\n\nFor both MSVC and MinGW targets, the compiler generates calls to\nfunctions for probing the stack, in functions that allocate a larger\namount of stack space.\n\nThe exact behaviour of these functions differ per architecture (some\ndecrement the stack, some actually decrement the stack pointer,\nsome only probe the stack). In MSVC mode, the compiler always\ngenerates calls to a symbol named \"__chkstk\". In MinGW mode, the\nsymbol is named \"__alloca\" on i386 and \"___chkstk_ms\" on x86_64,\nbut the functions behave exactly the same as their MSVC counterparts\ndespite the differing names.\n\n(On i386, these names are the raw symbol names - if considering\na C level function name with the extra implicit leading underscore,\nthey would be called \"_chkstk\" and \"_alloca\".)\n\nRemove the misleading duplicate and unused functions. These were\nadded in fbfed869106cc9c9cad7538db5e65bcd24f4d92e /\nc27de5b2790b65394c50ba13fab319995dbf5956 (adding \"___chkstk_ms\"\nfor both architectures, even if that symbol name only was used\non x86_64) and 40eb83ba56ba9c1d2e6de44deacf889ac0143cf7\n(adding \"__alloca\" and \"___chkstk\", even if the former only was\nused on i386, and the latter seeming like a misspelled form of\nthe MSVC function, with three underscores instead of two).\n\nThe x86_64 \"___chkstk\" was doubly surprising as that function had\nthe same behaviour as the function used on i386, while the\n\"__chkstk\" that MSVC emitted calls to should behave exactly like\nthe preexisting \"___chkstk_ms\".\n\nRemove the unused functions, and rename the misspelled MSVC-like\nsymbols to the correct name that MSVC mode actually uses.\n\nNote that these files aren't assembled at all when building\ncompiler-rt builtins in MSVC mode, as they are expected to be\nprovided by MSVC libraries when building code in MSVC mode.\n\nDifferential Revision: https://reviews.llvm.org/D159139","distinct":false,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2"},{"sha":"1f9eff100ce8faea1284d68b779d844c6e019b77","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] Rename the now lone i386/chkstk2.S to i386/chkstk.S\n\nThis step was omitted from the previous commit,\n885d7b759b5c166c07c07f4c58c6e0ba110fb0c2, for clarity.","distinct":false,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/1f9eff100ce8faea1284d68b779d844c6e019b77"},{"sha":"b5f041f1fe75b400d41998d9c07bf5185cf431e3","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 1f9eff100ce8","distinct":false,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/b5f041f1fe75b400d41998d9c07bf5185cf431e3"},{"sha":"79d06eba71d914a04aee3659b995c93611a3219e","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 885d7b759b5c","distinct":false,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/79d06eba71d914a04aee3659b995c93611a3219e"},{"sha":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223","distinct":false,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"},{"sha":"6c768e8184a513e5ad1d8a9b50d4cecb26f9b38c","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm] Delete spurious directory created by patch","distinct":true,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/6c768e8184a513e5ad1d8a9b50d4cecb26f9b38c"},{"sha":"7678a322196bf7575841b205afc966405aec1428","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Disable arm64-disassembly-color on Windows\n\nWindows doesn't support colored output with ANSI escape colors.","distinct":true,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/7678a322196bf7575841b205afc966405aec1428"},{"sha":"823151f0cfc8f031bcecb15c8246b5649e87b31a","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"Revert \"[MLIR] Move builtin.module LLVM IR translation to before nested operations\"\n\nThis reverts commit 0b8c636211b89ba721f060d30290e8a1992879b7.","distinct":true,"url":"https://api.github.com/repos/llvm-doe-org/llvm-project/commits/823151f0cfc8f031bcecb15c8246b5649e87b31a"}]},"public":true,"created_at":"2023-09-01T17:21:16Z","org":{"id":63076043,"login":"llvm-doe-org","gravatar_id":"","url":"https://api.github.com/orgs/llvm-doe-org","avatar_url":"https://avatars.githubusercontent.com/u/63076043?"}}
{"id":"31544237045","type":"PushEvent","actor":{"id":465279,"login":"kraj","display_login":"kraj","gravatar_id":"","url":"https://api.github.com/users/kraj","avatar_url":"https://avatars.githubusercontent.com/u/465279?"},"repo":{"id":166064638,"name":"kraj/llvm-project","url":"https://api.github.com/repos/kraj/llvm-project"},"payload":{"repository_id":166064638,"push_id":14892384510,"size":51,"distinct_size":45,"ref":"refs/heads/oe/main","head":"134440ad156a3ba4a9f296eb7951f161d7d20099","before":"c6f07c120ccd9b4b81f9257200dc2400a9c3571a","commits":[{"sha":"1c35c1a73907a95ce54b5a0edca513591e2bc069","author":{"email":"pklausler@nvidia.com","name":"Peter Klausler"},"message":"[flang] Allow runtime build with AVOID_NATIVE_INT128_T=1\n\nThis patch enables the Fortran runtime support library to be\nbuilt without native 128-bit integer support in the C++ compiler.\n\nExperimental: do not merge yet.\n\nDifferential Revision: https://reviews.llvm.org/D154660","distinct":false,"url":"https://api.github.com/repos/kraj/llvm-project/commits/1c35c1a73907a95ce54b5a0edca513591e2bc069"},{"sha":"b6310e65f61c07e90fdbdc7f7158065fb0c94656","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Add lifetimebound attributes to clamp\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, arichardson, libcxx-commits\n\nDifferential Revision: https://reviews.llvm.org/D158327","distinct":false,"url":"https://api.github.com/repos/kraj/llvm-project/commits/b6310e65f61c07e90fdbdc7f7158065fb0c94656"},{"sha":"8eb34700c2b1847ec6dfb8f92b305b65278d2ec0","author":{"email":"ellis.sparky.hoag@gmail.com","name":"Ellis Hoag"},"message":"[SpecialCaseList] Add option to use Globs instead of Regex to match patterns\n\nAdd an option in `SpecialCaseList` to use Globs instead of Regex to match patterns. `GlobPattern` was extended in https://reviews.llvm.org/D153587 to support brace expansions which allows us to use patterns like `*/src/foo.{c,cpp}`. It turns out that most patterns only take advantage of `*` so using Regex was overkill and required lots of escaping in practice. This often led to bugs due to forgetting to escape special characters.\n\nSince this would be a breaking change, we temporarily support Regex by default and use Globs when `#!special-case-list-v2` is the first line in the file. Users should switch to the glob format described in https://llvm.org/doxygen/classllvm_1_1GlobPattern.html. For example, `(abc|def)` should become `{abc,def}`.\n\nSee discussion in https://reviews.llvm.org/D152762 and https://discourse.llvm.org/t/use-glob-instead-of-regex-for-specialcaselists/71666.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D154014","distinct":false,"url":"https://api.github.com/repos/kraj/llvm-project/commits/8eb34700c2b1847ec6dfb8f92b305b65278d2ec0"},{"sha":"0b8c636211b89ba721f060d30290e8a1992879b7","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"[MLIR] Move builtin.module LLVM IR translation to before nested operations\n\nThis patch moves the call for translating an MLIR module to LLVM IR to the\nbeginning of the translation process. This enables the use of dialect\nattributes attached to `builtin.module` operations and the `amendOperation()`\nflow to initialize dialect-specific global configuration before translating\nthe contents of the module.\n\nCurrently, this patch does not impact the generated IR on its own. Testing\ninfrastructure to allow translating the Test dialect to LLVM IR is added, so\nthat it can be checked that the current behavior is not broken in the future.\n\nDifferential Revision: https://reviews.llvm.org/D158278","distinct":false,"url":"https://api.github.com/repos/kraj/llvm-project/commits/0b8c636211b89ba721f060d30290e8a1992879b7"},{"sha":"0a97720d0197e60a10c93f8af7d24e5f6d6a9807","author":{"email":"nikolasklauser@berlin.de","name":"Nikolas Klauser"},"message":"[libc++] Assume that __BYTE_ORDER__ is always present\n\nBoth Clang and GCC always define __BYTE_ORDER__, so there is no need to test the byte order a million different ways.\n\nReviewed By: #libc, ldionne\n\nSpies: ldionne, libcxx-commits, krytarowski\n\nDifferential Revision: https://reviews.llvm.org/D158216","distinct":false,"url":"https://api.github.com/repos/kraj/llvm-project/commits/0a97720d0197e60a10c93f8af7d24e5f6d6a9807"},{"sha":"f93c271d4cc11b865b87da1402e1cb33449fe4bf","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Object] Change OffloadBinary::write to return SmallString<0>\n\nSmallString<0> is more flexible and avoids an unneeded copy in\nObjectYAML/OffloadEmitter.cpp.\n\nReviewed By: jhuber6\n\nDifferential Revision: https://reviews.llvm.org/D159335","distinct":false,"url":"https://api.github.com/repos/kraj/llvm-project/commits/f93c271d4cc11b865b87da1402e1cb33449fe4bf"},{"sha":"14c58cf5c39a39a335893bc98493c5edc75a91b3","author":{"email":"ajcbik@google.com","name":"Aart Bik"},"message":"[mlir][sparse] simplification of sparse runtime support lib\n\nIncorporated two header files directly into other since\nother parts were used (and it makes it hard to find the\ndefinitions). Removed TODOs that are less likely to be done.\n\nReviewed By: Peiming\n\nDifferential Revision: https://reviews.llvm.org/D159330","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/14c58cf5c39a39a335893bc98493c5edc75a91b3"},{"sha":"95062d74676b98a85e4d3db6628d239b15dbeb35","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Enable disassembly color highlighting\n\nEnable color highlighting of disassembly in llvm-objdump. This patch\nintroduces a new flag --disassembler-color=<mode> that enables or\ndisables highlighting disassembly with ANSI escape codes. The default\nmode is to enable color highlighting if outputting to a color-enabled\nterminal.\n\nDifferential revision: https://reviews.llvm.org/D159224","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/95062d74676b98a85e4d3db6628d239b15dbeb35"},{"sha":"885d7b759b5c166c07c07f4c58c6e0ba110fb0c2","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] [builtins] Remove unused/misnamed x86 chkstk functions\n\nFor both MSVC and MinGW targets, the compiler generates calls to\nfunctions for probing the stack, in functions that allocate a larger\namount of stack space.\n\nThe exact behaviour of these functions differ per architecture (some\ndecrement the stack, some actually decrement the stack pointer,\nsome only probe the stack). In MSVC mode, the compiler always\ngenerates calls to a symbol named \"__chkstk\". In MinGW mode, the\nsymbol is named \"__alloca\" on i386 and \"___chkstk_ms\" on x86_64,\nbut the functions behave exactly the same as their MSVC counterparts\ndespite the differing names.\n\n(On i386, these names are the raw symbol names - if considering\na C level function name with the extra implicit leading underscore,\nthey would be called \"_chkstk\" and \"_alloca\".)\n\nRemove the misleading duplicate and unused functions. These were\nadded in fbfed869106cc9c9cad7538db5e65bcd24f4d92e /\nc27de5b2790b65394c50ba13fab319995dbf5956 (adding \"___chkstk_ms\"\nfor both architectures, even if that symbol name only was used\non x86_64) and 40eb83ba56ba9c1d2e6de44deacf889ac0143cf7\n(adding \"__alloca\" and \"___chkstk\", even if the former only was\nused on i386, and the latter seeming like a misspelled form of\nthe MSVC function, with three underscores instead of two).\n\nThe x86_64 \"___chkstk\" was doubly surprising as that function had\nthe same behaviour as the function used on i386, while the\n\"__chkstk\" that MSVC emitted calls to should behave exactly like\nthe preexisting \"___chkstk_ms\".\n\nRemove the unused functions, and rename the misspelled MSVC-like\nsymbols to the correct name that MSVC mode actually uses.\n\nNote that these files aren't assembled at all when building\ncompiler-rt builtins in MSVC mode, as they are expected to be\nprovided by MSVC libraries when building code in MSVC mode.\n\nDifferential Revision: https://reviews.llvm.org/D159139","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2"},{"sha":"1f9eff100ce8faea1284d68b779d844c6e019b77","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[compiler-rt] Rename the now lone i386/chkstk2.S to i386/chkstk.S\n\nThis step was omitted from the previous commit,\n885d7b759b5c166c07c07f4c58c6e0ba110fb0c2, for clarity.","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/1f9eff100ce8faea1284d68b779d844c6e019b77"},{"sha":"b5f041f1fe75b400d41998d9c07bf5185cf431e3","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 1f9eff100ce8","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/b5f041f1fe75b400d41998d9c07bf5185cf431e3"},{"sha":"79d06eba71d914a04aee3659b995c93611a3219e","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 885d7b759b5c","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/79d06eba71d914a04aee3659b995c93611a3219e"},{"sha":"2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","author":{"email":"martin@martin.st","name":"Martin Storsjö"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"},{"sha":"6c768e8184a513e5ad1d8a9b50d4cecb26f9b38c","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm] Delete spurious directory created by patch","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/6c768e8184a513e5ad1d8a9b50d4cecb26f9b38c"},{"sha":"7678a322196bf7575841b205afc966405aec1428","author":{"email":"jonas@devlieghere.com","name":"Jonas Devlieghere"},"message":"[llvm-objdump] Disable arm64-disassembly-color on Windows\n\nWindows doesn't support colored output with ANSI escape colors.","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/7678a322196bf7575841b205afc966405aec1428"},{"sha":"823151f0cfc8f031bcecb15c8246b5649e87b31a","author":{"email":"safonsof@amd.com","name":"Sergio Afonso"},"message":"Revert \"[MLIR] Move builtin.module LLVM IR translation to before nested operations\"\n\nThis reverts commit 0b8c636211b89ba721f060d30290e8a1992879b7.","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/823151f0cfc8f031bcecb15c8246b5649e87b31a"},{"sha":"a40bada91aeda276a772acfbcae6e8de26755a11","author":{"email":"brendan.emery@esrlabs.com","name":"Brendan Emery"},"message":"[libc++] Apply clang formatting to all string unit tests\n\nThis applies clang-format to the std::string unit tests in preparation\nfor landing https://reviews.llvm.org/D140550.\n\nDifferential Revision: https://reviews.llvm.org/D140612","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/a40bada91aeda276a772acfbcae6e8de26755a11"},{"sha":"7338173308d9e55461f2169701fd462c49d107fa","author":{"email":"raj.khem@gmail.com","name":"Khem Raj"},"message":"libcxxabi: Find libunwind headers when LIBCXXABI_LIBUNWIND_INCLUDES is set\n\nCurrently, when LIBCXXABI_LIBUNWIND_INCLUDES is set via CMake arguments\nthen it ends up not searching the specified dir and unwind.h is not found\nespecially for ARM targets\n\nThis patch makes the searching synthesized directories and then set\nLIBCXXABI_LIBUNWIND_INCLUDES if its there in environment\n\nUpstream-Status: Pending\nSigned-off-by: Khem Raj <raj.khem@gmail.com>","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/7338173308d9e55461f2169701fd462c49d107fa"},{"sha":"9ba7545eaadf5d5c519f84330f8223160f511304","author":{"email":"raj.khem@gmail.com","name":"Khem Raj"},"message":"compiler-rt: support a new embedded linux target\n\nUpstream-Status: Pending\nSigned-off-by: Khem Raj <raj.khem@gmail.com>","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/9ba7545eaadf5d5c519f84330f8223160f511304"},{"sha":"cb2b80f1d135e1291770bde76c25a009bd856edb","author":{"email":"raj.khem@gmail.com","name":"Khem Raj"},"message":"compiler-rt: Simplify cross-compilation. Don't use native-compiled llvm-config.\n\n    Note: AddLLVM.cmake does not expose the LLVM source directory.\n    So if you want to run the test suite, you need to either:\n\n    1) set LLVM_MAIN_SRC_DIR explicitly (to find lit.py)\n    2) change AddLLVM.cmake to point to an installed 'lit'.\n    3) add_subdirectory(compiler-rt/test) from clang instead of compiler-rt.\n\nhttps://us.codeaurora.org/patches/quic/llvm/50683/compiler-rt-cross-compilation.patch\n\nUpstream-Status: Pending\nSigned-off-by: Greg Fitzgerald <gregf@codeaurora.org>\nSigned-off-by: Khem Raj <raj.khem@gmail.com>","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/cb2b80f1d135e1291770bde76c25a009bd856edb"}]},"public":true,"created_at":"2023-09-01T17:46:46Z"}
