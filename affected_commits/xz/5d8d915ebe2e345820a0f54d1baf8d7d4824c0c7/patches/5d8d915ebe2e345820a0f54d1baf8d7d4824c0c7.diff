commit 5d8d915ebe2e345820a0f54d1baf8d7d4824c0c7
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 24 16:30:06 2024 +0800

    Bump version and soname for 5.7.0alpha.
    
    Like 5.5.0alpha, 5.7.0alpha won't be released, it's just to mark that
    the branch is not stable.
    
    Once again there is no API/ABI stability for new features in devel
    versions. The major soname won't be bumped even if API/ABI of new
    features breaks between devel releases.

diff --git a/src/liblzma/Makefile.am b/src/liblzma/Makefile.am
index 0ffc977d..eea29f40 100644
--- a/src/liblzma/Makefile.am
+++ b/src/liblzma/Makefile.am
@@ -1,126 +1,126 @@
 ## SPDX-License-Identifier: 0BSD
 ## Author: Lasse Collin
 
 SUBDIRS = api
 
 EXTRA_DIST =
 CLEANFILES =
 doc_DATA =
 
 lib_LTLIBRARIES = liblzma.la
 liblzma_la_SOURCES =
 liblzma_la_CPPFLAGS = \
 	-I$(top_srcdir)/src/liblzma/api \
 	-I$(top_srcdir)/src/liblzma/common \
 	-I$(top_srcdir)/src/liblzma/check \
 	-I$(top_srcdir)/src/liblzma/lz \
 	-I$(top_srcdir)/src/liblzma/rangecoder \
 	-I$(top_srcdir)/src/liblzma/lzma \
 	-I$(top_srcdir)/src/liblzma/delta \
 	-I$(top_srcdir)/src/liblzma/simple \
 	-I$(top_srcdir)/src/common \
 	-DTUKLIB_SYMBOL_PREFIX=lzma_
-liblzma_la_LDFLAGS = -no-undefined -version-info 10:99:5
+liblzma_la_LDFLAGS = -no-undefined -version-info 11:99:6
 
 EXTRA_DIST += liblzma_generic.map liblzma_linux.map validate_map.sh
 if COND_SYMVERS_GENERIC
 liblzma_la_LDFLAGS += \
 	-Wl,--version-script=$(top_srcdir)/src/liblzma/liblzma_generic.map
 endif
 if COND_SYMVERS_LINUX
 liblzma_la_LDFLAGS += \
 	-Wl,--version-script=$(top_srcdir)/src/liblzma/liblzma_linux.map
 endif
 
 liblzma_la_SOURCES += ../common/tuklib_physmem.c
 
 if COND_THREADS
 liblzma_la_SOURCES += ../common/tuklib_cpucores.c
 endif
 
 include $(srcdir)/common/Makefile.inc
 include $(srcdir)/check/Makefile.inc
 
 if COND_FILTER_LZ
 include $(srcdir)/lz/Makefile.inc
 endif
 
 if COND_FILTER_LZMA1
 include $(srcdir)/lzma/Makefile.inc
 include $(srcdir)/rangecoder/Makefile.inc
 endif
 
 if COND_FILTER_DELTA
 include $(srcdir)/delta/Makefile.inc
 endif
 
 if COND_FILTER_SIMPLE
 include $(srcdir)/simple/Makefile.inc
 endif
 
 
 ## Windows-specific stuff
 
 # Windows resource compiler support. libtool knows what to do with .rc
 # files, but Automake (<= 1.11 at least) doesn't know.
 #
 # We want the resource file only in shared liblzma. To avoid linking it into
 # static liblzma, we overwrite the static object file with an object file
 # compiled from empty input. Note that GNU-specific features are OK here,
 # because on Windows we are compiled with the GNU toolchain.
 #
 # The typedef in empty.c will prevent an empty translation unit, which is
 # not allowed by the C standard. It results in a warning with
 # -Wempty-translation-unit with Clang or -pedantic for GCC.
 .rc.lo:
 	$(LIBTOOL) --mode=compile $(RC) $(DEFS) $(DEFAULT_INCLUDES) \
 		$(INCLUDES) $(liblzma_la_CPPFLAGS) $(CPPFLAGS) $(RCFLAGS) \
 		-i $< -o $@
 	echo "typedef void empty;" > empty.c
 	$(COMPILE) -c empty.c -o $(*D)/$(*F).o
 
 # Remove ordinals from the generated .def file. People must link by name,
 # not by ordinal, because no one is going to track the ordinal numbers.
 liblzma.def: liblzma.la liblzma.def.in
 	sed 's/ \+@ *[0-9]\+//' liblzma.def.in > liblzma.def
 
 # Creating liblzma.def.in is a side effect of linking the library.
 liblzma.def.in: liblzma.la
 
 if COND_W32
 CLEANFILES += liblzma.def liblzma.def.in empty.c
 liblzma_la_SOURCES += liblzma_w32res.rc
 liblzma_la_LDFLAGS += -Xlinker --output-def -Xlinker liblzma.def.in
 
 ## liblzma.def.in is created only when building shared liblzma, so don't
 ## try to create liblzma.def when not building shared liblzma.
 if COND_SHARED
 doc_DATA += liblzma.def
 endif
 endif
 
 
 ## pkg-config
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = liblzma.pc
 EXTRA_DIST += liblzma.pc.in
 
 pc_verbose = $(pc_verbose_@AM_V@)
 pc_verbose_ = $(pc_verbose_@AM_DEFAULT_V@)
 pc_verbose_0 = @echo "  PC      " $@;
 
 liblzma.pc: $(srcdir)/liblzma.pc.in
 	$(AM_V_at)rm -f $@
 	$(pc_verbose)sed \
 		-e 's,@prefix[@],$(prefix),g' \
 		-e 's,@exec_prefix[@],$(exec_prefix),g' \
 		-e 's,@libdir[@],$(libdir),g' \
 		-e 's,@includedir[@],$(includedir),g' \
 		-e 's,@PACKAGE_URL[@],$(PACKAGE_URL),g' \
 		-e 's,@PACKAGE_VERSION[@],$(PACKAGE_VERSION),g' \
 		-e 's,@PTHREAD_CFLAGS[@],$(PTHREAD_CFLAGS),g' \
 		-e 's,@LIBS[@],$(LIBS),g' \
 		< $(srcdir)/liblzma.pc.in > $@ || { rm -f $@; exit 1; }
 
 clean-local:
 	rm -f liblzma.pc
diff --git a/src/liblzma/api/lzma/version.h b/src/liblzma/api/lzma/version.h
index 46686dd4..a09772a6 100644
--- a/src/liblzma/api/lzma/version.h
+++ b/src/liblzma/api/lzma/version.h
@@ -1,134 +1,134 @@
 /* SPDX-License-Identifier: 0BSD */
 
 /**
  * \file        lzma/version.h
  * \brief       Version number
  * \note        Never include this file directly. Use <lzma.h> instead.
  */
 
 /*
  * Author: Lasse Collin
  */
 
 #ifndef LZMA_H_INTERNAL
 #	error Never include this file directly. Use <lzma.h> instead.
 #endif
 
 
 /** \brief Major version number of the liblzma release. */
 #define LZMA_VERSION_MAJOR 5
 
 /** \brief Minor version number of the liblzma release. */
-#define LZMA_VERSION_MINOR 5
+#define LZMA_VERSION_MINOR 7
 
 /** \brief Patch version number of the liblzma release. */
-#define LZMA_VERSION_PATCH 2
+#define LZMA_VERSION_PATCH 0
 
 /**
  * \brief Version stability marker
  *
  * This will always be one of three values:
  *   - LZMA_VERSION_STABILITY_ALPHA
  *   - LZMA_VERSION_STABILITY_BETA
  *   - LZMA_VERSION_STABILITY_STABLE
  */
-#define LZMA_VERSION_STABILITY LZMA_VERSION_STABILITY_BETA
+#define LZMA_VERSION_STABILITY LZMA_VERSION_STABILITY_ALPHA
 
 /** \brief Commit version number of the liblzma release */
 #ifndef LZMA_VERSION_COMMIT
 #	define LZMA_VERSION_COMMIT ""
 #endif
 
 
 /*
  * Map symbolic stability levels to integers.
  */
 #define LZMA_VERSION_STABILITY_ALPHA 0
 #define LZMA_VERSION_STABILITY_BETA 1
 #define LZMA_VERSION_STABILITY_STABLE 2
 
 
 /**
  * \brief       Compile-time version number
  *
  * The version number is of format xyyyzzzs where
  *  - x = major
  *  - yyy = minor
  *  - zzz = revision
  *  - s indicates stability: 0 = alpha, 1 = beta, 2 = stable
  *
  * The same xyyyzzz triplet is never reused with different stability levels.
  * For example, if 5.1.0alpha has been released, there will never be 5.1.0beta
  * or 5.1.0 stable.
  *
  * \note        The version number of liblzma has nothing to with
  *              the version number of Igor Pavlov's LZMA SDK.
  */
 #define LZMA_VERSION (LZMA_VERSION_MAJOR * UINT32_C(10000000) \
 		+ LZMA_VERSION_MINOR * UINT32_C(10000) \
 		+ LZMA_VERSION_PATCH * UINT32_C(10) \
 		+ LZMA_VERSION_STABILITY)
 
 
 /*
  * Macros to construct the compile-time version string
  */
 #if LZMA_VERSION_STABILITY == LZMA_VERSION_STABILITY_ALPHA
 #	define LZMA_VERSION_STABILITY_STRING "alpha"
 #elif LZMA_VERSION_STABILITY == LZMA_VERSION_STABILITY_BETA
 #	define LZMA_VERSION_STABILITY_STRING "beta"
 #elif LZMA_VERSION_STABILITY == LZMA_VERSION_STABILITY_STABLE
 #	define LZMA_VERSION_STABILITY_STRING ""
 #else
 #	error Incorrect LZMA_VERSION_STABILITY
 #endif
 
 #define LZMA_VERSION_STRING_C_(major, minor, patch, stability, commit) \
 		#major "." #minor "." #patch stability commit
 
 #define LZMA_VERSION_STRING_C(major, minor, patch, stability, commit) \
 		LZMA_VERSION_STRING_C_(major, minor, patch, stability, commit)
 
 
 /**
  * \brief       Compile-time version as a string
  *
  * This can be for example "4.999.5alpha", "4.999.8beta", or "5.0.0" (stable
  * versions don't have any "stable" suffix). In future, a snapshot built
  * from source code repository may include an additional suffix, for example
  * "4.999.8beta-21-g1d92". The commit ID won't be available in numeric form
  * in LZMA_VERSION macro.
  */
 #define LZMA_VERSION_STRING LZMA_VERSION_STRING_C( \
 		LZMA_VERSION_MAJOR, LZMA_VERSION_MINOR, \
 		LZMA_VERSION_PATCH, LZMA_VERSION_STABILITY_STRING, \
 		LZMA_VERSION_COMMIT)
 
 
 /* #ifndef is needed for use with windres (MinGW-w64 or Cygwin). */
 #ifndef LZMA_H_INTERNAL_RC
 
 /**
  * \brief       Run-time version number as an integer
  *
  * This allows an application to compare if it was built against the same,
  * older, or newer version of liblzma that is currently running.
  *
  * \return The value of LZMA_VERSION macro at the compile time of liblzma
  */
 extern LZMA_API(uint32_t) lzma_version_number(void)
 		lzma_nothrow lzma_attr_const;
 
 
 /**
  * \brief       Run-time version as a string
  *
  * This function may be useful to display which version of liblzma an
  * application is currently using.
  *
  * \return      Run-time version of liblzma
  */
 extern LZMA_API(const char *) lzma_version_string(void)
 		lzma_nothrow lzma_attr_const;
 
 #endif
diff --git a/src/liblzma/liblzma_generic.map b/src/liblzma/liblzma_generic.map
index 2b0a1896..f74c1548 100644
--- a/src/liblzma/liblzma_generic.map
+++ b/src/liblzma/liblzma_generic.map
@@ -1,128 +1,128 @@
 /* SPDX-License-Identifier: 0BSD */
 
 XZ_5.0 {
 global:
 	lzma_alone_decoder;
 	lzma_alone_encoder;
 	lzma_auto_decoder;
 	lzma_block_buffer_bound;
 	lzma_block_buffer_decode;
 	lzma_block_buffer_encode;
 	lzma_block_compressed_size;
 	lzma_block_decoder;
 	lzma_block_encoder;
 	lzma_block_header_decode;
 	lzma_block_header_encode;
 	lzma_block_header_size;
 	lzma_block_total_size;
 	lzma_block_unpadded_size;
 	lzma_check_is_supported;
 	lzma_check_size;
 	lzma_code;
 	lzma_crc32;
 	lzma_crc64;
 	lzma_easy_buffer_encode;
 	lzma_easy_decoder_memusage;
 	lzma_easy_encoder;
 	lzma_easy_encoder_memusage;
 	lzma_end;
 	lzma_filter_decoder_is_supported;
 	lzma_filter_encoder_is_supported;
 	lzma_filter_flags_decode;
 	lzma_filter_flags_encode;
 	lzma_filter_flags_size;
 	lzma_filters_copy;
 	lzma_filters_update;
 	lzma_get_check;
 	lzma_index_append;
 	lzma_index_block_count;
 	lzma_index_buffer_decode;
 	lzma_index_buffer_encode;
 	lzma_index_cat;
 	lzma_index_checks;
 	lzma_index_decoder;
 	lzma_index_dup;
 	lzma_index_encoder;
 	lzma_index_end;
 	lzma_index_file_size;
 	lzma_index_hash_append;
 	lzma_index_hash_decode;
 	lzma_index_hash_end;
 	lzma_index_hash_init;
 	lzma_index_hash_size;
 	lzma_index_init;
 	lzma_index_iter_init;
 	lzma_index_iter_locate;
 	lzma_index_iter_next;
 	lzma_index_iter_rewind;
 	lzma_index_memusage;
 	lzma_index_memused;
 	lzma_index_size;
 	lzma_index_stream_count;
 	lzma_index_stream_flags;
 	lzma_index_stream_padding;
 	lzma_index_stream_size;
 	lzma_index_total_size;
 	lzma_index_uncompressed_size;
 	lzma_lzma_preset;
 	lzma_memlimit_get;
 	lzma_memlimit_set;
 	lzma_memusage;
 	lzma_mf_is_supported;
 	lzma_mode_is_supported;
 	lzma_physmem;
 	lzma_properties_decode;
 	lzma_properties_encode;
 	lzma_properties_size;
 	lzma_raw_buffer_decode;
 	lzma_raw_buffer_encode;
 	lzma_raw_decoder;
 	lzma_raw_decoder_memusage;
 	lzma_raw_encoder;
 	lzma_raw_encoder_memusage;
 	lzma_stream_buffer_bound;
 	lzma_stream_buffer_decode;
 	lzma_stream_buffer_encode;
 	lzma_stream_decoder;
 	lzma_stream_encoder;
 	lzma_stream_flags_compare;
 	lzma_stream_footer_decode;
 	lzma_stream_footer_encode;
 	lzma_stream_header_decode;
 	lzma_stream_header_encode;
 	lzma_version_number;
 	lzma_version_string;
 	lzma_vli_decode;
 	lzma_vli_encode;
 	lzma_vli_size;
 
 local:
 	*;
 };
 
 XZ_5.2 {
 global:
 	lzma_block_uncomp_encode;
 	lzma_cputhreads;
 	lzma_get_progress;
 	lzma_stream_encoder_mt;
 	lzma_stream_encoder_mt_memusage;
 } XZ_5.0;
 
 XZ_5.4 {
 global:
 	lzma_file_info_decoder;
 	lzma_filters_free;
 	lzma_lzip_decoder;
 	lzma_microlzma_decoder;
 	lzma_microlzma_encoder;
 	lzma_stream_decoder_mt;
 	lzma_str_from_filters;
 	lzma_str_list_filters;
 	lzma_str_to_filters;
 } XZ_5.2;
 
-XZ_5.5.2beta {
+XZ_5.6.0 {
 global:
 	lzma_mt_block_size;
 } XZ_5.4;
diff --git a/src/liblzma/liblzma_linux.map b/src/liblzma/liblzma_linux.map
index f0791f2c..7e4b25e1 100644
--- a/src/liblzma/liblzma_linux.map
+++ b/src/liblzma/liblzma_linux.map
@@ -1,143 +1,143 @@
 /* SPDX-License-Identifier: 0BSD */
 
 XZ_5.0 {
 global:
 	lzma_alone_decoder;
 	lzma_alone_encoder;
 	lzma_auto_decoder;
 	lzma_block_buffer_bound;
 	lzma_block_buffer_decode;
 	lzma_block_buffer_encode;
 	lzma_block_compressed_size;
 	lzma_block_decoder;
 	lzma_block_encoder;
 	lzma_block_header_decode;
 	lzma_block_header_encode;
 	lzma_block_header_size;
 	lzma_block_total_size;
 	lzma_block_unpadded_size;
 	lzma_check_is_supported;
 	lzma_check_size;
 	lzma_code;
 	lzma_crc32;
 	lzma_crc64;
 	lzma_easy_buffer_encode;
 	lzma_easy_decoder_memusage;
 	lzma_easy_encoder;
 	lzma_easy_encoder_memusage;
 	lzma_end;
 	lzma_filter_decoder_is_supported;
 	lzma_filter_encoder_is_supported;
 	lzma_filter_flags_decode;
 	lzma_filter_flags_encode;
 	lzma_filter_flags_size;
 	lzma_filters_copy;
 	lzma_filters_update;
 	lzma_get_check;
 	lzma_index_append;
 	lzma_index_block_count;
 	lzma_index_buffer_decode;
 	lzma_index_buffer_encode;
 	lzma_index_cat;
 	lzma_index_checks;
 	lzma_index_decoder;
 	lzma_index_dup;
 	lzma_index_encoder;
 	lzma_index_end;
 	lzma_index_file_size;
 	lzma_index_hash_append;
 	lzma_index_hash_decode;
 	lzma_index_hash_end;
 	lzma_index_hash_init;
 	lzma_index_hash_size;
 	lzma_index_init;
 	lzma_index_iter_init;
 	lzma_index_iter_locate;
 	lzma_index_iter_next;
 	lzma_index_iter_rewind;
 	lzma_index_memusage;
 	lzma_index_memused;
 	lzma_index_size;
 	lzma_index_stream_count;
 	lzma_index_stream_flags;
 	lzma_index_stream_padding;
 	lzma_index_stream_size;
 	lzma_index_total_size;
 	lzma_index_uncompressed_size;
 	lzma_lzma_preset;
 	lzma_memlimit_get;
 	lzma_memlimit_set;
 	lzma_memusage;
 	lzma_mf_is_supported;
 	lzma_mode_is_supported;
 	lzma_physmem;
 	lzma_properties_decode;
 	lzma_properties_encode;
 	lzma_properties_size;
 	lzma_raw_buffer_decode;
 	lzma_raw_buffer_encode;
 	lzma_raw_decoder;
 	lzma_raw_decoder_memusage;
 	lzma_raw_encoder;
 	lzma_raw_encoder_memusage;
 	lzma_stream_buffer_bound;
 	lzma_stream_buffer_decode;
 	lzma_stream_buffer_encode;
 	lzma_stream_decoder;
 	lzma_stream_encoder;
 	lzma_stream_flags_compare;
 	lzma_stream_footer_decode;
 	lzma_stream_footer_encode;
 	lzma_stream_header_decode;
 	lzma_stream_header_encode;
 	lzma_version_number;
 	lzma_version_string;
 	lzma_vli_decode;
 	lzma_vli_encode;
 	lzma_vli_size;
 
 local:
 	*;
 };
 
 XZ_5.2 {
 global:
 	lzma_block_uncomp_encode;
 	lzma_cputhreads;
 	lzma_get_progress;
 	lzma_stream_encoder_mt;
 	lzma_stream_encoder_mt_memusage;
 } XZ_5.0;
 
 XZ_5.1.2alpha {
 global:
 	lzma_stream_encoder_mt;
 	lzma_stream_encoder_mt_memusage;
 } XZ_5.0;
 
 XZ_5.2.2 {
 global:
 	lzma_block_uncomp_encode;
 	lzma_cputhreads;
 	lzma_get_progress;
 	lzma_stream_encoder_mt;
 	lzma_stream_encoder_mt_memusage;
 } XZ_5.1.2alpha;
 
 XZ_5.4 {
 global:
 	lzma_file_info_decoder;
 	lzma_filters_free;
 	lzma_lzip_decoder;
 	lzma_microlzma_decoder;
 	lzma_microlzma_encoder;
 	lzma_stream_decoder_mt;
 	lzma_str_from_filters;
 	lzma_str_list_filters;
 	lzma_str_to_filters;
 } XZ_5.2;
 
-XZ_5.5.2beta {
+XZ_5.6.0 {
 global:
 	lzma_mt_block_size;
 } XZ_5.4;