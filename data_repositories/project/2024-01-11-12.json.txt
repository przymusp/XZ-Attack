{"id":"34746708174","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":16596797224,"size":7,"distinct_size":7,"ref":"refs/heads/crc_edits","head":"35c03ec6bf66f1b159964c9721a2dce0e2859b20","before":"172dfb108c24ea13e0e65d0f7a9d9325779e0d0e","commits":[{"sha":"9523c1300d22fa715765c181cf991d14d6112fb1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define crc_attr_no_sanitize_address in crc_common.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/9523c1300d22fa715765c181cf991d14d6112fb1"},{"sha":"d164ac0e62904126f7920c25f9a2875c8cd28b97","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Simplify existing cases with lzma_attr_no_sanitize_address.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/d164ac0e62904126f7920c25f9a2875c8cd28b97"},{"sha":"e3833e297dfb5021a197bda34ba2a795e30aaf8a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: crc_clmul.c: Add crc_attr_target macro.\n\nThis reduces the number of the complex #if directives.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e3833e297dfb5021a197bda34ba2a795e30aaf8a"},{"sha":"419f55f9dfc2df8792902b8953d50690121afeea","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Avoid extern lzma_crc32_clmul() and lzma_crc64_clmul().\n\nA CLMUL-only build will have the crcxx_clmul() inlined into\nlzma_crcxx(). Previously a jump to the extern lzma_crcxx_clmul()\nwas needed. Notes about shared liblzma on ELF platforms:\n\n  - On platforms that support ifunc and -fvisibility=hidden, this\n    was silly because CLMUL-only build would have that single extra\n    jump instruction of extra overhead.\n\n  - On platforms that support neither -fvisibility=hidden nor linker\n    version script (liblzma*.map), jumping to lzma_crcxx_clmul()\n    would go via PLT so a few more instructions of overhead (still\n    not a big issue but silly nevertheless).\n\nThere was a downside with static liblzma too: if an application only\nneeds lzma_crc64(), static linking would make the linker include the\nCLMUL code for both CRC32 and CRC64 from crc_x86_clmul.o even though\nthe CRC32 code wouldn't be needed, thus increasing code size of the\nexecutable (assuming that -ffunction-sections isn't used).\n\nAlso, now compilers are likely to inline crc_simd_body()\neven if they don't support the always_inline attribute\n(or MSVC's __forceinline). Quite possibly all compilers\nthat build the code do support such an attribute. But now\nit likely isn't a problem even if the attribute wasn't supported.\n\nNow all x86-specific stuff is in crc_x86_clmul.h. If other archs\nThe other archs can then have their own headers with their own\nis_clmul_supported() and crcxx_clmul().\n\nAnother bonus is that the build system doesn't need to care if\ncrc_clmul.c is needed.\n\nis_clmul_supported() stays as inline function as it's not needed\nwhen doing a CLMUL-only build (avoids a warning about unused function).","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/419f55f9dfc2df8792902b8953d50690121afeea"},{"sha":"3dbed75b0b9c7087c76fe687acb5cf582cd57b99","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix a comment in crc_common.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3dbed75b0b9c7087c76fe687acb5cf582cd57b99"},{"sha":"66f080e8016129576536482ac377e2ecac7a2b90","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Rename arch-specific CRC functions and macros.\n\nCRC_CLMUL was split to CRC_ARCH_OPTIMIZED and CRC_X86_CLMUL.\nCRC_ARCH_OPTIMIZED is defined when an arch-optimized version is used.\nCurrently the x86 CLMUL implementations are the only arch-optimized\nversions, and these also use the CRC_x86_CLMUL macro to tell when\ncrc_x86_clmul.h needs to be included.\n\nis_clmul_supported() was renamed to is_arch_extension_supported().\ncrc32_clmul() and crc64_clmul() were renamed to\ncrc32_arch_optimized() and crc64_arch_optimized().\nThis way the names make sense with arch-specific non-CLMUL\nimplementations as well.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/66f080e8016129576536482ac377e2ecac7a2b90"},{"sha":"35c03ec6bf66f1b159964c9721a2dce0e2859b20","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Update CLMUL comments to more generic wording.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/35c03ec6bf66f1b159964c9721a2dce0e2859b20"}]},"public":true,"created_at":"2024-01-11T12:40:24Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
