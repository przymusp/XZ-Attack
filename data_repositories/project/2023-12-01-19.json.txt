{"id":"33802204956","type":"IssueCommentEvent","actor":{"id":79209337,"login":"mvatsyk-lsg","display_login":"mvatsyk-lsg","gravatar_id":"","url":"https://api.github.com/users/mvatsyk-lsg","avatar_url":"https://avatars.githubusercontent.com/u/79209337?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/73","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/73/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/73/events","html_url":"https://github.com/tukaani-project/xz/pull/73","id":2014291983,"node_id":"PR_kwDOIQBEvs5gi94-","number":73,"title":"Improve existing oss-fuzz coverage","user":{"login":"mvatsyk-lsg","id":79209337,"node_id":"MDQ6VXNlcjc5MjA5MzM3","avatar_url":"https://avatars.githubusercontent.com/u/79209337?v=4","gravatar_id":"","url":"https://api.github.com/users/mvatsyk-lsg","html_url":"https://github.com/mvatsyk-lsg","followers_url":"https://api.github.com/users/mvatsyk-lsg/followers","following_url":"https://api.github.com/users/mvatsyk-lsg/following{/other_user}","gists_url":"https://api.github.com/users/mvatsyk-lsg/gists{/gist_id}","starred_url":"https://api.github.com/users/mvatsyk-lsg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mvatsyk-lsg/subscriptions","organizations_url":"https://api.github.com/users/mvatsyk-lsg/orgs","repos_url":"https://api.github.com/users/mvatsyk-lsg/repos","events_url":"https://api.github.com/users/mvatsyk-lsg/events{/privacy}","received_events_url":"https://api.github.com/users/mvatsyk-lsg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2023-11-28T12:06:38Z","updated_at":"2023-12-01T19:04:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/73","html_url":"https://github.com/tukaani-project/xz/pull/73","diff_url":"https://github.com/tukaani-project/xz/pull/73.diff","patch_url":"https://github.com/tukaani-project/xz/pull/73.patch","merged_at":null},"body":"## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [ ] Build was run locally and without warnings or errors\r\n- [ ] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\n<!-- Please try to limit your pull request to one type, submit multiple\r\npull requests if needed. --> \r\n\r\nPlease check the type of change your PR introduces:\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other (please describe): \r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying. -->\r\n\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: N/A\r\n\r\n\r\n## What is the new behavior?\r\n<!-- Please describe the behavior or changes that are being added by this\r\nPR. -->\r\n\r\n- Total number of fuzzers increased from 1 to 12\r\n- 6 new fuzzers for decompressing supported archive types\r\n- 5 new fuzzers for compressing data into supported archive types\r\n- Added LZMA Raw test files based on the existing `.lzma` ones\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n<!-- If this introduces a breaking change, please describe the impact and\r\nmigration path for existing applications below. -->\r\nThis pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.\r\n\r\n## Other information\r\n\r\n<!-- Any other information that is important to this PR. -->\r\nThe improvements to the fuzzing setup were made as a part of Google ISE project.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/73/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":1},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/73/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1836630018","html_url":"https://github.com/tukaani-project/xz/pull/73#issuecomment-1836630018","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/73","id":1836630018,"node_id":"IC_kwDOIQBEvs5teMAC","user":{"login":"mvatsyk-lsg","id":79209337,"node_id":"MDQ6VXNlcjc5MjA5MzM3","avatar_url":"https://avatars.githubusercontent.com/u/79209337?v=4","gravatar_id":"","url":"https://api.github.com/users/mvatsyk-lsg","html_url":"https://github.com/mvatsyk-lsg","followers_url":"https://api.github.com/users/mvatsyk-lsg/followers","following_url":"https://api.github.com/users/mvatsyk-lsg/following{/other_user}","gists_url":"https://api.github.com/users/mvatsyk-lsg/gists{/gist_id}","starred_url":"https://api.github.com/users/mvatsyk-lsg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mvatsyk-lsg/subscriptions","organizations_url":"https://api.github.com/users/mvatsyk-lsg/orgs","repos_url":"https://api.github.com/users/mvatsyk-lsg/repos","events_url":"https://api.github.com/users/mvatsyk-lsg/events{/privacy}","received_events_url":"https://api.github.com/users/mvatsyk-lsg/received_events","type":"User","site_admin":false},"created_at":"2023-12-01T19:04:41Z","updated_at":"2023-12-01T19:04:41Z","author_association":"NONE","body":"Hi @Larhzu !\r\n\r\n> Seems that [renaming a fuzz target](https://google.github.io/oss-fuzz/faq/#what-happens-when-i-rename-a-fuzz-target-) requires renaming the accumulated corpora too.\r\n\r\nIn the existing setup, the corpora are generated dynamically in a [build.sh](https://github.com/google/oss-fuzz/pull/11279/commits/97ba2c05158912b2c8a5a2dd6c721fa31f2ed819) file. So, any modifications have to be done in a separate [pull request](https://github.com/google/oss-fuzz/pull/11279). After we merge this pull request, I will go ahead and update the latter one to properly reflect all the changes. \r\n\r\n> Does adding more fuzzers mean that the project-specific fuzzing resources (processor time) will be divided between the fuzzers? With a quick look I didn't find any advice about resource usage in OSS-Fuzz docs and it's not discussed much in this thread either.\r\n\r\nI did not find any hard cap of the execution time for the OSS Fuzz itself. However, their CI integration, CIFuzz will divide the [shared fuzzing time of 10 minutes](https://google.github.io/oss-fuzz/getting-started/continuous-integration/#how-it-works) between all fuzz targets in the project. \r\n\r\nGetting back to the OSS Fuzz, each fuzz target will be run on [a dedicated machine](https://google.github.io/oss-fuzz/faq/#what-are-the-specs-on-your-machines) with 1 CPU and a cap of ~ 2GB RAM. \r\n\r\nSince the fuzzers are written in C/C++, I doubt that introducing new fuzzers, at least for now, will decrease the overall quality of the fuzzing output. On my test setup inside a VM with similar hardware parameters, the fuzzing and the generation of an introspector report took around 5 minutes.\r\n\r\n> The value of code coverage in fuzzing is unclear. If extending coverage by a few simple lines of code could slow down fuzzing of more important parts of the code, does it make sense to extend fuzzing coverage in that case?\r\n\r\nThis absolutely makes sense. However, current fuzzing setup is very limited and covers only half of the lib (since `--disable-encoders` flag is used during the compilation). Its runtime coverage is 116/162 functions. The setup proposed in this pull request extends the fuzzing coverage to all common encoders and decoders to increase the runtime coverage to 270/360 functions.\r\n\r\n> fuzz_encode_alone.c would test end of payload marker (EOPM) encoding in LZMA but otherwise it doesn't test much that won't be tested by fuzz_encode_stream.c. They both use the LZMA encoder in the end. So it seems that fuzz_encode_alone.c isn't useful and could maybe even be harmful due to resource usage unless the fuzzers are smart enough to spot when code paths become identical.\r\n\r\n> fuzz_decode_alone.c splits into three different decoders depending on the input. Yet the three decoders are fuzzed separately too (stream, alone, lzip). So the only extra fuzzed thing is the small auto_decoder.c.\r\n\r\nWe can remove those, however this decreases the runtime fuzzing coverage from 270/360 to 249/360 functions. Should we proceed with deleting the fuzz targets?","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1836630018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-12-01T19:04:43Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
