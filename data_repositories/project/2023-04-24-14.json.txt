{"id":"28622233467","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":13406653987,"size":5,"distinct_size":5,"ref":"refs/heads/lzma_decoder_improvements","head":"c2c9903083fd2ae2db31997ad014bf75a3fb8243","before":"056732280b01a74e3ca8b64f3e7fc430123a366a","commits":[{"sha":"6768414d5f61e73c763af89104dc32330826c9a9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Creates Non-resumable and Resumable modes for lzma_decoder.\n\nThe new decoder resumes the first decoder loop in the Resumable mode.\nThen, the code executes in Non-resumable mode until it detects that it\ncannot guarentee to have enough input/output to decode another symbol.\n\nThe Resumable mode is how the decoder has always worked. Before decoding\nevery input bit, it checks if there is enough space and will save its\nlocation to be resumed later. When the decoder has more input/output,\nit jumps back to the correct sequence in the Resumable mode code.\n\nWhen the input/output buffers are large, the Resumable mode is much\nslower than the Non-resumable because it has more branches and is harder\nfor the compiler to optimize since it is in a large switch block.\n\nEarly benchmarking shows siginificant time improvement (8-10% on gcc and\nclang x86) by using the Non-resumable code as much as possible.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6768414d5f61e73c763af89104dc32330826c9a9"},{"sha":"755b83f3eb131f54a2f952a150c0f6efec140ac7","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Replace probability struct members in lzma decoder.\n\nThe probability struct members are replaced with a single contiguous\nprobability array. Many macros are defined to help index into this array\nto find the proper sub-models.\n\nThe purpose of this is to try to improve speed. Using a single\ncontiguous array may give compilers a chance for additional\noptimizations. In addition, this could be helpful in a future assembly\nimplementation since the assembly would not have to work with the struct\nas much. The assembly version can easily copy the macros to find the\nsub-models.\n\nMany of the ideas for this were taken from Igor Pavlov's implementation\nin LZMA SDK.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/755b83f3eb131f54a2f952a150c0f6efec140ac7"},{"sha":"2968843e747e9b6e4a6770424e6dfec670aa04b3","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Refactor lzma_decoder.c.\n\nUse the new contiguous probability array macros instead of the old\nstruct sub-arrays.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2968843e747e9b6e4a6770424e6dfec670aa04b3"},{"sha":"86e8b8515a75af24fe313baf44aa4a9de20a5252","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Update the range decoder for new probability array.\n\nThe range decoder macros now expect a pointer to the probability instead\nof the array[index] for the probability.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/86e8b8515a75af24fe313baf44aa4a9de20a5252"},{"sha":"c2c9903083fd2ae2db31997ad014bf75a3fb8243","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Remove comment from lzma_decoder.c.\n\nThe comment about violating the C standard is no longer needed. Now, the\nprobability arrays have been combined into one, so there is no more risk\nof doing pointer arithmetic past the beginning of the array.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c2c9903083fd2ae2db31997ad014bf75a3fb8243"}]},"public":true,"created_at":"2023-04-24T14:32:21Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"28622266356","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":13406669205,"size":9,"distinct_size":6,"ref":"refs/heads/lzma_decoder_improvements","head":"a4ad7e0163c06231feb45ba09aa0c9607babdf5a","before":"c2c9903083fd2ae2db31997ad014bf75a3fb8243","commits":[{"sha":"7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"tuklib_integer: Use __builtin_clz() with Clang.\n\nClang has support for __builtin_clz(), but previously Clang would\nfallback to either the MSVC intrinsic or the regular C code. This was\ndiscovered due to a bug where a new version of Clang required the\n<intrin.h> header file in order to use the MSVC intrinsics.\n\nThanks to Anton Kochkov for notifying us about the bug.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7"},{"sha":"f41df2ac2fed347d3f107f3533e76e000d29c6cb","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Windows: Include <intrin.h> when needed.\n\nLegacy Windows did not need to #include <intrin.h> to use the MSVC\nintrinsics. Newer versions likely just issue a warning, but the MSVC\ndocumentation says to include the header file for the intrinsics we use.\n\nGCC and Clang can \"pretend\" to be MSVC on Windows, so extra checks are\nneeded in tuklib_integer.h to only include <intrin.h> when it will is\nactually needed.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f41df2ac2fed347d3f107f3533e76e000d29c6cb"},{"sha":"78ccd93951f9e988d447bcdd70b24f6df5448d1d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/78ccd93951f9e988d447bcdd70b24f6df5448d1d"},{"sha":"f531e3a8a5e516fa63cc2b2af3914b14a1685d69","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Creates separate \"safe\" and \"fast\" range decoder modes.\n\nThe new \"fast\" range decoder mode is the same as the \"safe\" mode, but\ndoes not worry about running out of input or output mid operation. The\n\"fast\" mode can only be used when it is known that there are enough\ninput and output bytes available to complete. When the buffers are close\nto fully consumed, the \"safe\" operations must be used instead.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f531e3a8a5e516fa63cc2b2af3914b14a1685d69"},{"sha":"b0157333179a574225ab017b1fe030d524f4b3aa","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Creates Non-resumable and Resumable modes for lzma_decoder.\n\nThe new decoder resumes the first decoder loop in the Resumable mode.\nThen, the code executes in Non-resumable mode until it detects that it\ncannot guarentee to have enough input/output to decode another symbol.\n\nThe Resumable mode is how the decoder has always worked. Before decoding\nevery input bit, it checks if there is enough space and will save its\nlocation to be resumed later. When the decoder has more input/output,\nit jumps back to the correct sequence in the Resumable mode code.\n\nWhen the input/output buffers are large, the Resumable mode is much\nslower than the Non-resumable because it has more branches and is harder\nfor the compiler to optimize since it is in a large switch block.\n\nEarly benchmarking shows siginificant time improvement (8-10% on gcc and\nclang x86) by using the Non-resumable code as much as possible.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b0157333179a574225ab017b1fe030d524f4b3aa"},{"sha":"f62e7e19cee2b8d90bda58c28eb6169cc198d1aa","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Replace probability struct members in lzma decoder.\n\nThe probability struct members are replaced with a single contiguous\nprobability array. Many macros are defined to help index into this array\nto find the proper sub-models.\n\nThe purpose of this is to try to improve speed. Using a single\ncontiguous array may give compilers a chance for additional\noptimizations. In addition, this could be helpful in a future assembly\nimplementation since the assembly would not have to work with the struct\nas much. The assembly version can easily copy the macros to find the\nsub-models.\n\nMany of the ideas for this were taken from Igor Pavlov's implementation\nin LZMA SDK.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f62e7e19cee2b8d90bda58c28eb6169cc198d1aa"},{"sha":"c4577685ae092820298f5b988ac6a11e29ea2a1e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Refactor lzma_decoder.c.\n\nUse the new contiguous probability array macros instead of the old\nstruct sub-arrays.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c4577685ae092820298f5b988ac6a11e29ea2a1e"},{"sha":"fcb7af96fcc5d4cc69e4f06b00a1fec3fca59d7e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Update the range decoder for new probability array.\n\nThe range decoder macros now expect a pointer to the probability instead\nof the array[index] for the probability.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/fcb7af96fcc5d4cc69e4f06b00a1fec3fca59d7e"},{"sha":"a4ad7e0163c06231feb45ba09aa0c9607babdf5a","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Remove comment from lzma_decoder.c.\n\nThe comment about violating the C standard is no longer needed. Now, the\nprobability arrays have been combined into one, so there is no more risk\nof doing pointer arithmetic past the beginning of the array.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a4ad7e0163c06231feb45ba09aa0c9607babdf5a"}]},"public":true,"created_at":"2023-04-24T14:33:29Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
