{"id":"32954775482","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15623252536,"size":20,"distinct_size":2,"ref":"refs/heads/visibility_hidden","head":"41113fe30a47f6fd3e30cb4494dd538e86212edf","before":"5e57fe2f0acef3cbcd3160e5e9b43a267ec829fb","commits":[{"sha":"2e2cd11535ad77364cf021297e0b3f162fa3a3d0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Simplify detection of Capsicum support.\n\nThis removes support for FreeBSD 10.0 and 10.1 which used\n<sys/capability.h> instead of <sys/capsicum.h>. Support for\nFreeBSD 10.1 ended on 2016-12-31. So now FreeBSD >= 10.2 is\nrequired to enable Capsicum support.\n\nThis also removes support for Capsicum on Linux (libcaprights)\nwhich seems to have been unmaintained since 2017 and Linux 4.11:\nhttps://github.com/google/capsicum-linux","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2e2cd11535ad77364cf021297e0b3f162fa3a3d0"},{"sha":"3f53870c249945d657ca3d75e0993e6267d71f75","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Add sandboxing support.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3f53870c249945d657ca3d75e0993e6267d71f75"},{"sha":"bf011352528ae3539ea7b780b45b96736ee57a99","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Use FATAL_ERROR if user-supplied options aren't understood.\n\nThis way typos are caught quickly and compounding error messages\nare avoided (a single typo could cause more than one error).\n\nThis keeps using SEND_ERROR when the system is lacking a feature\n(like threading library or sandboxing method). This way the whole\nconfiguration log will be generated in case someone wishes to\nreport a problem upstream.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/bf011352528ae3539ea7b780b45b96736ee57a99"},{"sha":"3a1e9fd031b9320d769d63b503ef4e82e1b6ea8c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Edit threading related messages.\n\nIt's mostly to change from \"thread method\" to \"threading method\".","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3a1e9fd031b9320d769d63b503ef4e82e1b6ea8c"},{"sha":"8276c7f41c671eee4aa3239490658b23dcfd3021","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz: Support basic sandboxing with Linux Landlock (ABI versions 1-3).\n\nIt is enabled only when decompressing one file to stdout,\nsimilar to how Capsicum is used.\n\nLandlock was added in Linux 5.13.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8276c7f41c671eee4aa3239490658b23dcfd3021"},{"sha":"fa1609eb9393ecd30decfed4891c907829f06710","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Docs: Update INSTALL about sandboxing support.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/fa1609eb9393ecd30decfed4891c907829f06710"},{"sha":"91c435cf1c7a1e893706d4d716dfd361621ed824","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Don't shadow the cache entry ENABLE_THREADS with a normal variable.\n\nUsing set(ENABLE_THREADS \"posix\") is confusing because it sets\na new normal variable and leaves the cache entry with the same\nname unchanged. The intent wasn't to change the cache entry so\nthis switches to a different variable name.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/91c435cf1c7a1e893706d4d716dfd361621ed824"},{"sha":"b1408987ea832e2760e478ae960a636df17a1363","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Allow disabling the sandbox in ci_build.sh.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b1408987ea832e2760e478ae960a636df17a1363"},{"sha":"5e3d890f8862a7d4fbef5e38e11b6c9fbd98f468","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Disable sandboxing in fsanitize=address,undefined job.\n\nThe sandboxing on Linux now supports Landlock, which restricts all\nsupported filesystem actions after xz opens the files it needs. The\nsandbox is only enabled when one file is input and we are writing to\nstandard out. With fsanitize=address,undefined, the instrumentation\nneeds to read additional files after the sandbox is in place. This\nforces all xz based test to fail, so the sandbox must instead be\ndisabled.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5e3d890f8862a7d4fbef5e38e11b6c9fbd98f468"},{"sha":"88588b1246d8c26ffbc138b3e5c413c5f14c3179","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Detect -fsanitize= in CFLAGS and incompatible build options.\n\nNow configure will fail if -fsanitize= is found in CFLAGS\nand sanitizer-incompatible ifunc or Landlock sandboxing\nwould be used. These are incompatible with one or more sanitizers.\nIt's simpler to reject all -fsanitize= uses instead of trying to\npass those that might not cause problems.\n\nCMake-based build was updated similarly. It lets the configuration\nfinish (SEND_ERROR instead of FATAL_ERROR) so that both error\nmessages can be seen at once.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/88588b1246d8c26ffbc138b3e5c413c5f14c3179"},{"sha":"e67aaf698de75c73443a5ec786781cbf2034461d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix the import library filename.\n\nBoth PREFIX and IMPORT_PERFIX have to be set to \"\" to get\nliblzma.dll and liblzma.dll.a.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e67aaf698de75c73443a5ec786781cbf2034461d"},{"sha":"08d12595f486890cf601b87f36ee0ddbce57728e","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Change one CMAKE_CURRENT_SOURCE_DIR to CMAKE_CURRENT_LIST_DIR.\n\nIn this case they have identical values.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/08d12595f486890cf601b87f36ee0ddbce57728e"},{"sha":"80e0750e3996c1c659e972ce9cf789ca2e99f702","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Create liblzma.def when building liblzma.dll with MinGW-w64.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/80e0750e3996c1c659e972ce9cf789ca2e99f702"},{"sha":"a7d1b2825c49dc83f1910eeb8ba0f1dfbd886d91","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add Cflags.private to liblzma.pc.in for MSYS2.\n\nIt properly adds -DLZMA_API_STATIC when compiling code that\nwill be linked against static liblzma. Having it there on\nsystems other than Windows does no harm.\n\nSee: https://www.msys2.org/docs/pkgconfig/","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a7d1b2825c49dc83f1910eeb8ba0f1dfbd886d91"},{"sha":"2add71966f891d315105d6245f724ed4f43a4eff","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Rearrange the PACKAGE_ variables.\n\nThe windres workaround now replaces spaces with \\x20 so\nthe package name isn't repeated.\n\nThese changes will help with creation of liblzma.pc.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2add71966f891d315105d6245f724ed4f43a4eff"},{"sha":"1bc548b8210366e44ba35b0b11577a8e328c1228","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Generate and install liblzma.pc if not using MSVC.\n\nAutotools based build uses -pthread and thus adds it to Libs.private\nin liblzma.pc. CMake doesn't use -pthread at all if pthread functions\nare available in libc so Libs.private doesn't get -pthread either.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1bc548b8210366e44ba35b0b11577a8e328c1228"},{"sha":"597f49b61475438a43a417236989b2acc968a686","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Use -D_FILE_OFFSET_BITS=64 if (and only if) needed.\n\nA CMake option LARGE_FILE_SUPPORT is created if and only if\n-D_FILE_OFFSET_BITS=64 affects sizeof(off_t).\n\nThis is needed on many 32-bit platforms and even with 64-bit builds\nwith MinGW-w64 to get support for files larger than 2 GiB.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/597f49b61475438a43a417236989b2acc968a686"},{"sha":"2c7ee92e44e1e66f0a427555233eb22c78f6c4f8","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Refer to MinGW-w64 instead of MinGW in the API headers.\n\nMinGW (formely a MinGW.org Project, later the MinGW.OSDN Project\nat <https://osdn.net/projects/mingw/>) has GCC 9.2.0 as the\nmost recent GCC package (released 2021-02-02). The project might\nstill be alive but majority of people have switched to MinGW-w64.\nThus it seems clearer to refer to MinGW-w64 in our API headers too.\nBuilding with MinGW is likely to still work but I haven't tested it\nin the recent years.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2c7ee92e44e1e66f0a427555233eb22c78f6c4f8"},{"sha":"a2f5ca706acc6f7715b8d260a8c6ed50d7717478","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define lzma_attr_visibility_hidden in common.h.\n\nIn ELF shared libs:\n\n-fvisibility=hidden affects definitions of symbols but not\ndeclarations.[*] This doesn't affect direct calls to functions\ninside liblzma as a linker can replace a call to lzma_foo@plt\nwith a call directly to lzma_foo when -fvisibility=hidden is used.\n\n[*] It has to be like this because otherwise every installed\n    header file would need to explictly set the symbol visibility\n    to default.\n\nWhen accessing extern variables that aren't defined in the\nsame translation unit, compiler assumes that the variable has\nthe default visibility and thus indirection is needed. Unlike\nfunction calls, linker cannot optimize this.\n\nUsing __attribute__((__visibility__(\"hidden\"))) with the extern\nvariable declarations tells the compiler that indirection isn't\nneeded because the definition is in the same shared library.\n\nAbout 15+ years ago, someone told me that it would be good if\nthe CRC tables would be defined in the same translation unit\nas the C code of the CRC functions. While I understood that it\ncould help a tiny amount, I didn't want to change the code because\na separate translation unit for the CRC tables was needed for the\nx86 assembly code anyway. But when visibility attributes are\nsupported, simply marking the extern declaration with the\nhidden attribute will get identical result. When there are only\na few affected variables, this is trivial to do. I wish I had\nunderstood this back then already.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a2f5ca706acc6f7715b8d260a8c6ed50d7717478"},{"sha":"41113fe30a47f6fd3e30cb4494dd538e86212edf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use lzma_attr_visibility_hidden on private extern declarations.\n\nThese variables are internal to liblzma and not exposed in the API.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/41113fe30a47f6fd3e30cb4494dd538e86212edf"}]},"public":true,"created_at":"2023-10-30T16:07:10Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32954917441","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15623318004,"size":1,"distinct_size":1,"ref":"refs/heads/always_inline","head":"aca763d31e72bfc925ce13c2ad3508dedba59b78","before":"0d49f9b87757eab688ab2c80bb24b7a11964665a","commits":[{"sha":"aca763d31e72bfc925ce13c2ad3508dedba59b78","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add a note why crc_always_inline exists for now.\n\nSolaris Studio is a possible example (not tested) which\nsupports the always_inline attribute but might not get\ndetected by the common.h #ifdefs.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/aca763d31e72bfc925ce13c2ad3508dedba59b78"}]},"public":true,"created_at":"2023-10-30T16:11:37Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32954962604","type":"PushEvent","actor":{"id":6999905,"login":"DmitriyMV","display_login":"DmitriyMV","gravatar_id":"","url":"https://api.github.com/users/DmitriyMV","avatar_url":"https://avatars.githubusercontent.com/u/6999905?"},"repo":{"id":475951353,"name":"DmitriyMV/tools","url":"https://api.github.com/repos/DmitriyMV/tools"},"payload":{"repository_id":475951353,"push_id":15623339743,"size":8,"distinct_size":8,"ref":"refs/heads/main","head":"5a2240995c086b97d05189ebc965c5ff281e65ad","before":"33fb4b35661b12fcf023ec96746e04281cc8c911","commits":[{"sha":"fa388de914cc3efd54a23ad2a650437e600fbb09","author":{"email":"andrey.smirnov@siderolabs.com","name":"Andrey Smirnov"},"message":"feat: update Go to 1.21.1\n\nSee https://go.dev/doc/devel/release#go1.21.0\n\nSigned-off-by: Andrey Smirnov <andrey.smirnov@siderolabs.com>","distinct":true,"url":"https://api.github.com/repos/DmitriyMV/tools/commits/fa388de914cc3efd54a23ad2a650437e600fbb09"},{"sha":"7fa8bb542cb2984992e002ccceb0d655d336be96","author":{"email":"andrey.smirnov@siderolabs.com","name":"Andrey Smirnov"},"message":"feat: update releases\n\n```\n| Package | Update | Change |\n|---|---|---|\n| [abseil/abseil-cpp](https://togithub.com/abseil/abseil-cpp) | minor | `20230125.3` -> `20230802.1` |\n| [curl/curl](https://togithub.com/curl/curl) | minor | `8_2_1` -> `8_3_0` |\n| git://git.kernel.org/pub/scm/git/git.git | minor | `2.41.0` -> `2.42.0` |\n| git://git.kernel.org/pub/scm/utils/util-linux/util-linux.git | patch | `2.39.1` -> `2.39.2` |\n| git://git.openssl.org/openssl.git | patch | `1_1_1v` -> `1_1_1w` |\n| git://git.savannah.gnu.org/coreutils.git | minor | `9.3` -> `9.4` |\n| git://git.savannah.gnu.org/gettext.git | patch | `0.22` -> `0.22.2` |\n| git://git.savannah.gnu.org/gzip.git | minor | `1.12` -> `1.13` |\n| [grpc/grpc-go](https://togithub.com/grpc/grpc-go) | minor | `v1.57.0` -> `v1.58.2` |\n| [https://gitlab.com/gnutls/gnutls.git](https://gitlab.com/gnutls/gnutls) | patch | `3.8.0` -> `3.8.1` |\n| [https://gitlab.inria.fr/mpfr/mpfr.git](https://gitlab.inria.fr/mpfr/mpfr) | patch | `4.2.0` -> `4.2.1` |\n| [mesonbuild/meson](https://togithub.com/mesonbuild/meson) | patch | `1.2.0` -> `1.2.1` |\n| [python/cpython](https://togithub.com/python/cpython) | patch | `3.11.4` -> `3.11.5` |\n| [siderolabs/bldr](https://togithub.com/siderolabs/bldr) | patch | `v0.2.1` -> `v0.2.2` |\n| [tukaani-project/xz](https://togithub.com/tukaani-project/xz) | patch | `v5.4.3` -> `v5.4.4` |\n| [protocolbuffers/protobuf](https://togithub.com/protocolbuffers/protobuf) | major | `23.4` -> `24.3` |\n```\n\nSigned-off-by: Andrey Smirnov <andrey.smirnov@siderolabs.com>","distinct":true,"url":"https://api.github.com/repos/DmitriyMV/tools/commits/7fa8bb542cb2984992e002ccceb0d655d336be96"},{"sha":"09023c1d6eec46f43ccdba3bd703d0d3ac72220e","author":{"email":"andrey.smirnov@siderolabs.com","name":"Andrey Smirnov"},"message":"feat: update OpenSSL to 3.1.3\n\nOpenSSL 1.1.x is reaching EoL, so time to jump.\n\nSigned-off-by: Andrey Smirnov <andrey.smirnov@siderolabs.com>","distinct":true,"url":"https://api.github.com/repos/DmitriyMV/tools/commits/09023c1d6eec46f43ccdba3bd703d0d3ac72220e"},{"sha":"35948af8c3f955d02900c9dcd76f1c9e33502f52","author":{"email":"andrey.smirnov@siderolabs.com","name":"Andrey Smirnov"},"message":"feat: update Go to 1.21.3\n\nSee https://github.com/golang/go/issues/63417\n\nSigned-off-by: Andrey Smirnov <andrey.smirnov@siderolabs.com>","distinct":true,"url":"https://api.github.com/repos/DmitriyMV/tools/commits/35948af8c3f955d02900c9dcd76f1c9e33502f52"},{"sha":"9c09b00ded2aa843a2142bc6659cdcade607c566","author":{"email":"andrey.smirnov@siderolabs.com","name":"Andrey Smirnov"},"message":"feat: update dependencies\n\n```\n| Package | Update | Change |\n|---|---|---|\n| git://git.kernel.org/pub/scm/utils/kernel/kmod/kmod.git | major | `30` -> `31` |\n| [curl/curl](https://togithub.com/curl/curl) | minor | `8_3_0` -> `8_4_0` |\n| [davea42/libdwarf-code](https://togithub.com/davea42/libdwarf-code) | minor | `0.7.0` -> `0.8.0` |\n| git://git.savannah.gnu.org/gettext.git | patch | `0.22.2` -> `0.22.3` |\n| [grpc/grpc-go](https://togithub.com/grpc/grpc-go) | patch | `v1.58.2` -> `v1.58.3` |\n| [mesonbuild/meson](https://togithub.com/mesonbuild/meson) | patch | `1.2.1` -> `1.2.2` |\n| [protocolbuffers/protobuf](https://togithub.com/protocolbuffers/protobuf) | minor | `24.3` -> `24.4` |\n```\n\nSigned-off-by: Andrey Smirnov <andrey.smirnov@siderolabs.com>","distinct":true,"url":"https://api.github.com/repos/DmitriyMV/tools/commits/9c09b00ded2aa843a2142bc6659cdcade607c566"},{"sha":"a4a52e235c6debd23c2fbd938ceb6e97326d1b6f","author":{"email":"git@frezbo.dev","name":"Noel Georgi"},"message":"chore: add dummy gh workflow\n\nAdd a dummy GitHub workflow file.\n\nSigned-off-by: Noel Georgi <git@frezbo.dev>","distinct":true,"url":"https://api.github.com/repos/DmitriyMV/tools/commits/a4a52e235c6debd23c2fbd938ceb6e97326d1b6f"},{"sha":"9a05d126f5bd2cc14af5d4c55499c07023f058d8","author":{"email":"git@frezbo.dev","name":"Noel Georgi"},"message":"feat: move to gh workflow\n\nMove to GitHub workflows.\n\nSigned-off-by: Noel Georgi <git@frezbo.dev>","distinct":true,"url":"https://api.github.com/repos/DmitriyMV/tools/commits/9a05d126f5bd2cc14af5d4c55499c07023f058d8"},{"sha":"5a2240995c086b97d05189ebc965c5ff281e65ad","author":{"email":"git@frezbo.dev","name":"Noel Georgi"},"message":"chore: refactor github actions\n\nRefactor GitHub actions to use the manually retrieved labels as triggers\ninstead on triggering on labels.\n\nSigned-off-by: Noel Georgi <git@frezbo.dev>","distinct":true,"url":"https://api.github.com/repos/DmitriyMV/tools/commits/5a2240995c086b97d05189ebc965c5ff281e65ad"}]},"public":true,"created_at":"2023-10-30T16:13:06Z"}
{"id":"32955563485","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15623623227,"size":3,"distinct_size":3,"ref":"refs/heads/always_inline","head":"c848b4eced037f98230ff8c8b5abb49401157404","before":"aca763d31e72bfc925ce13c2ad3508dedba59b78","commits":[{"sha":"aa931cff037c7ace373e59f086e91556e64829b0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define lzma_always_inline in common.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/aa931cff037c7ace373e59f086e91556e64829b0"},{"sha":"2de7f7d4d88b29cda4471f3c7557a624be674a61","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use lzma_always_inline in memcmplen.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2de7f7d4d88b29cda4471f3c7557a624be674a61"},{"sha":"c848b4eced037f98230ff8c8b5abb49401157404","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add a note why crc_always_inline exists for now.\n\nSolaris Studio is a possible example (not tested) which\nsupports the always_inline attribute but might not get\ndetected by the common.h #ifdefs.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c848b4eced037f98230ff8c8b5abb49401157404"}]},"public":true,"created_at":"2023-10-30T16:32:30Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32955936703","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15623799407,"size":5,"distinct_size":3,"ref":"refs/heads/master","head":"8c36ab79cbf23104ce7a3d533d5ac98cd492e57c","before":"2c7ee92e44e1e66f0a427555233eb22c78f6c4f8","commits":[{"sha":"a2f5ca706acc6f7715b8d260a8c6ed50d7717478","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define lzma_attr_visibility_hidden in common.h.\n\nIn ELF shared libs:\n\n-fvisibility=hidden affects definitions of symbols but not\ndeclarations.[*] This doesn't affect direct calls to functions\ninside liblzma as a linker can replace a call to lzma_foo@plt\nwith a call directly to lzma_foo when -fvisibility=hidden is used.\n\n[*] It has to be like this because otherwise every installed\n    header file would need to explictly set the symbol visibility\n    to default.\n\nWhen accessing extern variables that aren't defined in the\nsame translation unit, compiler assumes that the variable has\nthe default visibility and thus indirection is needed. Unlike\nfunction calls, linker cannot optimize this.\n\nUsing __attribute__((__visibility__(\"hidden\"))) with the extern\nvariable declarations tells the compiler that indirection isn't\nneeded because the definition is in the same shared library.\n\nAbout 15+ years ago, someone told me that it would be good if\nthe CRC tables would be defined in the same translation unit\nas the C code of the CRC functions. While I understood that it\ncould help a tiny amount, I didn't want to change the code because\na separate translation unit for the CRC tables was needed for the\nx86 assembly code anyway. But when visibility attributes are\nsupported, simply marking the extern declaration with the\nhidden attribute will get identical result. When there are only\na few affected variables, this is trivial to do. I wish I had\nunderstood this back then already.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a2f5ca706acc6f7715b8d260a8c6ed50d7717478"},{"sha":"41113fe30a47f6fd3e30cb4494dd538e86212edf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use lzma_attr_visibility_hidden on private extern declarations.\n\nThese variables are internal to liblzma and not exposed in the API.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/41113fe30a47f6fd3e30cb4494dd538e86212edf"},{"sha":"dcfe5632992fb7f06f921da13fcdd84f83d0d285","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define lzma_always_inline in common.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/dcfe5632992fb7f06f921da13fcdd84f83d0d285"},{"sha":"e7a86b94cd247435ac96bc79ba528b690b9ca388","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use lzma_always_inline in memcmplen.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e7a86b94cd247435ac96bc79ba528b690b9ca388"},{"sha":"8c36ab79cbf23104ce7a3d533d5ac98cd492e57c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Add a note why crc_always_inline exists for now.\n\nSolaris Studio is a possible example (not tested) which\nsupports the always_inline attribute but might not get\ndetected by the common.h #ifdefs.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/8c36ab79cbf23104ce7a3d533d5ac98cd492e57c"}]},"public":true,"created_at":"2023-10-30T16:44:53Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32955954755","type":"DeleteEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"ref":"visibility_hidden","ref_type":"branch","pusher_type":"user"},"public":true,"created_at":"2023-10-30T16:45:29Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32955954766","type":"DeleteEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"ref":"always_inline","ref_type":"branch","pusher_type":"user"},"public":true,"created_at":"2023-10-30T16:45:29Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
