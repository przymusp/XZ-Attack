<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recent posts to Stream Compatibility</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/84c5dbb9/</link><description>Recent posts to Stream Compatibility</description><language>en</language><lastBuildDate>Thu, 05 Oct 2017 21:21:47 -0000</lastBuildDate><atom:link href="https://sourceforge.net/p/lzmautils/discussion/708858/thread/84c5dbb9/feed.rss" rel="self" type="application/rss+xml"></atom:link><item><title>Stream Compatibility</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/84c5dbb9/?limit=25#1416</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;ZIP files support EOS marker. See sections 4.4.4 and 5.8.9 in &lt;a class="" href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT" rel="nofollow"&gt;APPNOTE.TXT&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I know that there can be other situations where omitting the end marker would be useful so it should be supported in the API. I added it to my to-do list but it won't be implemented soon as I don't get much coding done at the moment, sorry.&lt;/p&gt;
&lt;p&gt;Note that the LZMA_Alone header isn't the same as the one used in ZIP. The ZIP header needs only the first five bytes of the 13-byte LZMA_Alone header.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Thu, 05 Oct 2017 21:21:47 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net6c58b7d5da7070127412c2d67f072bfb89ccf37d</guid></item><item><title>Stream Compatibility</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/84c5dbb9/?limit=25#b563</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;I propose having a #define or some kind of option to prevent the uncompressed size in the LZMA encoder stream so liblzma can be used out of the box for the ZIP format.&lt;/p&gt;
&lt;p&gt;Maybe something like this in alone_encoder.c:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef HAVE_LEGACY_LZMA&lt;/span&gt;
&lt;span class="cp"&gt;#define ALONE_HEADER_SIZE (1 + 4)&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="cp"&gt;#define ALONE_HEADER_SIZE (1 + 4 + 8)&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt; 
&lt;span class="cp"&gt;#ifndef HAVE_LEGACY_LZMA&lt;/span&gt;
    &lt;span class="c1"&gt;// - Uncompressed size (always unknown and using EOPM)&lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan</dc:creator><pubDate>Thu, 05 Oct 2017 16:00:07 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net9f767d7ed0a4bd05118e736cba07a61ac39310ff</guid></item><item><title>Stream Compatibility</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/84c5dbb9/?limit=25#a5e4/3764</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;The lzma_alone_encoder() API in liblzma always adds the end marker. Currently there is no public API in liblzma to encode without the end marker. If you don't want the end marker, you need to use LZMA SDK or XZ for Java.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Thu, 05 Oct 2017 14:17:14 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net47a67455f73159487db9e41cb35c6ddee0d643d9</guid></item><item><title>Stream Compatibility</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/84c5dbb9/?limit=25#a5e4/9bc4</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;There are two types of LZMA streams:&lt;br/&gt;
     0) Stream with end mark. That end mark adds about 6 bytes to compressed size.&lt;br/&gt;
     1) Stream without end mark. You must know exact uncompressed size to decompress such stream.&lt;/p&gt;
&lt;p&gt;LZMA EOS marker is additional data sequence in compressed stream. But only lzma decoder can recognize that EOS marker. It must unpack whole stream before marker.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Igor Pavlov</dc:creator><pubDate>Thu, 05 Oct 2017 09:08:29 -0000</pubDate><guid isPermaLink="false">https://sourceforge.netaaa1cd628a6e4f0d0717209ce8c409f914adae73</guid></item><item><title>Stream Compatibility</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/84c5dbb9/?limit=25#a5e4</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Does the LZMA alone encoder add a EOS marker? What is the format of the EOS marker?&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan</dc:creator><pubDate>Wed, 04 Oct 2017 23:22:00 -0000</pubDate><guid isPermaLink="false">https://sourceforge.netaf3a7645d13050969d759f32cf2921dc1557d20c</guid></item></channel></rss>