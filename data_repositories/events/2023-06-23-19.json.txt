{"id":"29971079559","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":503096977,"name":"riscv/riscv-cfi","url":"https://api.github.com/repos/riscv/riscv-cfi"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113","repository_url":"https://api.github.com/repos/riscv/riscv-cfi","labels_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/labels{/name}","comments_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/comments","events_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/events","html_url":"https://github.com/riscv/riscv-cfi/issues/113","id":1750993037,"node_id":"I_kwDOHfymkc5oXgiN","number":113,"title":"Landing pad encoding update","user":{"login":"ved-rivos","id":91900059,"node_id":"U_kgDOBXpImw","avatar_url":"https://avatars.githubusercontent.com/u/91900059?v=4","gravatar_id":"","url":"https://api.github.com/users/ved-rivos","html_url":"https://github.com/ved-rivos","followers_url":"https://api.github.com/users/ved-rivos/followers","following_url":"https://api.github.com/users/ved-rivos/following{/other_user}","gists_url":"https://api.github.com/users/ved-rivos/gists{/gist_id}","starred_url":"https://api.github.com/users/ved-rivos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ved-rivos/subscriptions","organizations_url":"https://api.github.com/users/ved-rivos/orgs","repos_url":"https://api.github.com/users/ved-rivos/repos","events_url":"https://api.github.com/users/ved-rivos/events{/privacy}","received_events_url":"https://api.github.com/users/ved-rivos/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-06-10T14:32:24Z","updated_at":"2023-06-23T19:07:14Z","closed_at":"2023-06-17T15:58:31Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"Sharing an proposal for alternate encoding of landing pads from members of AR. The `lpcll` instruction to be renamed as `lpad` (landing pad) and the `lpcnl` removed. `lp` instruction embeds a 20-bit immediate as the label of the landing pad. This instruction would be encoded as `auipc` with `rd=0` - a code point that is presently a designated HINT.The encoding using the U-type hint provides a compact encoding for 20-bit labels. The indirect call/jump site would used `auipc x7, $label_imm` instruction to setup the expected landing pad label. The landing pad would be encoded as `lpad $label_imm`. \r\n","reactions":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/comments/1604746556","html_url":"https://github.com/riscv/riscv-cfi/issues/113#issuecomment-1604746556","issue_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113","id":1604746556,"node_id":"IC_kwDOHfymkc5fpn08","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2023-06-23T19:07:14Z","updated_at":"2023-06-23T19:07:14Z","author_association":"NONE","body":"I know this is a little late but I hope it's OK. I'm very much not an expert so if the following doesn't make sense, I apologize for the noise. :-)\r\n\r\n1. The 20-bit landing pad label sounds nice and compact. However, it means that `lpad` has an implicit read from x7 which is unusual in RISC-V. Requiring that `lpad` must have x7 in inst[19:15] (auipc_rs1) would avoid this. The label becomes 15 bits though.\r\n\r\n2. Concatenation of two instructions can form a landing pad: This can be made less likely or even impossible in common situations. (By the way, in cfi_forward.adoc `?013h` should be `?017h` to match `auipc`.)\r\n\r\nAs long as there are only 16-bit and 32-bit instructions, it's possible to define a landing pad that cannot be accidentally formed, even if the landing pad is only two-byte aligned. It is still possible to embed a landing pad label and encode the landing pad register in auipc_rs1.\r\n\r\nThe idea is that the highest 16 bits of the landing pad must be chosen so that compilers will never emit instructions that begin with those bits. For example, `auipc x0, 0` would be such if `c.unimp` (0x0000) was never emitted: even though some 32-bit instructions end with 0x0017, an accidental landing pad cannot form if `c.unimp` is never used (especially valuable for the unlabeled landing pad). Currently Clang/LLVM can emit `c.unimp` in unreachable code (e.g. as padding immediately after `jal`) but GCC doesn't, I think.\r\n\r\nFor a 6-bit label and auipc_rs1=x28/t3 or x29/t4:\r\n\r\nEight 16-bit hints (`c.mv x0, x3`, `c.mv x0, x7`, ...) could be reserved for use as the high 16 bits of a landing pad. Compilers would never emit these hints so accidental landing pads wouldn't be possible as long as instructions longer than 32 bits aren't present. The eight hints provide a 3-bit label and another three bits are in auipc's [14:12]. But I guess a 6-bit label is unacceptably small.\r\n\r\nFor a 12/13/14-bit label and auipc_rs1=x30/t5 or x31/t6:\r\n\r\nThe unprivileged ISA spec has a table showing that instructions with the lowest seven bits set (0x7F) could be used for very long instructions. It's not frozen so it might change. If one is willing to guess that 0x7F prefix is unlikely to be used for popular instructions, it could be interesting for landing pad use instead of reserving 16-bit hints.\r\n\r\n```\r\nlui     x31, 0xnnvFw  # nn={00,...,FF}, v={7,F}, w={8,...,F}\r\n                      # (If x30 is better then w={0,...,7}.)\r\njalr    rs\r\n...\r\nauipc   x0, 0xnnvFw   # Landing pad, compares bits [31:12] in x31.\r\n                      # (Or sign-extend and compare [XLEN:12]?)\r\n\r\n|31        23 | 22 20 | 19 16 | 15 | 14 12 | 11  7 | 6     0 |\r\n|    label    |  111  |     rs1    | label |  rd   |  AUIPC  |\r\n| nnnn nnnn v |  111  |  1111   1  |  www  | 00000 | 0010111 |\r\n|                imm[31:12]                |\r\n```\r\n\r\nCurrently no standard 32-bit instructions have the five lowest bits all set (0x1F is non-frozenly reserved for 48-bit instructions). So even 11 + 3 = 14-bit label (inst[31:21] + inst[14:12]) would fit with this scheme and accidental landing pads would be impossible when only currently-standard 16/32-bit instructions are present. It's not so future-proof in terms of accidental landing pads but perhaps the larger label is overall more valuable.\r\n\r\nComparable to the removed `lpcnl`, it is possible add 12 extra bits with `addi x31, x31, $label_low` and verify it with another hint instruction like `xori x0, x31, $label_low` but the extra code size isn't nice.\r\n\r\nAvoiding accidental landing pads is most important with the unlabeled landing pad. All zeros (apart from [22:15] or [20:15]) or ones are the simplest choices but perhaps other patterns are worth considering too. For example, 0x707F at the high bits would be like a beginning of an instruction with opcode=0x7F, rd=x0, funct3=7. But it's impossible to guess what kind of bit patterns will be common inside long instructions in the future.\r\n","reactions":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/comments/1604746556/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-23T19:07:14Z","org":{"id":10872782,"login":"riscv","gravatar_id":"","url":"https://api.github.com/orgs/riscv","avatar_url":"https://avatars.githubusercontent.com/u/10872782?"}}
