commit 953e775941a25bfcfa353f802b13e66acb1edf2c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Sep 14 21:13:23 2023 +0800

    CI: Enable CLMUL in address sanitization test.
    
    The crc64_clmul() function should be ignored by the address sanitizer
    now so these builds should still pass.

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index f2e8c70a..79ceb141 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -1,146 +1,142 @@
 #############################################################################
 #
 # Author: Jia Tan
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 #############################################################################
 
 name: CI
 
 on:
   # Triggers the workflow on push or pull request events but only for the master branch
   push:
     branches: [ master ]
   pull_request:
     branches: [ master ]
 
   # Allows running workflow manually
   workflow_dispatch:
 
 jobs:
   POSIX:
     strategy:
       matrix:
         os: [ubuntu-latest, macos-latest]
         build_system: [autotools, cmake]
     runs-on: ${{ matrix.os }}
     steps:
       - uses: actions/checkout@v3
 
       ########################
       # Install Dependencies #
       ########################
 
       # Install Autotools on Linux
       - name: Install Dependencies
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
         run: |
             sudo apt-get update
             sudo apt-get install -y autoconf automake build-essential po4a autopoint gcc-multilib doxygen
 
       # Install Autotools on Mac
       - name: Install Dependencies
         if: ${{ matrix.os == 'macos-latest' && matrix.build_system == 'autotools' }}
         run: brew install autoconf automake libtool po4a doxygen
 
       # Install CMake on Linux
       - name: Install Dependencies
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'cmake' }}
         run: |
             sudo apt-get update
             sudo apt-get install -y build-essential cmake
 
       # Install CMake on Mac
       - name: Install Dependencies
         if: ${{ matrix.os == 'macos-latest' && matrix.build_system == 'cmake' }}
         run: brew install cmake
 
       ##################
       # Build and Test #
       ##################
 
       # -b specifies the build system to use.
       # -p specifies the phase (build or test) to help narrow down an error
       #    if one occurs.
       #
       # The first two builds/tests are only run on Autotools Linux and
       # affect the CFLAGS. Resetting the CFLAGS requires clearing the
       # config cache between runs, so the tests that require CFLAGS are
       # done first.
       - name: Build 32-bit
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
         run: ./build-aux/ci_build.sh -b autotools -p build -f "-m32"
       - name: Test 32-bit
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
         run: |
             ./build-aux/ci_build.sh -b autotools -p test -f "-m32" -n 32_bit
             cd ../xz_build && make distclean
 
-      # ifunc and clmul must be disabled for this test because they will
-      # fail with -fsanitize=address. __attribute__ ifunc is incompatible
-      # with -fsanitize=address.CLMUL optimizations will read past the
-      # bounds of small buffers and mask out the unneeded values. This
-      # triggers -fsanitize=address to report an error even though the
-      # operation is safe.
+      # ifunc must be disabled for this test because __attribute__ ifunc is
+      # incompatible with -fsanitize=address.
       - name: Build with -fsanitize=address,undefined
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
-        run: ./build-aux/ci_build.sh -b autotools -p build -f "-fsanitize=address,undefined" -d ifunc,clmul
+        run: ./build-aux/ci_build.sh -b autotools -p build -f "-fsanitize=address,undefined" -d ifunc
       - name: Test with -fsanitize=address,undefined
         if: ${{ matrix.os == 'ubuntu-latest' && matrix.build_system == 'autotools' }}
         run: |
-            ./build-aux/ci_build.sh -b autotools -p test -f "-fsanitize=address,undefined" -d ifunc,clmul
+            ./build-aux/ci_build.sh -b autotools -p test -f "-fsanitize=address,undefined" -d ifunc
             cd ../xz_build && make distclean
 
       - name: Build with full features
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -p build
       - name: Test with full features
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -p test -n full_features
 
       - name: Build without encoders
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d encoders,shared -p build
       - name: Test without encoders
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d encoders,shared -p test -n no_encoders
 
       - name: Build without decoders
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d decoders,shared -p build
       - name: Test without decoders
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d decoders,shared -p test -n no_decoders
 
       - name: Build without threads
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d threads,shared -p build
       - name: Test without threads
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d threads,shared -p test -n no_threads
 
       - name: Build without BCJ filters
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d bcj,shared,nls -p build
       - name: Test without BCJ filters
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d bcj,shared,nls -p test -n no_bcj
 
       - name: Build without Delta filters
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d delta,shared,nls -p build
       - name: Test without Delta filters
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d delta,shared,nls -p test -n no_delta
 
       - name: Build without sha256 check
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -c crc32,crc64 -d shared,nls -p build
       - name: Test without sha256 check
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -c crc32,crc64 -d shared,nls -p test -n no_sha256
 
       - name: Build without crc64 check
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -c crc32,sha256 -d shared,nls -p build
       - name: Test without crc64 check
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -c crc32,sha256 -d shared,nls -p test -n no_crc64
 
       - name: Build small
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d small -p build
       - name: Test small
         run: ./build-aux/ci_build.sh -b ${{ matrix.build_system }} -d small -p test -n small
 
       # Attempt to upload the test logs as artifacts if any step has failed
       - uses: actions/upload-artifact@v3
         if: ${{ failure() }}
         with:
           name: ${{ matrix.os }} ${{ matrix.build_system }} Test Logs
           path: build-aux/artifacts