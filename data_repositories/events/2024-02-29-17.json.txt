{"id":"36135286918","type":"IssueCommentEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/86","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/86/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/86/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/86/events","html_url":"https://github.com/tukaani-project/xz/pull/86","id":2152741002,"node_id":"PR_kwDOIQBEvs5n1xaP","number":86,"title":"Speed up CRC32 calculation on LoongArch","user":{"login":"xry111","id":8733039,"node_id":"MDQ6VXNlcjg3MzMwMzk=","avatar_url":"https://avatars.githubusercontent.com/u/8733039?v=4","gravatar_id":"","url":"https://api.github.com/users/xry111","html_url":"https://github.com/xry111","followers_url":"https://api.github.com/users/xry111/followers","following_url":"https://api.github.com/users/xry111/following{/other_user}","gists_url":"https://api.github.com/users/xry111/gists{/gist_id}","starred_url":"https://api.github.com/users/xry111/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xry111/subscriptions","organizations_url":"https://api.github.com/users/xry111/orgs","repos_url":"https://api.github.com/users/xry111/repos","events_url":"https://api.github.com/users/xry111/events{/privacy}","received_events_url":"https://api.github.com/users/xry111/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2024-02-25T12:26:01Z","updated_at":"2024-02-29T17:35:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/86","html_url":"https://github.com/tukaani-project/xz/pull/86","diff_url":"https://github.com/tukaani-project/xz/pull/86.diff","patch_url":"https://github.com/tukaani-project/xz/pull/86.patch","merged_at":null},"body":"## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [x] Build was run locally and without warnings or errors\r\n- [x] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\n<!-- Please try to limit your pull request to one type, submit multiple\r\npull requests if needed. --> \r\n\r\nPlease check the type of change your PR introduces:\r\n- [x] Feature\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying. -->\r\n\r\nOn LoongArch the generic table-based CRC32 implementation is used.\r\n\r\n<!-- Related issue this PR addresses, if applicable -->\r\nRelated Issue URL: None\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.\r\n\r\nOptimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [x] No\r\n\r\n<!-- If this introduces a breaking change, please describe the impact and\r\nmigration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n<!-- Any other information that is important to this PR. -->","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/86/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/86/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1971631816","html_url":"https://github.com/tukaani-project/xz/pull/86#issuecomment-1971631816","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/86","id":1971631816,"node_id":"IC_kwDOIQBEvs51hLbI","user":{"login":"JiaT75","id":78042786,"node_id":"MDQ6VXNlcjc4MDQyNzg2","avatar_url":"https://avatars.githubusercontent.com/u/78042786?v=4","gravatar_id":"","url":"https://api.github.com/users/JiaT75","html_url":"https://github.com/JiaT75","followers_url":"https://api.github.com/users/JiaT75/followers","following_url":"https://api.github.com/users/JiaT75/following{/other_user}","gists_url":"https://api.github.com/users/JiaT75/gists{/gist_id}","starred_url":"https://api.github.com/users/JiaT75/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JiaT75/subscriptions","organizations_url":"https://api.github.com/users/JiaT75/orgs","repos_url":"https://api.github.com/users/JiaT75/repos","events_url":"https://api.github.com/users/JiaT75/events{/privacy}","received_events_url":"https://api.github.com/users/JiaT75/received_events","type":"User","site_admin":false},"created_at":"2024-02-29T17:35:38Z","updated_at":"2024-02-29T17:35:38Z","author_association":"MEMBER","body":"> I'll do it tomorrow.\r\n\r\nThanks!\r\n \r\n> The specification says 64-bit LoongArch chips shall implement CRC32 instructions, but 32-bit LoongArch chips may lack them (though no 32-bit LoongArch chips have been launched as at now).\r\n\r\nOk that is great to know. I had not found any references to 32-bit LoongArch chips, so that makes sense. Is it likely that 32-bit chips will be made? Otherwise it will simplify things to just design the code for 64-bit LoongArch and not bother with the runtime checks at all. Future 32-bit LoongArch may need extra compiler flags or a function `__attribute__()` so the code wouldn't be able to work as-is anyway.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1971631816/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-02-29T17:35:39Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
