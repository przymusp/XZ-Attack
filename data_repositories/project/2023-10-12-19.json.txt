{"id":"32524260187","type":"PushEvent","actor":{"id":133907478,"login":"hansjans162","display_login":"hansjans162","gravatar_id":"","url":"https://api.github.com/users/hansjans162","avatar_url":"https://avatars.githubusercontent.com/u/133907478?"},"repo":{"id":657271419,"name":"hansjans162/xz","url":"https://api.github.com/repos/hansjans162/xz"},"payload":{"repository_id":657271419,"push_id":15398817707,"size":10,"distinct_size":3,"ref":"refs/heads/crc32-clmul","head":"2070a32c81b973f532262a2c082504733893f919","before":"d3a0c78f9ecf93bfd8ad053a15a17777d233949b","commits":[{"sha":"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Fix Windows build with Clang/LLVM 17.\n\nllvm-windres 17.0.0 has more accurate emulation of GNU windres, so\nthe hack for GNU windres must now be used with llvm-windres too.\n\nLLVM 16.0.6 has the old behavior and there likely won't be more\n16.x releases. So we can simply check for >= 17.0.0.\n\nSee also:\nhttps://github.com/llvm/llvm-project/commit/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47","distinct":false,"url":"https://api.github.com/repos/hansjans162/xz/commits/0570308ddd9c0e39e85597ebc0e31d4fc81d436f"},{"sha":"506d03127a8565442b028ec991e1578124fd3025","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Specify LINKER_LANGUAGE for libgnu target to fix Ninja Generator.\n\nCMake is unable to guess the linker language for just a header file so\nit must be explicitly set.","distinct":false,"url":"https://api.github.com/repos/hansjans162/xz/commits/506d03127a8565442b028ec991e1578124fd3025"},{"sha":"30d0c35327f3639cb11224872aa58fdbf0b1526e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Rename xz and man page symlink custom targets.\n\nThe Ninja Generator for CMake cannot have a custom target and its\nBYPRODUCTS have the same name. This has prevented Ninja builds on\nUnix-like systems since the xz symlinks were introduced in\n80a1a8bb838842a2be343bd88ad1462c21c5e2c9.","distinct":false,"url":"https://api.github.com/repos/hansjans162/xz/commits/30d0c35327f3639cb11224872aa58fdbf0b1526e"},{"sha":"01e34aa1171b04f8b28960b1cc6135a903e0c13d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Disable CLANG64 MSYS2 environment until bug is resolved.\n\nlld 17.0.1 searches for libraries to link first in the toolchain\ndirectories before the local directory when building. The is a problem\nfor us because liblzma.a is installed in MSYS2 CLANG64 by default and\nxz.exe will thus use the installed library instead of the one being\nbuilt.\n\nThis causes tests to fail when they are expecting features to be\ndisabled. More importantly, it will compile xz.exe with an incorrect\nliblzma and could cause unexpected behavior by being unable to update\nliblzma code in static builds. The CLANG64 environment can be tested\nagain once this is fixed.\n\nLink to bug: https://github.com/llvm/llvm-project/issues/67779.","distinct":false,"url":"https://api.github.com/repos/hansjans162/xz/commits/01e34aa1171b04f8b28960b1cc6135a903e0c13d"},{"sha":"d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake/Windows: Fix when the windres workaround is applied.\n\nCMake doesn't set WIN32 on CYGWIN but the workaround is\nprobably needed on Cygwin too. Same for MSYS and MSYS2.\n\nThe workaround must not be used with Clang that is acting in\nMSVC mode. This fixes it by checking for the known environments\nthat need the workaround instead of using \"NOT MSVC\".\n\nThanks to Martin StorsjÃ¶.\nhttps://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431","distinct":false,"url":"https://api.github.com/repos/hansjans162/xz/commits/d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b"},{"sha":"5c4bca521e6fb435898a0012b3276eee70a6dadf","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/hansjans162/xz/commits/5c4bca521e6fb435898a0012b3276eee70a6dadf"},{"sha":"f74f1740067b75042497edbfa6ea457ff75484b9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Update visibility.m4 from Gnulib.\n\nUpdating from version 6 -> 8 from upstream. Declarations for variables\nand function bodies were added to avoid unnecessary failures with\n-Werror.","distinct":false,"url":"https://api.github.com/repos/hansjans162/xz/commits/f74f1740067b75042497edbfa6ea457ff75484b9"},{"sha":"5bc84a2e144d42f9dbac8bbc632357f6a35065fe","author":{"email":"hansjansen162@outlook.com","name":"Hans Jansen"},"message":"liblzma: Rename crc_macros.h to crc_common.h.","distinct":true,"url":"https://api.github.com/repos/hansjans162/xz/commits/5bc84a2e144d42f9dbac8bbc632357f6a35065fe"},{"sha":"5de5d6a1a76a14dcb8f8ba300facb32d7006afc9","author":{"email":"hansjansen162@outlook.com","name":"Hans Jansen"},"message":"liblzma: Moved CLMUL CRC logic to crc_common.h.\n\ncrc64_fast.c was updated to use the code from crc_common.h instead.","distinct":true,"url":"https://api.github.com/repos/hansjans162/xz/commits/5de5d6a1a76a14dcb8f8ba300facb32d7006afc9"},{"sha":"2070a32c81b973f532262a2c082504733893f919","author":{"email":"hansjansen162@outlook.com","name":"Hans Jansen"},"message":"liblzma: Added crc32_clmul to crc32_fast.c.","distinct":true,"url":"https://api.github.com/repos/hansjans162/xz/commits/2070a32c81b973f532262a2c082504733893f919"}]},"public":true,"created_at":"2023-10-12T19:43:10Z"}
{"id":"32524263223","type":"IssueCommentEvent","actor":{"id":133907478,"login":"hansjans162","display_login":"hansjans162","gravatar_id":"","url":"https://api.github.com/users/hansjans162","avatar_url":"https://avatars.githubusercontent.com/u/133907478?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/64","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/64/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/64/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/64/events","html_url":"https://github.com/tukaani-project/xz/pull/64","id":1912186475,"node_id":"PR_kwDOIQBEvs5bKUBN","number":64,"title":"Crc32 clmul","user":{"login":"hansjans162","id":133907478,"node_id":"U_kgDOB_tEFg","avatar_url":"https://avatars.githubusercontent.com/u/133907478?v=4","gravatar_id":"","url":"https://api.github.com/users/hansjans162","html_url":"https://github.com/hansjans162","followers_url":"https://api.github.com/users/hansjans162/followers","following_url":"https://api.github.com/users/hansjans162/following{/other_user}","gists_url":"https://api.github.com/users/hansjans162/gists{/gist_id}","starred_url":"https://api.github.com/users/hansjans162/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hansjans162/subscriptions","organizations_url":"https://api.github.com/users/hansjans162/orgs","repos_url":"https://api.github.com/users/hansjans162/repos","events_url":"https://api.github.com/users/hansjans162/events{/privacy}","received_events_url":"https://api.github.com/users/hansjans162/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-09-25T19:53:53Z","updated_at":"2023-10-12T19:43:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/64","html_url":"https://github.com/tukaani-project/xz/pull/64","diff_url":"https://github.com/tukaani-project/xz/pull/64.diff","patch_url":"https://github.com/tukaani-project/xz/pull/64.patch","merged_at":null},"body":"Added an implementation for crc32 that makes use of clmul.\r\nCode for this implementation was written by Ilya Kurdyukov and can be found here.\r\nhttps://github.com/ilyakurdyukov/crc-clmul-sim\r\n\r\nAlso refactored crc64_clmul to use the new macros created for crc32_clmul.\r\nAs well as moved similar functions to crc_clmul_common to eliminate duplicate code.\r\n\r\nI tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.\r\nDuring testing I found that crc32_clmul can run up to 70% faster than crc32_generic,\r\nand has an average speed increase of 58.4% for sizes greater than 16 bytes.\r\n\r\nI also used this to test the reworked version of crc64_clmul.\r\nThis version of crc64_clmul is an average of 3.9% faster than the original implementation.\r\nThis speed increase is due to some inline assembly as well as changing around the order of some if statements. \r\n\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [X] Build was run locally and without warnings or errors\r\n- [X] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\n<!-- Please try to limit your pull request to one type, submit multiple\r\npull requests if needed. --> \r\n\r\nPlease check the type of change your PR introduces:\r\n- [ ] Bugfix\r\n- [X] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [X] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other (please describe): \r\n\r\n\r\n## What is the current behavior?\r\ncrc32\\_fast currently only uses a generic implementation.\r\n\r\n\r\n## What is the new behavior?\r\nI added an implementation for crc32 that makes use of clmul in crc32_fast.c \r\nAlso refactored crc64_clmul implementation to use the same macros as crc32_clmul\r\n\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n## Other information\r\n\r\nHere is the output from both tests that gave me the statistics above.\r\n\r\nthe number of unique files tested on and the number of times the crc is run\r\ndecrease as the bytes get larger so the benchmark does not take too long.\r\n\r\nThe 64 and 32 spd+ show the percentage speed increase over the generic.\r\nThe percentage on the graph show the combined average for all types.\r\nFor example (50% is twice as fast, 200% is twice as slow)\r\n```\r\n64 generic: #\t\t64 clmul: +\r\n32 generic: =\t\t32 clmul: *\r\n\r\n#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%\r\n    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |\r\n    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |\r\n    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |\r\n   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#\r\n   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#\r\n   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #\r\n    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|\r\n    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |\r\n    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |\r\n    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |\r\n   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |\r\n   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |\r\n   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |\r\n  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |\r\n  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |\r\n  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #\r\n    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |\r\n    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |\r\n    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |\r\n    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |\r\n   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |\r\n   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |\r\n   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |\r\n  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |\r\n  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |\r\n  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |\r\n    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |\r\ntotal average:             75.13%,  58.44%\r\n\r\n```\r\n\r\n\r\nThe 64old and 64new spd+ show the percentage speed increase over the generic.\r\nThe percentage on the graph show the combined average for all types.\r\n```\r\n64 generic: #     64 clmul old: +     64 clmul new: *\r\n\r\n#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%\r\n     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |\r\n     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |\r\n     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |\r\n     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |\r\n    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |\r\n    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |\r\n    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #\r\n   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #\r\n   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #\r\n   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #\r\n    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #\r\n    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #\r\n    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #\r\n    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #\r\n   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #\r\n   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #\r\n   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #\r\n  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #\r\n  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #\r\n  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #\r\n    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #\r\n    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #\r\n    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #\r\n    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #\r\n   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #\r\n   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #\r\n   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #\r\n  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #\r\n  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #\r\n  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #\r\n    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #\r\ntotal average:              57.949%,   60.255%, \r\nspeed increase new vs old:  3.979%\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/64/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/64/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1760264642","html_url":"https://github.com/tukaani-project/xz/pull/64#issuecomment-1760264642","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/64","id":1760264642,"node_id":"IC_kwDOIQBEvs5o64HC","user":{"login":"hansjans162","id":133907478,"node_id":"U_kgDOB_tEFg","avatar_url":"https://avatars.githubusercontent.com/u/133907478?v=4","gravatar_id":"","url":"https://api.github.com/users/hansjans162","html_url":"https://github.com/hansjans162","followers_url":"https://api.github.com/users/hansjans162/followers","following_url":"https://api.github.com/users/hansjans162/following{/other_user}","gists_url":"https://api.github.com/users/hansjans162/gists{/gist_id}","starred_url":"https://api.github.com/users/hansjans162/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hansjans162/subscriptions","organizations_url":"https://api.github.com/users/hansjans162/orgs","repos_url":"https://api.github.com/users/hansjans162/repos","events_url":"https://api.github.com/users/hansjans162/events{/privacy}","received_events_url":"https://api.github.com/users/hansjans162/received_events","type":"User","site_admin":false},"created_at":"2023-10-12T19:43:18Z","updated_at":"2023-10-12T19:43:18Z","author_association":"CONTRIBUTOR","body":"> I feel it might be good to merge this after the inline function change has been squashed so that we have some good version committed in xz.git. So feel free to try the crc_clmul.c idea if you wish but it's not required for merging.\r\n\r\nI updated the PR with the squashing and comment change. I didn't try the crc_clmul.c idea but I believe it would result in cleaner code. I'll let you all handle it.\r\n\r\n> Have you tested on 32-bit x86? If not, it's fine. :-) If yes: I haven't checked performance on 32-bit x86 in years and wonder if the assembly files still make sense compared to what GCC and Clang can do (for processors that don't support CLMUL). Those files were written in GCC 3.3/3.4 times. It shouldn't be hard to make 32-bit x86 autodetect between the assembly code and CLMUL so I can do it if it is worth it.\r\n\r\nI hadn't tested the assembly version before so I gave it a try since it seemed interesting. I compiled my test program and liblzma with the -m32 GCC flag and ran the benchmark on my 64-bit machine. I don't have a 32-bit machine to test on. The results were somewhat surprising considering how old the assembly implementation is. I didn't have time to make a pretty graph again, but here is a quick summary of my findings:\r\n\r\n| CRC version | Speed difference < 32 bytes | Speed difference > 1024 bytes |\r\n|------------------|----------------------------------------|------------------------------------------|\r\n| CRC32 Generic |  50% slower    | 75% slower |\r\n| CRC32 CLMUL  | 80% slower       | 30% slower |\r\n| CRC64 Generic | 60% slower |  65% slower |\r\n| CRC64 CLMUL | 80% slower |  40% faster |\r\n\r\nThe CRC64 CLMUL version became faster with buffers around 512 bytes. The runtime differences started to change between 32 - 1024 bytes so it was most interesting to categorize them as < 32 bytes and > 1024 bytes. So for CRC32 you are better off using the assembly version but CRC64 depends.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1760264642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-12T19:43:19Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
