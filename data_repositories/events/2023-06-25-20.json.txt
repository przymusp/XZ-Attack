{"id":"29991016568","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":503096977,"name":"riscv/riscv-cfi","url":"https://api.github.com/repos/riscv/riscv-cfi"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113","repository_url":"https://api.github.com/repos/riscv/riscv-cfi","labels_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/labels{/name}","comments_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/comments","events_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/events","html_url":"https://github.com/riscv/riscv-cfi/issues/113","id":1750993037,"node_id":"I_kwDOHfymkc5oXgiN","number":113,"title":"Landing pad encoding update","user":{"login":"ved-rivos","id":91900059,"node_id":"U_kgDOBXpImw","avatar_url":"https://avatars.githubusercontent.com/u/91900059?v=4","gravatar_id":"","url":"https://api.github.com/users/ved-rivos","html_url":"https://github.com/ved-rivos","followers_url":"https://api.github.com/users/ved-rivos/followers","following_url":"https://api.github.com/users/ved-rivos/following{/other_user}","gists_url":"https://api.github.com/users/ved-rivos/gists{/gist_id}","starred_url":"https://api.github.com/users/ved-rivos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ved-rivos/subscriptions","organizations_url":"https://api.github.com/users/ved-rivos/orgs","repos_url":"https://api.github.com/users/ved-rivos/repos","events_url":"https://api.github.com/users/ved-rivos/events{/privacy}","received_events_url":"https://api.github.com/users/ved-rivos/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2023-06-10T14:32:24Z","updated_at":"2023-06-25T20:23:14Z","closed_at":"2023-06-17T15:58:31Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"Sharing an proposal for alternate encoding of landing pads from members of AR. The `lpcll` instruction to be renamed as `lpad` (landing pad) and the `lpcnl` removed. `lp` instruction embeds a 20-bit immediate as the label of the landing pad. This instruction would be encoded as `auipc` with `rd=0` - a code point that is presently a designated HINT.The encoding using the U-type hint provides a compact encoding for 20-bit labels. The indirect call/jump site would used `auipc x7, $label_imm` instruction to setup the expected landing pad label. The landing pad would be encoded as `lpad $label_imm`. \r\n","reactions":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/comments/1606251460","html_url":"https://github.com/riscv/riscv-cfi/issues/113#issuecomment-1606251460","issue_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113","id":1606251460,"node_id":"IC_kwDOHfymkc5fvXPE","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2023-06-25T20:23:14Z","updated_at":"2023-06-25T20:23:14Z","author_association":"NONE","body":"I agree that `sspush` and `sspopchk` cannot be behind ifunc.\r\n\r\nIn my previous message I tried to say that perhaps `sspush` and `sspopchk` could be RVI hints, and the compressed version could be RVC hints. For example, these should be available:\r\n\r\n  - `add x0, x7, x1` = `sspush x1`\r\n  - `add x0, x7, x5` = `sspush x5`\r\n  - `add x0, x6, x1` = `sspopchk x1`\r\n  - `add x0, x6, x5` = `sspopchk x5`\r\n  - `c.add x0, x1` = `c.sspush x1`\r\n  - `c.mv x0, x1` = `c.sspopchk x1`\r\n\r\nStores have the source register in rs2, including the compressed instructions. This way the compressed push and pop could both use x1, if it is preferred to avoid implicit reads from general purpose registers (or at least it makes things pretty).\r\n\r\nPushes and popchecks differ in one bit only:\r\n\r\n  - `sspush` has inst[15]=1 and `sspopchk` has inst[15]=0.\r\n  - `c.sspush x1` has inst[12]=1 and `c.sspopchk x1` has inst[12]=0.\r\n\r\nWhen `xBCFIE = 0` the above instructions would revert to their RVI or RVC behavior. That is, they affect architecturally visible state just like `nop` does.\r\n\r\n`ssload x1`, `ssload x5`, `sspinc`, `ssprr`, and `ssamoswap` would be regular new instructions that result in illegal-instruction exception on processors that don't support Zicfisslp. Zimop or Zcmop wouldn't be used. These instructions would be wrapped with ifunc or similar method. I don't know if these need different behavior based on `xBCFIE` or not.\r\n\r\nI repeat that I don't have a good understanding about this topic. There might be more than one huge reason why my above text is a useless idea. But I hope that this message clarifies what I tried to say in my previous message.\r\n","reactions":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/comments/1606251460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-25T20:23:15Z","org":{"id":10872782,"login":"riscv","gravatar_id":"","url":"https://api.github.com/orgs/riscv","avatar_url":"https://avatars.githubusercontent.com/u/10872782?"}}
{"id":"29991094300","type":"IssueCommentEvent","actor":{"id":92735,"login":"sorear","display_login":"sorear","gravatar_id":"","url":"https://api.github.com/users/sorear","avatar_url":"https://avatars.githubusercontent.com/u/92735?"},"repo":{"id":503096977,"name":"riscv/riscv-cfi","url":"https://api.github.com/repos/riscv/riscv-cfi"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113","repository_url":"https://api.github.com/repos/riscv/riscv-cfi","labels_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/labels{/name}","comments_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/comments","events_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/events","html_url":"https://github.com/riscv/riscv-cfi/issues/113","id":1750993037,"node_id":"I_kwDOHfymkc5oXgiN","number":113,"title":"Landing pad encoding update","user":{"login":"ved-rivos","id":91900059,"node_id":"U_kgDOBXpImw","avatar_url":"https://avatars.githubusercontent.com/u/91900059?v=4","gravatar_id":"","url":"https://api.github.com/users/ved-rivos","html_url":"https://github.com/ved-rivos","followers_url":"https://api.github.com/users/ved-rivos/followers","following_url":"https://api.github.com/users/ved-rivos/following{/other_user}","gists_url":"https://api.github.com/users/ved-rivos/gists{/gist_id}","starred_url":"https://api.github.com/users/ved-rivos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ved-rivos/subscriptions","organizations_url":"https://api.github.com/users/ved-rivos/orgs","repos_url":"https://api.github.com/users/ved-rivos/repos","events_url":"https://api.github.com/users/ved-rivos/events{/privacy}","received_events_url":"https://api.github.com/users/ved-rivos/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2023-06-10T14:32:24Z","updated_at":"2023-06-25T20:36:15Z","closed_at":"2023-06-17T15:58:31Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"Sharing an proposal for alternate encoding of landing pads from members of AR. The `lpcll` instruction to be renamed as `lpad` (landing pad) and the `lpcnl` removed. `lp` instruction embeds a 20-bit immediate as the label of the landing pad. This instruction would be encoded as `auipc` with `rd=0` - a code point that is presently a designated HINT.The encoding using the U-type hint provides a compact encoding for 20-bit labels. The indirect call/jump site would used `auipc x7, $label_imm` instruction to setup the expected landing pad label. The landing pad would be encoded as `lpad $label_imm`. \r\n","reactions":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/comments/1606255066","html_url":"https://github.com/riscv/riscv-cfi/issues/113#issuecomment-1606255066","issue_url":"https://api.github.com/repos/riscv/riscv-cfi/issues/113","id":1606255066,"node_id":"IC_kwDOHfymkc5fvYHa","user":{"login":"sorear","id":92735,"node_id":"MDQ6VXNlcjkyNzM1","avatar_url":"https://avatars.githubusercontent.com/u/92735?v=4","gravatar_id":"","url":"https://api.github.com/users/sorear","html_url":"https://github.com/sorear","followers_url":"https://api.github.com/users/sorear/followers","following_url":"https://api.github.com/users/sorear/following{/other_user}","gists_url":"https://api.github.com/users/sorear/gists{/gist_id}","starred_url":"https://api.github.com/users/sorear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sorear/subscriptions","organizations_url":"https://api.github.com/users/sorear/orgs","repos_url":"https://api.github.com/users/sorear/repos","events_url":"https://api.github.com/users/sorear/events{/privacy}","received_events_url":"https://api.github.com/users/sorear/received_events","type":"User","site_admin":false},"created_at":"2023-06-25T20:36:15Z","updated_at":"2023-06-25T20:36:15Z","author_association":"NONE","body":"@Larhzu \r\n\r\n> In addition to the requirements for toolchains, a minor extra thing is that assembly programmers could need to know about it (warnings can help). It's not intuitive that `srai a0, a5, 1` needs to be 4-byte aligned. If optimizing for size, assembler (or even linker) could need to be smart enough so that it won't insert a `c.nop` when `c.mv a0, a5; c.srai a0, 1` would be shorter (at the expense of a longer dependency chain).\r\n\r\nMy expectation is that gas and the llvm integrated assembler would automatically align hazardous instructions when in avoid-landing-pads mode.  You would only be able to shoot yourself in the foot if you are using directives to generate raw instruction bytes (e.g. `.word 0x00171017`; `.insn` does not have this problem because it always describes a single instruction of a single length which can be aligned).  Instructions would not be rewritten by the assembler into different instructions, only aligned.\r\n\r\n> New extensions add more accidental landing pads. For example, Zbb has a few good candidates with rs1=a4/a5: `ctz`/`ctzw`, and with certain immediates `rori`, `roriw`, `bclri`, `bexti`, `binvi`, `bseti`.\r\n\r\nThis is largely why I phrased the reply in terms of R-type/I-type instructions instead of trying to give an exhaustive list.\r\n\r\n> If some (or all) code is built with unlabeled landing pads, then accidental labeled landing pads are a problem if attacker can control both the value of x7 and the function pointer.\r\n\r\nI'm unsure if this should be part of the threat model.\r\n\r\n> Here are a few commands to count instructions that create accidental landing pads in a particular file.\r\n\r\nI like your basic approach and have reproduced your results.  That roughly matches my assumptions for the minor instructions, although it might be useful to look at float-heavier code.\r\n\r\nBecause you are analyzing the final binary you are are substantially undercounting potentially hazardous instructions with relocations - since the decision to align them or not must be made before the addresses are known, and thus before it can be definitively known if they will be hazardous.\r\n\r\nlibQt5WebKit.so.5.212.0 has 431893 auipc instructions.  Every single one of them, except for the one in the PLT header, is paired with a jalr, addi, load, or store instruction; I will ignore the possibility of hazardous instructions with LO12 relocations since they will be aligned if the paired auipc is.\r\n\r\n    grep auipc qt5webkit.s.noa | wc -l\r\n    grep -A1 auipc qt5webkit.s.noa | grep -v '^--' | grep -v auipc |\r\n        tr -s ' ' | cut -f 3 | sort | uniq -c | sort -nr\r\n\r\nOf these, 255713 are within the stable non-hazardous offset range (243331 negative, 12382 positive) and can have their alignment deleted by linker relaxation; 176180 auipc instructions must be treated as hazardous even after relaxation, as well as 23503 non-auipc instructions.\r\n\r\n    grep auipc qt5webkit.s.noa | sed 's/.*,//' |\r\n        perl -nle '$_=hex($_); print $_<0x00170?\"SPOS\":$_<0x80000?\"LPOS\":\r\n                   $_<0xf0170?\"LNEG\":\"SNEG\"' | sort | uniq -c\r\n    grep -E ':\\s*[0-9a-f]017[0-9a-f]{4}' qt5webkit.s.noa | grep -v auipc | wc -l\r\n\r\n2831 auipc instructions are contributed by the PLT, this is less than 2% of the total and will be ignored for the math.\r\n\r\n    <qt5webkit.s.noa perl -nle 'next unless /auipc/ && /^\\s+(\\w+):/; print if hex($1)<0x4adf30'\r\n\r\n143127 of the forward auipc instructions are used to generate references into the rodata and later segments, leaving 45434 forward auipc instructions referencing the text segment.\r\n\r\n    objdump -h libQt5WebKit.so.5 | grep -A1 rodata\r\n    grep -vE 'auipc.*,0x[8-9a-f][0-9a-f]{4}' qt5webkit.s.noa | grep -A1 auipc |\r\n        perl -nle 'next unless / # ([0-9a-f]+) / && hex($1) >= 0x16faea8;\r\n                   if (/<(.*?)[+>@]/) { print $1 }' | wc -l \r\n\r\nAssuming that alignment is applied using a special \"align hazardous instruction\" relocation that is applied after layout and relaxation and each alignment results in an average of 1 byte of padding, (176180+23505)*1 = 195 KiB of nops need to be added to align hazardous instructions, 88% of which is accounted for by conservative handling of auipc.  Adding padding between the text and rodata segment reduces this to (45434+23505)*1 = 67 KiB of nops, plus a 4 KiB page table.  WITHOUT linker support, if the assembler simply generates a `.balign 4` before each potentially hazardous instruction, (431893+23505)*1 = 445 KiB of nops must be added.\r\n\r\n@ved-rivos\r\n\r\n> Even if all of these were caused to be misaligned by inserting a `c.nop` then for this example it adds 24 KiB for a 19 MiB binary which should be acceptable.\r\n\r\nIn the most conservative case (all 2^20-1 labels are allowed, support added only to the assembler with an unmodified linker) you are looking at 445 KiB for a 19 MiB binary.  Is that still acceptable?  Is 71 KiB (67 KiB nops, 4 KiB page tables) acceptable in combination with requiring an updated linker and a potentially controversial change to the memory map?\r\n\r\n1.5 MiB of padding limits for DSOs larger than 1.5 MiB gives you 1000 maximum DSOs instead of 2000 for RV32 with a 3GiB user limit and a worst-case size distribution.  Is that acceptable?\r\n\r\nlibQt5WebKit.so.5.212.0 has 79883 rets, 30846 c.jalr, and a roughly 1:2 ratio of negative to positive stack adjustments; assuming 2 rets per function, estimate 39941 functions and 156KiB for the landing pads themselves.   If calls are labeled, this estimate increases to 276 KiB.  This dominates the cost of alignment with linker support, even more so if restrictions are placed on labels, but without linker support and the memory map change alignment costs more than the landing pads themselves.\r\n\r\n@ved-rivos @Larhzu I agree that placing `sspush`, `sspopchk` behind runtime tests makes no sense at all.  Zimop is a genuinely useful new primitive, unfortunate as it is that it is likely to share a debut profile with V, and I have no preference between MOPs and normal R-type instructions for the CFI instructions other than `sspush`, `sspopchk`, `lpad`.","reactions":{"url":"https://api.github.com/repos/riscv/riscv-cfi/issues/comments/1606255066/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-25T20:36:15Z","org":{"id":10872782,"login":"riscv","gravatar_id":"","url":"https://api.github.com/orgs/riscv","avatar_url":"https://avatars.githubusercontent.com/u/10872782?"}}
