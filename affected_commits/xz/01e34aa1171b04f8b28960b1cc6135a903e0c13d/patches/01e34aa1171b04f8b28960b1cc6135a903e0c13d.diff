commit 01e34aa1171b04f8b28960b1cc6135a903e0c13d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Sep 29 22:11:54 2023 +0800

    CI: Disable CLANG64 MSYS2 environment until bug is resolved.
    
    lld 17.0.1 searches for libraries to link first in the toolchain
    directories before the local directory when building. The is a problem
    for us because liblzma.a is installed in MSYS2 CLANG64 by default and
    xz.exe will thus use the installed library instead of the one being
    built.
    
    This causes tests to fail when they are expecting features to be
    disabled. More importantly, it will compile xz.exe with an incorrect
    liblzma and could cause unexpected behavior by being unable to update
    liblzma code in static builds. The CLANG64 environment can be tested
    again once this is fixed.
    
    Link to bug: https://github.com/llvm/llvm-project/issues/67779.

diff --git a/.github/workflows/windows-ci.yml b/.github/workflows/windows-ci.yml
index fe62b11b..cb690ddf 100644
--- a/.github/workflows/windows-ci.yml
+++ b/.github/workflows/windows-ci.yml
@@ -1,123 +1,125 @@
 #############################################################################
 #
 # Author: Jia Tan
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 #############################################################################
 
 name: Windows-CI
 
 # Only run the Windows CI manually since it takes much longer than the others.
 on: workflow_dispatch
 
 jobs:
   POSIX:
     strategy:
       matrix:
         # Test different environments since the code may change between
         # them and we want to ensure that we support all potential users.
-        # clang64 currently fails due to a warning, so support will be
-        # added later.
-        msys2_env: [mingw64, mingw32, ucrt64, clang64, msys]
+        # clang64 builds are currently broken when building static libraries
+        # due to a bug in ldd search path:
+        # https://github.com/llvm/llvm-project/issues/67779
+        # TODO - re-enable clang64 when this is resolved.
+        msys2_env: [mingw64, mingw32, ucrt64, msys]
         build_system: [autotools, cmake]
 
     # Set the shell to be msys2 as a default to avoid setting it for
     # every individual run command.
     defaults:
       run:
         shell: msys2 {0}
 
     runs-on: windows-latest
 
     steps:
       #####################
       # Setup Environment #
       #####################
 
       # Rely on the msys2 GitHub Action to set up the msys2 environment.
       - name: Setup MSYS2
         uses: msys2/setup-msys2@v2
         with:
           msystem: ${{ matrix.msys2_env }}
           update: true
           install: pactoys make
 
       - name: Checkout code
         # Need to explicitly set the shell here since we set the default
         # shell as msys2 earlier. This avoids an extra msys2 dependency on
         # git.
         shell: powershell
         # Avoid Windows line endings. Otherwise test_scripts.sh will fail
         # because the expected output is stored in the test framework as a
         # text file and will not match the output from xzgrep.
         run: git config --global core.autocrlf false
 
       - uses: actions/checkout@v3
 
 
       ########################
       # Install Dependencies #
       ########################
 
         # The pacman repository has a different naming scheme for default
         # msys packages than the others. The pacboy tool allows installing
         # the packages possible in matrix setup without a burdensome amount
         # of ifs.
       - name: Install Dependencies
         if: ${{ matrix.msys2_env == 'msys' && matrix.build_system == 'autotools' }}
         run: pacman --noconfirm -S --needed autotools base-devel doxygen gettext-devel gcc
 
       - name: Install Dependencies
         if: ${{ matrix.msys2_env != 'msys' && matrix.build_system == 'autotools' }}
         run: pacboy --noconfirm -S --needed autotools:p toolchain:p doxygen:p
 
       - name: Install Dependencies
         if: ${{ matrix.msys2_env == 'msys' && matrix.build_system == 'cmake' }}
         run: pacman --noconfirm -S --needed cmake base-devel gcc
 
       - name: Install Dependencies
         if: ${{ matrix.msys2_env != 'msys' && matrix.build_system == 'cmake' }}
         run: pacboy --noconfirm -S --needed cmake:p toolchain:p
 
       ##################
       # Build and Test #
       ##################
 
       - name: Build with full features
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -p build
       - name: Test with full features
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -p test -n full_features
 
       - name: Build without threads
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -d threads,shared -p build
       - name: Test without threads
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -d threads,shared -p test -n no_threads
 
       - name: Build without encoders
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -d encoders,shared -p build
       - name: Test without encoders
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -d encoders,shared -p test -n no_encoders
 
       - name: Build without decoders
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -d decoders,shared -p build
       - name: Test without decoders
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -d decoders,shared -p test -n no_decoders
 
       - name: Build with only crc32 check
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -c crc32 -d shared,nls -p build
       - name: Test with only crc32 check
         run: ./build-aux/ci_build.sh -a "--no-po4a" -b ${{ matrix.build_system }} -c crc32 -d shared,nls -p test -n crc32_only
 
 
       ###############
       # Upload Logs #
       ###############
 
       # Upload the test logs as artifacts if any step has failed.
       - uses: actions/upload-artifact@v3
         if: ${{ failure() }}
         with:
           name: ${{ matrix.msys2_env }} ${{ matrix.build_system }} Test Logs
           path: build-aux/artifacts