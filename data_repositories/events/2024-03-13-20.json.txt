{"id":"36525285403","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":17530343805,"size":7,"distinct_size":7,"ref":"refs/heads/pr90_pr91","head":"23191a134db5fa24ece84f73c90717617a10fdbe","before":"9f36ee42f1aa1202efdc6511bded2cd4eb3f8ac5","commits":[{"sha":"f56ed6fac6619b56b005878d3b5210e2f0d721c0","author":{"email":"sergey.kosukhin@mpimet.mpg.de","name":"Sergey Kosukhin"},"message":"Build: Let the users override the symbol versioning variant.\n\nThere are cases when the users want to decide themselves whether\nthey want to have the generic (even on GNU/Linux) or the linux\n(even if we do not recommend that) symbol versioning variant.\nThe former might be needed to circumvent compiler issues (i.e.\nthe compiler does not support all features that are required\nfor the linux versioning), the latter might help in overriding\nthe assumptions made in the configure script.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f56ed6fac6619b56b005878d3b5210e2f0d721c0"},{"sha":"45d33bfc45e4295b8ad743bc2ae61cc724f98076","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Build: Style tweaks to configure.ac.\n\nThe AC_MSG_ERROR line is overlong anyway as are a few other\nAC_MSG_ERROR lines already.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/45d33bfc45e4295b8ad743bc2ae61cc724f98076"},{"sha":"5190afd24f69f7fa05e59d0bb6aad49526539bcb","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Make symbol versioning configurable.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5190afd24f69f7fa05e59d0bb6aad49526539bcb"},{"sha":"198f485ab224e1a4f13c306afe1395c810c68741","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Disable symbol versioning on non-glibc Linux.\n\nThis better matches what configure.ac does. For example, musl has\nonly basic symbol versioning support:\n\nhttps://wiki.musl-libc.org/functional-differences-from-glibc.html#Symbol_versioning\n\nconfigure.ac tries to enable symbol versioning only with glibc\nso now CMake does the same.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/198f485ab224e1a4f13c306afe1395c810c68741"},{"sha":"cf37b5e377c90cf83bc1136f7943c674e30f6888","author":{"email":"sergey.kosukhin@mpimet.mpg.de","name":"Sergey Kosukhin"},"message":"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).\n\nNVHPC compiler has several issues that make it impossible to\nbuild liblzma:\n  - the compiler cannot handle unions that contain pointers that\n    are not the first members;\n  - the compiler cannot handle the assembler code in range_decoder.h\n    (LZMA_RANGE_DECODER_CONFIG has to be set to zero);\n  - the compiler fails to produce valid code for delta_decode if the\n    vectorization is enabled, which results in failed tests.\n\nThis introduces NVHPC-specific workarounds that address the issues.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/cf37b5e377c90cf83bc1136f7943c674e30f6888"},{"sha":"b618029e86929cae44487b3e8500f32433beb422","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Tweak a comment.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b618029e86929cae44487b3e8500f32433beb422"},{"sha":"23191a134db5fa24ece84f73c90717617a10fdbe","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/23191a134db5fa24ece84f73c90717617a10fdbe"}]},"public":true,"created_at":"2024-03-13T20:00:59Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"36525646728","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":17530525063,"size":6,"distinct_size":6,"ref":"refs/heads/pr90_pr91","head":"51d8614292255c465bcb934dfc68c8df4167d494","before":"23191a134db5fa24ece84f73c90717617a10fdbe","commits":[{"sha":"bc8028e0afcd507cff17413cb9d15afbf54e937d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"INSTALL: Document arguments of --enable-symbol-versions.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/bc8028e0afcd507cff17413cb9d15afbf54e937d"},{"sha":"ad721015f78a3779e72897f9e53d3eb4086bcc23","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Make symbol versioning configurable.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/ad721015f78a3779e72897f9e53d3eb4086bcc23"},{"sha":"1f12cf840d4d7b27ae75da63ed6cb5823c2ef0e0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Disable symbol versioning on non-glibc Linux.\n\nThis better matches what configure.ac does. For example, musl has\nonly basic symbol versioning support:\n\nhttps://wiki.musl-libc.org/functional-differences-from-glibc.html#Symbol_versioning\n\nconfigure.ac tries to enable symbol versioning only with glibc\nso now CMake does the same.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/1f12cf840d4d7b27ae75da63ed6cb5823c2ef0e0"},{"sha":"12a7284764908b40bc1a6944f96a27b52786d9cf","author":{"email":"sergey.kosukhin@mpimet.mpg.de","name":"Sergey Kosukhin"},"message":"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).\n\nNVHPC compiler has several issues that make it impossible to\nbuild liblzma:\n  - the compiler cannot handle unions that contain pointers that\n    are not the first members;\n  - the compiler cannot handle the assembler code in range_decoder.h\n    (LZMA_RANGE_DECODER_CONFIG has to be set to zero);\n  - the compiler fails to produce valid code for delta_decode if the\n    vectorization is enabled, which results in failed tests.\n\nThis introduces NVHPC-specific workarounds that address the issues.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/12a7284764908b40bc1a6944f96a27b52786d9cf"},{"sha":"89bb984d6a7820ce8ced9dcfb616d2b5fae51367","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Tweak a comment.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/89bb984d6a7820ce8ced9dcfb616d2b5fae51367"},{"sha":"51d8614292255c465bcb934dfc68c8df4167d494","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/51d8614292255c465bcb934dfc68c8df4167d494"}]},"public":true,"created_at":"2024-03-13T20:14:20Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"36525751299","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":17530578159,"size":6,"distinct_size":6,"ref":"refs/heads/pr90_pr91","head":"ec44c8f52150f59c35ea1431561ad5c29f2566d7","before":"51d8614292255c465bcb934dfc68c8df4167d494","commits":[{"sha":"977e9cbbdcfa6d9cffbf7c9d53b92690d224c6b7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"INSTALL: Document arguments of --enable-symbol-versions.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/977e9cbbdcfa6d9cffbf7c9d53b92690d224c6b7"},{"sha":"ba24f617e99644dbb3c15a411e29f8bf0a6d89ba","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Make symbol versioning configurable.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/ba24f617e99644dbb3c15a411e29f8bf0a6d89ba"},{"sha":"32e3b6b67065a115a018f5cf100cd173b022df5f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Disable symbol versioning on non-glibc Linux.\n\nThis better matches what configure.ac does. For example, musl has\nonly basic symbol versioning support:\n\nhttps://wiki.musl-libc.org/functional-differences-from-glibc.html#Symbol_versioning\n\nconfigure.ac tries to enable symbol versioning only with glibc\nso now CMake does the same.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/32e3b6b67065a115a018f5cf100cd173b022df5f"},{"sha":"dfbcd4827f80fd27a8f82de160712f75980001fb","author":{"email":"sergey.kosukhin@mpimet.mpg.de","name":"Sergey Kosukhin"},"message":"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).\n\nNVHPC compiler has several issues that make it impossible to\nbuild liblzma:\n  - the compiler cannot handle unions that contain pointers that\n    are not the first members;\n  - the compiler cannot handle the assembler code in range_decoder.h\n    (LZMA_RANGE_DECODER_CONFIG has to be set to zero);\n  - the compiler fails to produce valid code for delta_decode if the\n    vectorization is enabled, which results in failed tests.\n\nThis introduces NVHPC-specific workarounds that address the issues.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/dfbcd4827f80fd27a8f82de160712f75980001fb"},{"sha":"552d27417be9c72522f7ec43d4c0a059875c8f7d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Tweak a comment.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/552d27417be9c72522f7ec43d4c0a059875c8f7d"},{"sha":"ec44c8f52150f59c35ea1431561ad5c29f2566d7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/ec44c8f52150f59c35ea1431561ad5c29f2566d7"}]},"public":true,"created_at":"2024-03-13T20:18:17Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"36526449433","type":"IssueCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/90","repository_url":"https://api.github.com/repos/tukaani-project/xz","labels_url":"https://api.github.com/repos/tukaani-project/xz/issues/90/labels{/name}","comments_url":"https://api.github.com/repos/tukaani-project/xz/issues/90/comments","events_url":"https://api.github.com/repos/tukaani-project/xz/issues/90/events","html_url":"https://github.com/tukaani-project/xz/pull/90","id":2183813556,"node_id":"PR_kwDOIQBEvs5pft-s","number":90,"title":"Build: Let the users override the symbol versioning variant.","user":{"login":"skosukhin","id":19591868,"node_id":"MDQ6VXNlcjE5NTkxODY4","avatar_url":"https://avatars.githubusercontent.com/u/19591868?v=4","gravatar_id":"","url":"https://api.github.com/users/skosukhin","html_url":"https://github.com/skosukhin","followers_url":"https://api.github.com/users/skosukhin/followers","following_url":"https://api.github.com/users/skosukhin/following{/other_user}","gists_url":"https://api.github.com/users/skosukhin/gists{/gist_id}","starred_url":"https://api.github.com/users/skosukhin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/skosukhin/subscriptions","organizations_url":"https://api.github.com/users/skosukhin/orgs","repos_url":"https://api.github.com/users/skosukhin/repos","events_url":"https://api.github.com/users/skosukhin/events{/privacy}","received_events_url":"https://api.github.com/users/skosukhin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2024-03-13T11:53:44Z","updated_at":"2024-03-13T20:45:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/tukaani-project/xz/pulls/90","html_url":"https://github.com/tukaani-project/xz/pull/90","diff_url":"https://github.com/tukaani-project/xz/pull/90.diff","patch_url":"https://github.com/tukaani-project/xz/pull/90.patch","merged_at":null},"body":"There are cases when the users want to decide themselves whether they want to have the generic (even on GNU/Linux) or the linux (even if we do not recommend that) symbol versioning variant. The former might be needed to circumvent compiler issues (i.e. the compiler does not support all features that are required for the linux versioning), the latter might help in overriding the assumptions made in the configure script.\r\n\r\n## Pull request checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)\r\n- [x] Build was run locally and without warnings or errors\r\n- [x] All previous and new tests pass\r\n\r\n\r\n## Pull request type\r\n\r\nPlease check the type of change your PR introduces:\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, renaming, typo fix)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other (please describe): \r\n\r\n\r\n## What is the current behavior?\r\nIt's not possible to override the symbol versioning variant on GNU/Linux:\r\n```console\r\n$ ./configure --enable-symbol-versions=auto | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (linux)\r\n$ ./configure --enable-symbol-versions=yes | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (linux)\r\n$ ./configure --enable-symbol-versions=no | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... no\r\n$ ./configure --enable-symbol-versions=linux | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (linux)\r\n$ ./configure --enable-symbol-versions=generic | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (linux)\r\n$ ./configure --enable-symbol-versions=something-else | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (linux)\r\n$ ./configure --enable-symbol-versions --disable-shared | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... no (not building a shared library)\r\n$ ./configure --with-pic | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... \r\nconfigure: error: \r\n    On GNU/Linux, building both shared and static library at the same time\r\n    is not supported if --with-pic or --without-pic is used.\r\n    Use either --disable-shared or --disable-static to build one type\r\n    of library at a time. If both types are needed, build one at a time,\r\n    possibly picking only src/liblzma/.libs/liblzma.a from the static build.\r\n```\r\n\r\n## What is the new behavior?\r\nIt is possible to override the symbol versioning variant:\r\n```console\r\n$ ./configure --enable-symbol-versions=auto | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (linux)\r\n$ ./configure --enable-symbol-versions=yes | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (linux)\r\n$ ./configure --enable-symbol-versions=no | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... no\r\n$ ./configure --enable-symbol-versions=linux | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (linux)\r\n$ ./configure --enable-symbol-versions=generic | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... yes (generic)\r\n$ ./configure --enable-symbol-versions=something-else | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... \r\nconfigure: error: unknown symbol versioning variant 'something-else'\r\n$ ./configure --enable-symbol-versions --disable-shared | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... no (not building a shared library)\r\n$ ./configure --with-pic | grep 'library symbol versioning'\r\nchecking if library symbol versioning should be used... \r\nconfigure: error: \r\n    On GNU/Linux, building both shared and static library at the same time\r\n    is not supported if --with-pic or --without-pic is used.\r\n    Use either --disable-shared or --disable-static to build one type\r\n    of library at a time. If both types are needed, build one at a time,\r\n    possibly picking only src/liblzma/.libs/liblzma.a from the static build.\r\n```\r\n\r\n## Does this introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\n\r\nIt looks like `--enable-symbol-versions=generic` was an unintended feature that existed before 0682439.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/90/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/tukaani-project/xz/issues/90/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1995747754","html_url":"https://github.com/tukaani-project/xz/pull/90#issuecomment-1995747754","issue_url":"https://api.github.com/repos/tukaani-project/xz/issues/90","id":1995747754,"node_id":"IC_kwDOIQBEvs529LGq","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"created_at":"2024-03-13T20:45:45Z","updated_at":"2024-03-13T20:45:45Z","author_association":"MEMBER","body":"Thanks! I've collected this into pr90_pr91 branch with matching CMake\nfixes.\n\n> It looks like `--enable-symbol-versions=generic` was an unintended\n> feature that existed before 0682439.\n\nQuite possibly so. I agree it should be configurable.\n\n> `__has_attribute(__symver__)` for the Nvidia compiler is `0` and it\n> chokes with `__asm__(\".symver ...\")`:\n\nIt is clear that the compiler doesn't support symbol versioning in any\nform. The linker still does, thus thus the \"generic\" versioning works.\n\n> -\t__asm__(\".symver \" #intname \",\" extnamever);\n> +\t__asm__(\".symver \" #intname \",\" extnamever \";\");\n\nAs you noticed, the additional symbols didn't appear. The correct way\nis to use the \"generic\" versioning which doesn't even attempt to add\nthose extra symbol versions. This is assuming that the toolchain truly\nis targeting glibc (configure thinks it is).\n\n> This could be checked by the configure script, I guess (one should be\n> careful with using something non-portable like `readelf` in a\n> configure script though).\n\nconfigure and CMakeLists.txt could check for __NVCOMPILER. I suppose\nthat would be reasonable. I plan to add that in the near future, unless\nthe problem is that the build isn't actually targeting glibc and\nconfigure is misdetecting that.\n\nNot very many users should be affected by changing from \"linux\" to\n\"generic\". The \"linux\" one only helps with binary compatibility with\nsome executables which hopefully aren't too common.\n\n> Another question, when someone specifies `./configure\n> --enable-symbol-versions=yes --disable-shared `\n\nIt's simplest to just ignore --enable-symbol-versions in this case.\nSymbol versions make no sense in static libraries but they can cause\nbreakage in some cases. If we rejected the option with static-only\nbuilds it could complicate build scripts that use mostly the same\noptions for building shared and static liblzma in separate runs.\n","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/issues/comments/1995747754/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-03-13T20:45:46Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
