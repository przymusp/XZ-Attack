{"id":"32353808877","type":"CommitCommentEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/comments/129271457","html_url":"https://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129271457","id":129271457,"node_id":"CC_kwDOIQBEvs4HtIah","user":{"login":"Larhzu","id":120408189,"node_id":"U_kgDOBy1IfQ","avatar_url":"https://avatars.githubusercontent.com/u/120408189?v=4","gravatar_id":"","url":"https://api.github.com/users/Larhzu","html_url":"https://github.com/Larhzu","followers_url":"https://api.github.com/users/Larhzu/followers","following_url":"https://api.github.com/users/Larhzu/following{/other_user}","gists_url":"https://api.github.com/users/Larhzu/gists{/gist_id}","starred_url":"https://api.github.com/users/Larhzu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Larhzu/subscriptions","organizations_url":"https://api.github.com/users/Larhzu/orgs","repos_url":"https://api.github.com/users/Larhzu/repos","events_url":"https://api.github.com/users/Larhzu/events{/privacy}","received_events_url":"https://api.github.com/users/Larhzu/received_events","type":"User","site_admin":false},"position":null,"line":null,"path":null,"commit_id":"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","created_at":"2023-10-05T21:09:44Z","updated_at":"2023-10-05T21:09:44Z","author_association":"MEMBER","body":"Thanks for llvm-windres and improving the GNU windres compatibility! They way GNU windres handles the arguments doesn't feel right but it cannot be fixed in backward compatible way. It was confusing to figure it out as quoting has to work in both /bin/sh and cmd.exe. The docs don't directly say that `--use-temp-file` affects options handling but eventually I ended up trying that too.\r\n\r\nUsing `MINGW` instead of `WIN32`: I understand the point. Would Cygwin be affected then though? I suppose Cygwin needs the windres workaround too. So should it be `MINGW OR CYGWIN` or `WIN32 AND NOT MSVC`? Or are there more targets that match `WIN32` too? Sorry, I'm quite clueless here.\r\n\r\n(There are more Windows-related improments to CMake-based build coming. I pushed some to the [w32_update](https://github.com/tukaani-project/xz/tree/w32_update) branch but it's not finished or polished yet. E.g. build.bash hasn't actually been tested on MSYS2 (and it's hardcoded for GCC too). Completely revised build instructions (CMake + MinGW-w64 + plain Command Prompt) for less experienced developers are coming too. For a long time I thought that CMake-based build would be for MSVC only but in the past two weeks I have started to think that it doesn't lack too many things anymore so maybe it should be polished to make it truly good on a few other common targets too.\r\n\r\nI have heard comments saying that we should use Meson but years ago CMake support was requested due to Windows so that was started back then. Maintaining very many build systems isn't practical. Autotools cannot be dropped because those are likely the most supported method on less known platforms (for example, being EBCDIC compatible matters or at least did a few years ago) although Libtool's shared library versioning oddities [have bothered me](https://lists.gnu.org/archive/html/libtool/2011-06/msg00006.html) a long time.)","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/comments/129271457/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}}},"public":true,"created_at":"2023-10-05T21:09:44Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"32354041335","type":"CommitCommentEvent","actor":{"id":69727,"login":"mstorsjo","display_login":"mstorsjo","gravatar_id":"","url":"https://api.github.com/users/mstorsjo","avatar_url":"https://avatars.githubusercontent.com/u/69727?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"comment":{"url":"https://api.github.com/repos/tukaani-project/xz/comments/129272283","html_url":"https://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129272283","id":129272283,"node_id":"CC_kwDOIQBEvs4HtInb","user":{"login":"mstorsjo","id":69727,"node_id":"MDQ6VXNlcjY5NzI3","avatar_url":"https://avatars.githubusercontent.com/u/69727?v=4","gravatar_id":"","url":"https://api.github.com/users/mstorsjo","html_url":"https://github.com/mstorsjo","followers_url":"https://api.github.com/users/mstorsjo/followers","following_url":"https://api.github.com/users/mstorsjo/following{/other_user}","gists_url":"https://api.github.com/users/mstorsjo/gists{/gist_id}","starred_url":"https://api.github.com/users/mstorsjo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mstorsjo/subscriptions","organizations_url":"https://api.github.com/users/mstorsjo/orgs","repos_url":"https://api.github.com/users/mstorsjo/repos","events_url":"https://api.github.com/users/mstorsjo/events{/privacy}","received_events_url":"https://api.github.com/users/mstorsjo/received_events","type":"User","site_admin":false},"position":null,"line":null,"path":null,"commit_id":"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","created_at":"2023-10-05T21:21:45Z","updated_at":"2023-10-05T21:21:45Z","author_association":"NONE","body":"> Using `MINGW` instead of `WIN32`: I understand the point. Would Cygwin be affected then though? I suppose Cygwin needs the windres workaround too. So should it be `MINGW OR CYGWIN` or `WIN32 AND NOT MSVC`? Or are there more targets that match `WIN32` too? Sorry, I'm quite clueless here.\r\n\r\nI'm not entirely 100% sure here, but I think `MINGW OR CYGWIN` might be the right thing; cygwin in general doesn't set `WIN32` I think, as it's mostly considered unixy.\r\n\r\n> I have heard comments saying that we should use Meson but years ago CMake support was requested due to Windows so that was started back then. Maintaining very many build systems isn't practical.\r\n\r\nYep, totally agree. And usually it's worse if one provides multiple build systems, but their functionality isn't entirely equal, either in how the build works, or worse, the header/pkgconfig install layout differs, or ABI details like sonames or such differ between various builds.\r\n\r\n> Autotools cannot be dropped because those are likely the most supported method on less known platforms (for example, being EBCDIC compatible matters or at least did a few years ago) although Libtool's shared library versioning oddities [have bothered me](https://lists.gnu.org/archive/html/libtool/2011-06/msg00006.html) a long time.)\r\n\r\nI've got plenty of Libtool frustrations myself as well...\r\n\r\nClang links compiler-rt builtins by passing an absolute path to the `.a` file, instead of passing `-L` + `-l`. If you're linking a C++ library with libtool, libtool decides to do a test run of the compiler with `-v`, to see what linker flags it passes by default. Then it will do the actual link with `-nostdlibs` and manually readd the options it thinks are relevant; it extracts all `-L` and `-l` options, but drops `/absolute/path/to/lib.a`. https://debbugs.gnu.org/cgi/bugreport.cgi?bug=27866 There was something that seemed like action towards getting this resolved last year, but then maintainance stopped again.","reactions":{"url":"https://api.github.com/repos/tukaani-project/xz/comments/129272283/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}}},"public":true,"created_at":"2023-10-05T21:21:45Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
