<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recent posts to Exporting API from src/liblzma/lzma/lzma_decoder.c to use with jffs2reader from mtd-utils package</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/d02ebb9386/</link><description>Recent posts to Exporting API from src/liblzma/lzma/lzma_decoder.c to use with jffs2reader from mtd-utils package</description><language>en</language><lastBuildDate>Wed, 10 Nov 2021 13:36:27 -0000</lastBuildDate><atom:link href="https://sourceforge.net/p/lzmautils/discussion/708858/thread/d02ebb9386/feed.rss" rel="self" type="application/rss+xml"></atom:link><item><title>Exporting API from src/liblzma/lzma/lzma_decoder.c to use with jffs2reader from mtd-utils package</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/d02ebb9386/?limit=25#ccf7/6dd3</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Hi Lasse!&lt;/p&gt;
&lt;p&gt;Thanks for all your comments.&lt;br/&gt;
I worked to make the changes you suggested, and it work well with the lib provided with Ubuntu 20.04 like that.&lt;br/&gt;
I had to set the  LZMA properties byte (lc/lp/pb) to 0 though, or it wouldn't work. I'm not sure about the implication, but I feel I'm lucky I managed to make it worked in the first place on my side.&lt;/p&gt;
&lt;p&gt;So I discoved jffs2reader is part of mtd-utils, which is managed by a linux-mtd, which is a sub-team from the linux kernel.&lt;br/&gt;
Not sure it'll get integrated given their high standard and I have no history their whatsover... But I did my best to have something clean!&lt;br/&gt;
&lt;a href="https://lists.infradead.org/pipermail/linux-mtd/2021-November/089461.html" rel="nofollow"&gt;https://lists.infradead.org/pipermail/linux-mtd/2021-November/089461.html&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fred Germain</dc:creator><pubDate>Wed, 10 Nov 2021 13:36:27 -0000</pubDate><guid isPermaLink="false">https://sourceforge.netf0aea2f198a76dfd7827ac1ec0fe0097351d384a</guid></item><item><title>Exporting API from src/liblzma/lzma/lzma_decoder.c to use with jffs2reader from mtd-utils package</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/d02ebb9386/?limit=25#ccf7</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Yes, the "no end marker, uncompressed size is known" LZMA API should be exported. Even more importantly, there should be an API to compress without the end marker. LZMA2 does that with internal APIs but it's not exported either. Things just need to get done, I'm badly behind reviewing even the existing patches.&lt;/p&gt;
&lt;p&gt;With the current API, a very easy workaround for decompression is to use lzma_alone_decoder(). All you need to do is prefix the raw LZMA stream with a 13-byte fake header:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 byte: LZMA properties byte (lc/lp/pb), for the typical 3/0/2 it's 0x5D.&lt;/li&gt;
&lt;li&gt;4 bytes: dictionary size as bytes, unsigned 32-bit little endian integer (round up to  2^n or 2^n + 2^(n-1), other sizes will be rejected by liblzma)&lt;/li&gt;
&lt;li&gt;8 bytes: uncompressed size as unsigned 64-bit little endian integer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if it feels ugly, I recommend using this trick because it works with any xz 5.x.x release and does everything that a proper future API would do (well, a proper API would allow any dictionary size, that's the only difference).&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Thu, 28 Oct 2021 22:15:56 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net9899eed7cf0fd1ebb45ea3e1ab1a8f9cd9b3799a</guid></item><item><title>Exporting API from src/liblzma/lzma/lzma_decoder.c to use with jffs2reader from mtd-utils package</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/d02ebb9386/?limit=25#708f</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I've unintentionnaly removed a file from my openwrt router. It was on a jffs2 partition, with lzma compression activated (it's activated on openwrt, there is a jffs2_make_lzma_available.patch applied on the kernel)&lt;/p&gt;
&lt;p&gt;I've dig into the partition, and discovered the nice jffs2dump/jffs2reader to recover my file "offline".&lt;/p&gt;
&lt;p&gt;I've tried to port the LZMA support in jffs2reader. After much digging, I've managed to have it working by patching liblzma, to access lzma_decoder.c, bypassing lzma2_decoder.c&lt;br/&gt;
To make it short, we get compressed_size/uncompressed_size from the jffs2 inode entry, so no need the extra lzma2_decoder layer.&lt;/p&gt;
&lt;p&gt;It seems the API of lzma_decoder.c are not public. Could it be possible to consider exporting them, so we could use it from jffs2reader?&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fred Germain</dc:creator><pubDate>Tue, 26 Oct 2021 11:15:26 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net62514901d40a9aaf8321f2c5722425c2d6400372</guid></item></channel></rss>