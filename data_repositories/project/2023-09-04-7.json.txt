{"id":"31572249025","type":"PushEvent","actor":{"id":24464306,"login":"searlmc1","display_login":"searlmc1","gravatar_id":"","url":"https://api.github.com/users/searlmc1","avatar_url":"https://avatars.githubusercontent.com/u/24464306?"},"repo":{"id":190654577,"name":"RadeonOpenCompute/llvm-project","url":"https://api.github.com/repos/RadeonOpenCompute/llvm-project"},"payload":{"repository_id":190654577,"push_id":14909429636,"size":5,"distinct_size":5,"ref":"refs/heads/release/17.x","head":"ecea6d6828d6591c80285ffb5c2be1312c201549","before":"a612cb0b81d8b2573c30e5ae89a8e899999b045b","commits":[{"sha":"6a562bbd51c9ad1ff522d19a0b247595c1f85184","author":{"email":"hokein.wu@gmail.com","name":"Haojian Wu"},"message":"[Tooling/Inclusion] Add std::range symbols in the mapping.\n\nFixes https://github.com/llvm/llvm-project/issues/64191\n\nDifferential Revision: https://reviews.llvm.org/D156648\n\n(cherry picked from commit 171868dc2cd60c6e3eaeb3861b18ba0e22461291)","distinct":true,"url":"https://api.github.com/repos/RadeonOpenCompute/llvm-project/commits/6a562bbd51c9ad1ff522d19a0b247595c1f85184"},{"sha":"466677b126855c79a05a1ebc111eea48053ad4ef","author":{"email":"martin@martin.st","name":"Martin Storsj√∂"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223\n\n(cherry picked from commit 2bcc0fdc58a220cb9921b47ec8a32c85f2511a47)","distinct":true,"url":"https://api.github.com/repos/RadeonOpenCompute/llvm-project/commits/466677b126855c79a05a1ebc111eea48053ad4ef"},{"sha":"ca372df48a05534d42130e6ecb4f6b275e003a08","author":{"email":"htsk30@gmail.com","name":"hstk30"},"message":"[AArch64] Fix arm neon vstx lane memVT size\n\nStN lane memory size set too big lead to alias analysis goes wrong.\n\nFixes https://github.com/llvm/llvm-project/issues/64696\n\nDifferential Revision: https://reviews.llvm.org/D158611\n\n(cherry picked from commit db8f6c009e5a17d304be7404e50eb20b2dd0c75b)","distinct":true,"url":"https://api.github.com/repos/RadeonOpenCompute/llvm-project/commits/ca372df48a05534d42130e6ecb4f6b275e003a08"},{"sha":"e04acab63c2682c690790111d688419158f15978","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Driver] Report warnings for unclaimed TargetSpecific options for assembler input\n\nThis patch amends D151590 to not error for unlaimed TargetSpecific\noptions for `-x assembler` input files. This input type causes Driver to\nconstruct tools::ClangAs (-fintegrated-as) or other assemblers (e.g.\ntools::gnutools::Assembler) Their ConstructJobs methods, unlike\nClang::ConstructJobs, claim very few options. If an option is unclaimed,\nit either leads to a -Wunused-command-line-argument warning or an error\n(if `TargetSpecific` is set):\n```\n% clang '-###' --target=aarch64 -mbranch-protection=bti -c a.s\nclang: error: unsupported option '-mbranch-protection=' for target 'aarch64'\n```\n\nIt seems that downgrading the diagnostic to warning is most useful as\nmany users use CFLAGS even for `.s` files:\n```\nclang --target=aarch64 -mbranch-protection=bti -S a.c\nclang --target=aarch64 -mbranch-protection=bti -c a.s\n```\n\nI decide not to suppress the warning so that\n-Wunused-command-line-argument lovers still get a warning, and help\nprojects use proper ASFLAGS/CFLAGS/etc.\n\nNote: `-mbranch-protection=bti a.S` currently has no warning as `-x assembler-with-cpp`\ninstructs clangDriver to select tools::Clang and claim most options.\n\nRevert D159010 to demonstrate that we emit a warning for -mfpmath= for\n`-x assembler` input.\n\nModify my AIX cleanup cd18efb61d759405956dbd30e4b5f2720d8e1783 to\nadd an err_drv_unsupported_opt_for_target.\n\nReviewed By: thesamesam\n\nDifferential Revision: https://reviews.llvm.org/D159173\n\n(cherry picked from commit e9d454d1c195958645fb0948f8b97262e7f8b33a)","distinct":true,"url":"https://api.github.com/repos/RadeonOpenCompute/llvm-project/commits/e04acab63c2682c690790111d688419158f15978"},{"sha":"ecea6d6828d6591c80285ffb5c2be1312c201549","author":{"email":"v.g.vassilev@gmail.com","name":"Vassil Vassilev"},"message":"[CodeGen] First check the kind and then the llvm::Function properties.\n\nThis patch fixes valgrind reports from downstream consumers about conditional\njump over uninitialised memory.\n\nThe original report:\n\n```[ RUN      ] ScopeReflectionTest.IsComplete\n==987150== Conditional jump or move depends on uninitialised value(s)\n==987150==    at 0x1E1128F: clang::CodeGen::CodeGenModule::SetLLVMFunctionAttributesForDefinition(clang::Decl const*, llvm::Function*) (CodeGenModule.cpp:2391)\n==987150==    by 0x1E4F181: clang::CodeGen::CodeGenModule::EmitGlobalFunctionDefinition(clang::GlobalDecl, llvm::GlobalValue*) (CodeGenModule.cpp:5669)\n==987150==    by 0x1E4A194: clang::CodeGen::CodeGenModule::EmitGlobalDefinition(clang::GlobalDecl, llvm::GlobalValue*) (CodeGenModule.cpp:3909)\n==987150==    by 0x1E4A752: clang::CodeGen::CodeGenModule::EmitGlobal(clang::GlobalDecl) (CodeGenModule.cpp:3649)\n==987150==    by 0x1E532F5: clang::CodeGen::CodeGenModule::EmitTopLevelDecl(clang::Decl*) [clone .part.0] (CodeGenModule.cpp:6563)\n==987150==    by 0x1B0BEDD: (anonymous namespace)::CodeGeneratorImpl::HandleTopLevelDecl(clang::DeclGroupRef) (ModuleBuilder.cpp:190)\n==987150==    by 0x1AEA47B: clang::BackendConsumer::HandleTopLevelDecl(clang::DeclGroupRef) (CodeGenAction.cpp:235)\n==987150==    by 0x101B02F: clang::IncrementalASTConsumer::HandleTopLevelDecl(clang::DeclGroupRef) (IncrementalParser.cpp:52)\n==987150==    by 0x101ED93: clang::IncrementalParser::ParseOrWrapTopLevelDecl() (IncrementalParser.cpp:276)\n==987150==    by 0x101FBBC: clang::IncrementalParser::Parse(llvm::StringRef) (IncrementalParser.cpp:342)\n==987150==    by 0x100E104: clang::Interpreter::Parse(llvm::StringRef) (Interpreter.cpp:360)\n==987150==    by 0xE734C0: Cpp::Interpreter::Parse(llvm::StringRef) (CppInterOpInterpreter.h:172)\n==987150==  Uninitialised value was created by a heap allocation\n==987150==    at 0x844BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\n==987150==    by 0x1B0C882: StartModule (ModuleBuilder.cpp:139)\n==987150==    by 0x1B0C882: clang::CodeGenerator::StartModule(llvm::StringRef, llvm::LLVMContext&) (ModuleBuilder.cpp:360)\n==987150==    by 0x101C4AF: clang::IncrementalParser::GenModule() (IncrementalParser.cpp:372)\n==987150==    by 0x101FC0E: clang::IncrementalParser::Parse(llvm::StringRef) (IncrementalParser.cpp:362)\n==987150==    by 0x100E104: clang::Interpreter::Parse(llvm::StringRef) (Interpreter.cpp:360)\n==987150==    by 0x100E243: clang::Interpreter::create(std::unique_ptr<clang::CompilerInstance, std::default_delete<clang::CompilerInstance> >) (Interpreter.cpp:279)\n==987150==    by 0xF2131A: compat::createClangInterpreter(std::vector<char const*, std::allocator<char const*> >&) (Compatibility.h:123)\n==987150==    by 0xF22AB9: Cpp::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) (CppInterOpInterpreter.h:146)\n==987150==    by 0xF1827A: CreateInterpreter (CppInterOp.cpp:2494)\n==987150==    by 0xECFA0E: TestUtils::GetAllTopLevelDecls(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<clang::Decl*, std::allocator<clang::Decl*> >&, bool) (Utils.cpp:23)\n==987150==    by 0xE9CB85: ScopeReflectionTest_IsComplete_Test::TestBody() (ScopeReflectionTest.cpp:71)\n==987150==    by 0xF0ED0C: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in /home/vvassilev/workspace/builds/scratch/cppyy/InterOp/build-with-clang-repl-release/unittests/CppInterOp/CppInterOpTests)\n==987150==\n```\n\nDifferential revision: https://reviews.llvm.org/D159339\n\n(cherry picked from commit 92246a9be0ba47788ada9621bef58ce7819be526)","distinct":true,"url":"https://api.github.com/repos/RadeonOpenCompute/llvm-project/commits/ecea6d6828d6591c80285ffb5c2be1312c201549"}]},"public":true,"created_at":"2023-09-04T07:00:22Z","org":{"id":16900649,"login":"RadeonOpenCompute","gravatar_id":"","url":"https://api.github.com/orgs/RadeonOpenCompute","avatar_url":"https://avatars.githubusercontent.com/u/16900649?"}}
{"id":"31572729415","type":"PushEvent","actor":{"id":465279,"login":"kraj","display_login":"kraj","gravatar_id":"","url":"https://api.github.com/users/kraj","avatar_url":"https://avatars.githubusercontent.com/u/465279?"},"repo":{"id":166064638,"name":"kraj/llvm-project","url":"https://api.github.com/repos/kraj/llvm-project"},"payload":{"repository_id":166064638,"push_id":14909653892,"size":5,"distinct_size":5,"ref":"refs/heads/release/17.x","head":"ecea6d6828d6591c80285ffb5c2be1312c201549","before":"a612cb0b81d8b2573c30e5ae89a8e899999b045b","commits":[{"sha":"6a562bbd51c9ad1ff522d19a0b247595c1f85184","author":{"email":"hokein.wu@gmail.com","name":"Haojian Wu"},"message":"[Tooling/Inclusion] Add std::range symbols in the mapping.\n\nFixes https://github.com/llvm/llvm-project/issues/64191\n\nDifferential Revision: https://reviews.llvm.org/D156648\n\n(cherry picked from commit 171868dc2cd60c6e3eaeb3861b18ba0e22461291)","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/6a562bbd51c9ad1ff522d19a0b247595c1f85184"},{"sha":"466677b126855c79a05a1ebc111eea48053ad4ef","author":{"email":"martin@martin.st","name":"Martin Storsj√∂"},"message":"[llvm-windres] Implement the windres flag --use-temp-file\n\nWhether a temp file or a pipe is used for preprocessing is an\ninternal detail, this flag has a notable effect on the preprocessing\nin GNU windres. Without this flag, GNU windres passes command\narguments as-is to popen(), which means they get evaluated by a\nshell without being re-escaped for this case. To mimic this,\nllvm-windres has manually tried to unescape arguments.\n\nWhen GNU windres is given the --use-temp-file flag, it uses a\ndifferent API for invoking the preprocessor, and this API takes care\nof preserving special characters in the command line arguments.\nFor users of GNU windres, this means that by using --use-temp-file,\nthey don't need to do the (quite terrible) double escaping of\nquotes/spaces etc.\n\nThe xz project uses the --use-temp-file flag when invoking\nGNU windres, see\nhttps://github.com/tukaani-project/xz/commit/6b117d3b1fe91eb26d533ab16a2e552f84148d47.\nHowever as llvm-windres didn't implement this flag and just\nassumed the GNU windres popen() behaviour, they had to use a\ndifferent codepath for llvm-windres.\n\nThat separate codepath for llvm-windres broke later when llvm-windres\ngot slightly more accurate unescaping of lone quotes in\n0f4c6b120f21d582ab7c5c4f2b2a475086c34938 /\nhttps://reviews.llvm.org/D146848 (fixing a discrepancy to GNU\nwindres as found in https://github.com/llvm/llvm-project/issues/57334),\nand this was reported in\nhttps://github.com/mstorsjo/llvm-mingw/issues/363.\n\nNot touching the implementation of the --preprocessor option\nwith respect to the --use-temp-file flag; that option is doubly\ntricky as GNU windres changed its behaviour in a backwards incompatible\nway recently (and llvm-windres currently matches the old behaviour).\n(See\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=21c33bcbe36377abf01614fb1b9be439a3b6de20,\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=27594 and\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=5edb8e3f5ad8d74a83fc0df7f6e4514eed0aa77f;hp=3abbafc2aacc6706fea3e3e326e2f08d107c3672\nfor the behaviour change.)\n\nDifferential Revision: https://reviews.llvm.org/D159223\n\n(cherry picked from commit 2bcc0fdc58a220cb9921b47ec8a32c85f2511a47)","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/466677b126855c79a05a1ebc111eea48053ad4ef"},{"sha":"ca372df48a05534d42130e6ecb4f6b275e003a08","author":{"email":"htsk30@gmail.com","name":"hstk30"},"message":"[AArch64] Fix arm neon vstx lane memVT size\n\nStN lane memory size set too big lead to alias analysis goes wrong.\n\nFixes https://github.com/llvm/llvm-project/issues/64696\n\nDifferential Revision: https://reviews.llvm.org/D158611\n\n(cherry picked from commit db8f6c009e5a17d304be7404e50eb20b2dd0c75b)","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/ca372df48a05534d42130e6ecb4f6b275e003a08"},{"sha":"e04acab63c2682c690790111d688419158f15978","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Driver] Report warnings for unclaimed TargetSpecific options for assembler input\n\nThis patch amends D151590 to not error for unlaimed TargetSpecific\noptions for `-x assembler` input files. This input type causes Driver to\nconstruct tools::ClangAs (-fintegrated-as) or other assemblers (e.g.\ntools::gnutools::Assembler) Their ConstructJobs methods, unlike\nClang::ConstructJobs, claim very few options. If an option is unclaimed,\nit either leads to a -Wunused-command-line-argument warning or an error\n(if `TargetSpecific` is set):\n```\n% clang '-###' --target=aarch64 -mbranch-protection=bti -c a.s\nclang: error: unsupported option '-mbranch-protection=' for target 'aarch64'\n```\n\nIt seems that downgrading the diagnostic to warning is most useful as\nmany users use CFLAGS even for `.s` files:\n```\nclang --target=aarch64 -mbranch-protection=bti -S a.c\nclang --target=aarch64 -mbranch-protection=bti -c a.s\n```\n\nI decide not to suppress the warning so that\n-Wunused-command-line-argument lovers still get a warning, and help\nprojects use proper ASFLAGS/CFLAGS/etc.\n\nNote: `-mbranch-protection=bti a.S` currently has no warning as `-x assembler-with-cpp`\ninstructs clangDriver to select tools::Clang and claim most options.\n\nRevert D159010 to demonstrate that we emit a warning for -mfpmath= for\n`-x assembler` input.\n\nModify my AIX cleanup cd18efb61d759405956dbd30e4b5f2720d8e1783 to\nadd an err_drv_unsupported_opt_for_target.\n\nReviewed By: thesamesam\n\nDifferential Revision: https://reviews.llvm.org/D159173\n\n(cherry picked from commit e9d454d1c195958645fb0948f8b97262e7f8b33a)","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/e04acab63c2682c690790111d688419158f15978"},{"sha":"ecea6d6828d6591c80285ffb5c2be1312c201549","author":{"email":"v.g.vassilev@gmail.com","name":"Vassil Vassilev"},"message":"[CodeGen] First check the kind and then the llvm::Function properties.\n\nThis patch fixes valgrind reports from downstream consumers about conditional\njump over uninitialised memory.\n\nThe original report:\n\n```[ RUN      ] ScopeReflectionTest.IsComplete\n==987150== Conditional jump or move depends on uninitialised value(s)\n==987150==    at 0x1E1128F: clang::CodeGen::CodeGenModule::SetLLVMFunctionAttributesForDefinition(clang::Decl const*, llvm::Function*) (CodeGenModule.cpp:2391)\n==987150==    by 0x1E4F181: clang::CodeGen::CodeGenModule::EmitGlobalFunctionDefinition(clang::GlobalDecl, llvm::GlobalValue*) (CodeGenModule.cpp:5669)\n==987150==    by 0x1E4A194: clang::CodeGen::CodeGenModule::EmitGlobalDefinition(clang::GlobalDecl, llvm::GlobalValue*) (CodeGenModule.cpp:3909)\n==987150==    by 0x1E4A752: clang::CodeGen::CodeGenModule::EmitGlobal(clang::GlobalDecl) (CodeGenModule.cpp:3649)\n==987150==    by 0x1E532F5: clang::CodeGen::CodeGenModule::EmitTopLevelDecl(clang::Decl*) [clone .part.0] (CodeGenModule.cpp:6563)\n==987150==    by 0x1B0BEDD: (anonymous namespace)::CodeGeneratorImpl::HandleTopLevelDecl(clang::DeclGroupRef) (ModuleBuilder.cpp:190)\n==987150==    by 0x1AEA47B: clang::BackendConsumer::HandleTopLevelDecl(clang::DeclGroupRef) (CodeGenAction.cpp:235)\n==987150==    by 0x101B02F: clang::IncrementalASTConsumer::HandleTopLevelDecl(clang::DeclGroupRef) (IncrementalParser.cpp:52)\n==987150==    by 0x101ED93: clang::IncrementalParser::ParseOrWrapTopLevelDecl() (IncrementalParser.cpp:276)\n==987150==    by 0x101FBBC: clang::IncrementalParser::Parse(llvm::StringRef) (IncrementalParser.cpp:342)\n==987150==    by 0x100E104: clang::Interpreter::Parse(llvm::StringRef) (Interpreter.cpp:360)\n==987150==    by 0xE734C0: Cpp::Interpreter::Parse(llvm::StringRef) (CppInterOpInterpreter.h:172)\n==987150==  Uninitialised value was created by a heap allocation\n==987150==    at 0x844BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\n==987150==    by 0x1B0C882: StartModule (ModuleBuilder.cpp:139)\n==987150==    by 0x1B0C882: clang::CodeGenerator::StartModule(llvm::StringRef, llvm::LLVMContext&) (ModuleBuilder.cpp:360)\n==987150==    by 0x101C4AF: clang::IncrementalParser::GenModule() (IncrementalParser.cpp:372)\n==987150==    by 0x101FC0E: clang::IncrementalParser::Parse(llvm::StringRef) (IncrementalParser.cpp:362)\n==987150==    by 0x100E104: clang::Interpreter::Parse(llvm::StringRef) (Interpreter.cpp:360)\n==987150==    by 0x100E243: clang::Interpreter::create(std::unique_ptr<clang::CompilerInstance, std::default_delete<clang::CompilerInstance> >) (Interpreter.cpp:279)\n==987150==    by 0xF2131A: compat::createClangInterpreter(std::vector<char const*, std::allocator<char const*> >&) (Compatibility.h:123)\n==987150==    by 0xF22AB9: Cpp::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) (CppInterOpInterpreter.h:146)\n==987150==    by 0xF1827A: CreateInterpreter (CppInterOp.cpp:2494)\n==987150==    by 0xECFA0E: TestUtils::GetAllTopLevelDecls(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<clang::Decl*, std::allocator<clang::Decl*> >&, bool) (Utils.cpp:23)\n==987150==    by 0xE9CB85: ScopeReflectionTest_IsComplete_Test::TestBody() (ScopeReflectionTest.cpp:71)\n==987150==    by 0xF0ED0C: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in /home/vvassilev/workspace/builds/scratch/cppyy/InterOp/build-with-clang-repl-release/unittests/CppInterOp/CppInterOpTests)\n==987150==\n```\n\nDifferential revision: https://reviews.llvm.org/D159339\n\n(cherry picked from commit 92246a9be0ba47788ada9621bef58ce7819be526)","distinct":true,"url":"https://api.github.com/repos/kraj/llvm-project/commits/ecea6d6828d6591c80285ffb5c2be1312c201549"}]},"public":true,"created_at":"2023-09-04T07:21:42Z"}
