<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recent posts to How to use XZ_SINGLE mode to decompress file in a limited RAM device</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/8c7b4065fe/</link><description>Recent posts to How to use XZ_SINGLE mode to decompress file in a limited RAM device</description><language>en</language><lastBuildDate>Sat, 05 Dec 2020 22:05:35 -0000</lastBuildDate><atom:link href="https://sourceforge.net/p/lzmautils/discussion/708858/thread/8c7b4065fe/feed.rss" rel="self" type="application/rss+xml"></atom:link><item><title>How to use XZ_SINGLE mode to decompress file in a limited RAM device</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/8c7b4065fe/?limit=25#2464</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;With XZ_SINGLE both input and output must fully fit in RAM at the same time. Thus you need to use XZ_PREALLOC or XZ_DYNALLOC with a big file.&lt;/p&gt;
&lt;p&gt;For example, with code modified for lc=2, using 8 KiB dictionary, and reserving 512+512 bytes for input and output buffers you would need under 20 KiB of RAM with XZ_PREALLOC or XZ_DYNALLOC to decompress as big files as you wish. With lc=2, 4 KiB dictionary, and 32 bytes for output buffer you should be around 15 KiB of RAM.&lt;/p&gt;
&lt;p&gt;For input and output buffer sizes, you can use as small as you wish but at some point performance will probably get slightly worse. You simply have to try different values and decide what is a good compromise.&lt;/p&gt;
&lt;p&gt;I'm not sure how to comment the code. It's from xz_dec_test.c and meant for debuginning in Linux. copy_from_user() is like memcpy() but the first argument points to userspace memory. The crc32 line is purely for debug info. It should work with XZ_PREALLOC or XZ_DYNALLOC though. You may need a little different code but the idea is the same: provide more input if the input buffer is empty, call xz_dec_run(), flush the output buffer if it is full, and keep looping until you get something else than XZ_OK.&lt;/p&gt;
&lt;p&gt;If you use XZ_PREALLOC, set the preallocated dictionary size correctly, for example, 4096, 6144, or 8192 bytes (those are the three smallest LZMA2 dictionary sizes in .xz). Compress the input file using the same dictionary size (compressing with a smaller size works too but is pointless).&lt;/p&gt;
&lt;p&gt;I think it should be possible to make it work.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Sat, 05 Dec 2020 22:05:35 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net4a35fc7243047c81b249b20f4582d824cee0070a</guid></item><item><title>How to use XZ_SINGLE mode to decompress file in a limited RAM device</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/8c7b4065fe/?limit=25#2bd7</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;Hi Experts,&lt;/p&gt;
&lt;p&gt;I'm porting XZ code to a RAM limited device, such as STM32 with 24KB RAM. &lt;br/&gt;
Follow your suggestion from the link as below.&lt;br/&gt;
&lt;a href="https://sourceforge.net/p/lzmautils/discussion/708858/thread/c9b75a2072/?limit=25#83c1"&gt;https://sourceforge.net/p/lzmautils/discussion/708858/thread/c9b75a2072/?limit=25#83c1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I already do changes,&lt;br/&gt;
1)LITERAL_CODERS_MAX from (1 &amp;lt;&amp;lt; 4) to (1 &amp;lt;&amp;lt; 2)&lt;br/&gt;
2)if (s-&amp;gt;lzma.lc + s-&amp;gt;lzma.literal_pos_mask &amp;gt; 4) to if (s-&amp;gt;lzma.lc + s-&amp;gt;lzma.literal_pos_mask &amp;gt; 2)&lt;/p&gt;
&lt;p&gt;Now the basic function is working using XZ_SINGLE. I tested using xz.exe to compress a 1024bytes buffer. Then my device can decompress the inputs get the 1024bytes data.&lt;/p&gt;
&lt;p&gt;Then I want to do a file(~150KB) decompression. Could you give me some good suggestions? &lt;br/&gt;
I refer the code from xz_dec_test_write as below, always return the Error. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ss"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;remaining&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;out_pos&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;out_size&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;XZ_OK&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;in_pos&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;in_size&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
            &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;in_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;in_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;remaining&lt;/span&gt;, &lt;span class="nv"&gt;sizeof&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer_in&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;copy_from_user&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer_in&lt;/span&gt;, &lt;span class="nv"&gt;buf&lt;/span&gt;, &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;in_size&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;EFAULT&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

            &lt;span class="nv"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;in_size&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;remaining&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;in_size&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        }

        &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;out_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;xz_dec_run&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;, &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;buffers&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;crc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;crc32&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;crc&lt;/span&gt;, &lt;span class="nv"&gt;buffer_out&lt;/span&gt;, &lt;span class="nv"&gt;buffers&lt;/span&gt;.&lt;span class="nv"&gt;out_pos&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By the way how to set suitable value for the size of inputbuffer and outbuffer if I want to save RAM space.&lt;/p&gt;
&lt;p&gt;Thanks a lot.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wireless Guy</dc:creator><pubDate>Thu, 26 Nov 2020 08:07:10 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net8ed00f0bd73a69141be6ab40cffc9792b72ac5d0</guid></item></channel></rss>