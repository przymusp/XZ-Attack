commit 2c189bb00af73dc7ba1a67a9d274d5be03ee3a88
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 14 21:30:25 2023 +0800

    Tests: Improve feature testing for skipping.
    
    Fixed a bug where test_compress_* would all fail if arm64 or armthumb
    filters were enabled for compression but arm was disabled. Since the
    grep tests only checked for "define HAVE_ENCODER_ARM", this would match
    on HAVE_ENCODER_ARM64 or HAVE_ENCODER_ARMTHUMB.
    
    Now the config.h feature test requires " 1" at the end to prevent the
    prefix problem. have_feature() was also updated for this even though
    there were known current bugs affecting it. This is just in case future
    features have a similar prefix problem.

diff --git a/tests/test_compress.sh b/tests/test_compress.sh
index 61d20ce9..0aa81001 100755
--- a/tests/test_compress.sh
+++ b/tests/test_compress.sh
@@ -1,149 +1,149 @@
 #!/bin/sh
 
 ###############################################################################
 #
 # Author: Lasse Collin
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 ###############################################################################
 
 # If xz wasn't built, this test is skipped.
 if test -x ../src/xz/xz ; then
 	:
 else
 	exit 77
 fi
 
 # If compression or decompression support is missing, this test is skipped.
 # This isn't perfect as if only some compressors or decompressors are disabled
 # then this script can still fail because for now this doesn't check the
 # availability of each filter.
 if grep 'define HAVE_ENCODERS' ../config.h > /dev/null \
 		&& grep 'define HAVE_DECODERS' ../config.h > /dev/null ; then
 	:
 else
 	echo "Compression or decompression support is disabled, skipping this test."
 	exit 77
 fi
 
 # Find out if our shell supports functions.
 eval 'unset foo ; foo() { return 42; } ; foo'
 if test $? != 42 ; then
 	echo "/bin/sh doesn't support functions, skipping this test."
 	exit 77
 fi
 
 test_xz() {
 	if $XZ -c "$@" "$FILE" > "$TMP_COMP"; then
 		:
 	else
 		echo "Compressing failed: $* $FILE"
 		exit 1
 	fi
 
 	if $XZ -cd "$TMP_COMP" > "$TMP_UNCOMP" ; then
 		:
 	else
 		echo "Decompressing failed: $* $FILE"
 		exit 1
 	fi
 
 	if cmp "$TMP_UNCOMP" "$FILE" ; then
 		:
 	else
 		echo "Decompressed file does not match" \
 				"the original: $* $FILE"
 		exit 1
 	fi
 
 	if test -n "$XZDEC" ; then
 		if $XZDEC "$TMP_COMP" > "$TMP_UNCOMP" ; then
 			:
 		else
 			echo "Decompressing failed: $* $FILE"
 			exit 1
 		fi
 
 		if cmp "$TMP_UNCOMP" "$FILE" ; then
 			:
 		else
 			echo "Decompressed file does not match" \
 					"the original: $* $FILE"
 			exit 1
 		fi
 	fi
 }
 
 XZ="../src/xz/xz --memlimit-compress=48MiB --memlimit-decompress=5MiB \
 		--no-adjust --threads=1 --check=crc32"
 grep "define HAVE_CHECK_CRC64" ../config.h > /dev/null \
 		&& XZ="$XZ --check=crc64"
 XZDEC="../src/xzdec/xzdec" # No memory usage limiter available
 test -x ../src/xzdec/xzdec || XZDEC=
 
 # Create the required input file if needed.
 #
 # Derive temporary filenames for compressed and uncompressed outputs
 # from the input filename. This is needed when multiple tests are
 # run in parallel.
 FILE=$1
 TMP_COMP="tmp_comp_$FILE"
 TMP_UNCOMP="tmp_uncomp_$FILE"
 
 case $FILE in
 	# compress_generated files will be created in the build directory
 	# in the /tests/ sub-directory.
 	compress_generated_*)
 		if ./create_compress_files "$FILE" ; then
 			:
 		else
 			rm -f "$FILE"
 			echo "Failed to create the file '$FILE'."
 			exit 1
 		fi
 		;;
 	# compress_prepared files exist in the source directory since they
 	# do not need to be copied or regenerated.
 	compress_prepared_*)
 		FILE="$srcdir/$FILE"
 		;;
 	'')
 		echo "No test file was specified."
 		exit 1
 		;;
 esac
 
 # Remove temporary now (in case they are something weird), and on exit.
 rm -f "$TMP_COMP" "$TMP_UNCOMP"
 trap 'rm -f "$TMP_COMP" "$TMP_UNCOMP"' 0
 
 # Compress and decompress the file with various filter configurations.
 #
 # Don't test with empty arguments; it breaks some ancient
 # proprietary /bin/sh versions due to $@ used in test_xz().
 test_xz -1
 test_xz -2
 test_xz -3
 test_xz -4
 
 test_filter()
 {
-	grep "define HAVE_ENCODER_$1" ../config.h > /dev/null || return
-	grep "define HAVE_DECODER_$1" ../config.h > /dev/null || return
+	grep "define HAVE_ENCODER_$1 1" ../config.h > /dev/null || return
+	grep "define HAVE_DECODER_$1 1" ../config.h > /dev/null || return
 	shift
 	test_xz "$@" --lzma2=dict=64KiB,nice=32,mode=fast
 }
 
 test_filter DELTA --delta=dist=1
 test_filter DELTA --delta=dist=4
 test_filter DELTA --delta=dist=256
 test_filter X86 --x86
 test_filter POWERPC --power
 test_filter IA64 --ia64
 test_filter ARM --arm
 test_filter ARMTHUMB --armthumb
 test_filter SPARC --sparc
 
 exit 0
diff --git a/tests/test_files.sh b/tests/test_files.sh
index 64d73081..e42af918 100755
--- a/tests/test_files.sh
+++ b/tests/test_files.sh
@@ -1,197 +1,197 @@
 #!/bin/sh
 
 ###############################################################################
 #
 # Author: Lasse Collin
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 ###############################################################################
 
 # If both xz and xzdec were not build, skip this test.
 XZ=../src/xz/xz
 XZDEC=../src/xzdec/xzdec
 test -x "$XZ" || XZ=
 test -x "$XZDEC" || XZDEC=
 if test -z "$XZ$XZDEC"; then
 	echo "xz and xzdec were not built, skipping this test."
 	exit 77
 fi
 
 # If decompression support is missing, this test is skipped.
 # This isn't perfect as if only some decompressors are disabled
 # then some good files might not decompress and the test fails
 # for a (kind of) wrong reason.
 if grep 'define HAVE_DECODERS' ../config.h > /dev/null ; then
 	:
 else
 	echo "Decompression support is disabled, skipping this test."
 	exit 77
 fi
 
 # If a feature was disabled at build time, make it possible to skip
 # some of the test files. Use exit status 77 if any files were skipped.
 EXIT_STATUS=0
 have_feature()
 {
-	grep "define HAVE_$1" ../config.h > /dev/null && return 0
+	grep "define HAVE_$1 1" ../config.h > /dev/null && return 0
 	printf '%s: Skipping because HAVE_%s is not enabled\n' "$2" "$1"
 	EXIT_STATUS=77
 	return 1
 }
 
 
 #######
 # .xz #
 #######
 
 # If these integrity check types were disabled at build time,
 # allow the tests to pass still.
 NO_WARN=
 grep 'define HAVE_CHECK_CRC64' ../config.h > /dev/null || NO_WARN=-qQ
 grep 'define HAVE_CHECK_SHA256' ../config.h > /dev/null || NO_WARN=-qQ
 
 for I in "$srcdir"/files/good-*.xz
 do
 	# If features were disabled at build time, keep this still working.
 	case $I in
 		*/good-1-*delta-lzma2*.xz)
 			have_feature DECODER_DELTA "$I" || continue
 			;;
 	esac
 	case $I in
 		*/good-1-empty-bcj-lzma2.xz)
 			have_feature DECODER_POWERPC "$I" || continue
 			;;
 	esac
 	case $I in
 		*/good-1-sparc-lzma2.xz)
 			have_feature DECODER_SPARC "$I" || continue
 			;;
 	esac
 	case $I in
 		*/good-1-x86-lzma2.xz)
 			have_feature DECODER_X86 "$I" || continue
 			;;
 	esac
 	case $I in
 		*/good-1-arm64-lzma2-*.xz)
 			have_feature DECODER_ARM64 "$I" || continue
 			;;
 	esac
 
 	if test -z "$XZ" || "$XZ" $NO_WARN -dc "$I" > /dev/null; then
 		:
 	else
 		echo "Good file failed: $I"
 		exit 1
 	fi
 
 	if test -z "$XZDEC" || "$XZDEC" $NO_WARN "$I" > /dev/null; then
 		:
 	else
 		echo "Good file failed: $I"
 		exit 1
 	fi
 done
 
 for I in "$srcdir"/files/bad-*.xz
 do
 	if test -n "$XZ" && "$XZ" -dc "$I" > /dev/null 2>&1; then
 		echo "Bad file succeeded: $I"
 		exit 1
 	fi
 
 	# xzdec doesn't warn about unsupported check so skip this if any of
 	# the check types were disabled at built time (NO_WARN isn't empty).
 	if test -n "$XZDEC" && test -z "$NO_WARN" \
 			&& "$XZDEC" "$I" > /dev/null 2>&1; then
 		echo "Bad file succeeded: $I"
 		exit 1
 	fi
 done
 
 # Testing for the lzma_index_append() bug in <= 5.2.6 needs "xz -l":
 I="$srcdir/files/bad-3-index-uncomp-overflow.xz"
 if test -n "$XZ" && "$XZ" -l "$I" > /dev/null 2>&1; then
 	echo "Bad file succeeded with xz -l: $I"
 	exit 1
 fi
 
 for I in "$srcdir"/files/unsupported-*.xz
 do
 	# Test these only with xz as unsupported-check.xz will exit
 	# successfully with xzdec because it doesn't warn about
 	# unsupported check type.
 	if test -n "$XZ" && "$XZ" -dc "$I" > /dev/null 2>&1; then
 		echo "Unsupported file succeeded: $I"
 		exit 1
 	fi
 done
 
 # Test that this passes with --no-warn (-Q).
 I="$srcdir/files/unsupported-check.xz"
 if test -z "$XZ" || "$XZ" -dcqQ "$I" > /dev/null; then
 	:
 else
 	echo "Unsupported file failed with xz -Q: $I"
 	exit 1
 fi
 
 if test -z "$XZDEC" || "$XZDEC" -qQ "$I" > /dev/null; then
 	:
 else
 	echo "Unsupported file failed with xzdec -Q: $I"
 	exit 1
 fi
 
 
 #########
 # .lzma #
 #########
 
 for I in "$srcdir"/files/good-*.lzma
 do
 	if test -z "$XZ" || "$XZ" -dc "$I" > /dev/null; then
 		:
 	else
 		echo "Good file failed: $I"
 		exit 1
 	fi
 done
 
 for I in "$srcdir"/files/bad-*.lzma
 do
 	if test -n "$XZ" && "$XZ" -dc "$I" > /dev/null 2>&1; then
 		echo "Bad file succeeded: $I"
 		exit 1
 	fi
 done
 
 
 #######
 # .lz #
 #######
 
 if grep 'define HAVE_LZIP_DECODER' ../config.h > /dev/null ; then
 	for I in "$srcdir"/files/good-*.lz
 	do
 		if test -z "$XZ" || "$XZ" -dc "$I" > /dev/null; then
 			:
 		else
 			echo "Good file failed: $I"
 			exit 1
 		fi
 	done
 
 	for I in "$srcdir"/files/bad-*.lz "$srcdir"/files/unsupported-*.lz
 	do
 		if test -n "$XZ" && "$XZ" -dc "$I" > /dev/null 2>&1; then
 			echo "Bad file succeeded: $I"
 			exit 1
 		fi
 	done
 fi
 
 exit "$EXIT_STATUS"