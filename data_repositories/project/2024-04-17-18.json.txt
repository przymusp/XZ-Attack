{"id":"37553339793","type":"PushEvent","actor":{"id":22566570,"login":"topperc","display_login":"topperc","gravatar_id":"","url":"https://api.github.com/users/topperc","avatar_url":"https://avatars.githubusercontent.com/u/22566570?"},"repo":{"id":400393334,"name":"topperc/llvm-project","url":"https://api.github.com/repos/topperc/llvm-project"},"payload":{"repository_id":400393334,"push_id":18041931922,"size":135,"distinct_size":1,"ref":"refs/heads/pr/commute-test","head":"3eeb6ca9634725f9450d615d03c775cc8a35cfe0","before":"145b1bc20a2265649b52609263cb775c2e4bde09","commits":[{"sha":"0665669876cd7f51f7572cff3bb97485d78f5de5","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Sema] Mark alias/ifunc targets used and consider mangled names\n\nhttps://reviews.llvm.org/D54188 marked \"alias\" targets as used in C to\nfix -Wunused false positives. This patch extends the approach to handle\nmangled names to support global scope names in C++ and the\n`overloadable` attribute in C.\n\n(Note: we should skip `UsingShadowDecl`, which would trigger an\nassertion failure in `ItaniumMangleContextImpl::mangleCXXName`.\nSee regression test added by commit 1c2afbae9af22b58190c10e3517242d01d89d612.)\n\nIn addition, we mark ifunc targets as used to fix #63957 (temporarily\nused by xz; ifunc was removed by\nhttps://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)\n\nWhile our approach has false negatives for namespace scope names, the\nmajority of alias/ifunc C++ uses (global scope with no overloads) are\nhandled.\n\nNote: The following function with internal linkage but C language\nlinkage type is mangled in Clang but not in GCC. This inconsistency\nmakes alias/ifunc difficult to use in C++ with portability (#88593).\n```\nextern \"C\" {\nstatic void f0() {}\n// GCC: void g0() __attribute__((alias(\"_ZL2f0v\")));\n// Clang: void g0() __attribute__((alias(\"f0\")));\n}\n```\n\nPull Request: https://github.com/llvm/llvm-project/pull/87130","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/0665669876cd7f51f7572cff3bb97485d78f5de5"},{"sha":"5422eb0b841521908c2fc60bd9c7fdc11ded12a1","author":{"email":"kazu@google.com","name":"Kazu Hirata"},"message":"[memprof] Add another constructor to MemProfReader (#88952)\n\nThis patch enables users of MemProfReader to directly supply mappings\r\nfrom CallStackId to actual call stacks.\r\n\r\nOnce the users of the current constructor without CSIdMap switch to\r\nthe new constructor, we'll have fewer users of:\r\n\r\n- IndexedAllocationInfo::CallStack\r\n- IndexedMemProfRecord::CallSites\r\n\r\nbringing us one step closer to the removal of these fields in favor\r\nof:\r\n\r\n- IndexedAllocationInfo::CSId\r\n- IndexedMemProfRecord::CallSiteIds","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/5422eb0b841521908c2fc60bd9c7fdc11ded12a1"},{"sha":"c7657cf7d1ee57f9cb9133164536591a1842b43c","author":{"email":"a.bataev@outlook.com","name":"Alexey Bataev"},"message":"[SLP]Keep externally used GEPs as GEPs, if possible instead of extractelement.\n\nIf the vectorized GEP instruction can be still kept as a scalar GEP,\nbetter to keep it as scalar instead of extractelement. In many cases it\nis more profitable.\n\nMetric: size..text\n\nProgram                                                                          size..text\n                                                                                 results     results0    diff\n                        test-suite :: SingleSource/Benchmarks/Misc/oourafft.test    18911.00    19695.00  4.1%\n                   test-suite :: SingleSource/Benchmarks/Misc-C++-EH/spirit.test    59987.00    60707.00  1.2%\n       test-suite :: External/SPEC/CFP2017speed/638.imagick_s/638.imagick_s.test  1392209.00  1392753.00  0.0%\n        test-suite :: External/SPEC/CFP2017rate/538.imagick_r/538.imagick_r.test  1392209.00  1392753.00  0.0%\n           test-suite :: External/SPEC/CINT2006/400.perlbench/400.perlbench.test  1087996.00  1088236.00  0.0%\n                         test-suite :: MultiSource/Benchmarks/Bullet/bullet.test   309310.00   309342.00  0.0%\n             test-suite :: External/SPEC/CINT2017rate/525.x264_r/525.x264_r.test   664661.00   664693.00  0.0%\n            test-suite :: External/SPEC/CINT2017speed/625.x264_s/625.x264_s.test   664661.00   664693.00  0.0%\n        test-suite :: External/SPEC/CFP2017rate/526.blender_r/526.blender_r.test 12354636.00 12354908.00  0.0%\n                  test-suite :: External/SPEC/CFP2006/453.povray/453.povray.test  1152748.00  1152716.00 -0.0%\n                       test-suite :: MultiSource/Applications/oggenc/oggenc.test   191787.00   191771.00 -0.0%\n                     test-suite :: SingleSource/UnitTests/matrix-types-spec.test   480796.00   480476.00 -0.1%\n\nMisc/oourafft - Extra code gets vectorized\nMisc-C++-EH/spirit - same\nCFP2017speed/638.imagick_s\nCFP2017rate/538.imagick_r - same, extra code gets vectorized\nCINT2006/400.perlbench - some extra 4 x ptr stores vectorized\nBullet/bullet - extra 4 x ptr store vectorized\nCINT2017rate/525.x264_r\nCINT2017speed/625.x264_s - same\nCFP2017rate/526.blender_r - extra 8 x float stores (several), some extra\n4 x ptr stores\nCFP2006/453.povray - 2 x double loads/stores replaced by 4 x double\nloads/stores\nApplications/oggenc - extra code is vectorized\nUnitTests/matrix-types-spec - extra code gets vectorized\n\nReviewers: RKSimon\n\nReviewed By: RKSimon\n\nPull Request: https://github.com/llvm/llvm-project/pull/88877","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/c7657cf7d1ee57f9cb9133164536591a1842b43c"},{"sha":"7d4e8c1f3bbfe976f4871c9cf953f76d771b0eda","author":{"email":"a.bataev@outlook.com","name":"Alexey Bataev"},"message":"[SLP]Attempt to vectorize long stores, if short one failed.\n\nWe can try to vectorize long store sequences, if short ones were\nunsuccessful because of the non-profitable vectorization. It should not\nincrease compile time significantly (stores are sorted already,\ncomplexity is n x log n), but vectorize extra code.\n\nMetric: size..text\n\nProgram                                                                         size..text\n                                                                                results     results0    diff\n         test-suite :: External/SPEC/CINT2006/400.perlbench/400.perlbench.test  1088012.00  1088236.00  0.0%\n                  test-suite :: SingleSource/UnitTests/matrix-types-spec.test   480396.00   480476.00  0.0%\n          test-suite :: External/SPEC/CINT2017rate/525.x264_r/525.x264_r.test   664613.00   664661.00  0.0%\n         test-suite :: External/SPEC/CINT2017speed/625.x264_s/625.x264_s.test   664613.00   664661.00  0.0%\n        test-suite :: External/SPEC/CFP2017rate/510.parest_r/510.parest_r.test  2041105.00  2040961.00 -0.0%\n                 test-suite :: MultiSource/Applications/JM/lencod/lencod.test   836563.00   836387.00 -0.0%\n                 test-suite :: MultiSource/Benchmarks/7zip/7zip-benchmark.test  1035100.00  1032140.00 -0.3%\n\nIn all benchmarks extra code gets vectorized\n\nReviewers: RKSimon\n\nReviewed By: RKSimon\n\nPull Request: https://github.com/llvm/llvm-project/pull/88563","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/7d4e8c1f3bbfe976f4871c9cf953f76d771b0eda"},{"sha":"3eff86f82cb59d7dfc88e0cc3d8df8282f24f028","author":{"email":"llvmgnsyncbot@gmail.com","name":"LLVM GN Syncbot"},"message":"[gn build] Port 9ec8c961664d","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/3eff86f82cb59d7dfc88e0cc3d8df8282f24f028"},{"sha":"b0ddbfb77d15e00e08fc36f6ccd8a4fecde465d1","author":{"email":"mail@justinbogner.com","name":"Justin Bogner"},"message":"[clang][SPIR-V] Set AS for the SPIR-V logical triple (#88939)\n\nThis was missed in #88455, causing most of the .hlsl to SPIR-V tests to\r\nfail (such as clang\\test\\Driver\\hlsl-lang-targets-spirv.hlsl)","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/b0ddbfb77d15e00e08fc36f6ccd8a4fecde465d1"},{"sha":"c9731a3dccd381849bfede5e09290c0574efa248","author":{"email":"kazu@google.com","name":"Kazu Hirata"},"message":"[mlir] Fix a warning about an extraneous semicolon\n\nThis patch fixes:\n\n  mlir/lib/Dialect/XeGPU/IR/XeGPUOps.cpp:58:2: error: extra ';'\n  outside of a function is incompatible with C++98\n  [-Werror,-Wc++98-compat-extra-semi]","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/c9731a3dccd381849bfede5e09290c0574efa248"},{"sha":"0a789ea8a829da345e46d8224d73b2ddaba6969f","author":{"email":"ekeane@nvidia.com","name":"erichkeane"},"message":"Fix test from #83124 and #88902\n\nThis just replaces an '#include<new>' with a declaration of array\nplacement new.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/0a789ea8a829da345e46d8224d73b2ddaba6969f"},{"sha":"9a0a28f8384b2cb534953df33bf124f01f0e0d0e","author":{"email":"huberjn@outlook.com","name":"Joseph Huber"},"message":"[Libomptarget] Rework Record & Replay to be a plugin member (#88928)\n\nSummary:\nPreviously, the R&R support was global state initialized by a global\nconstructor. This is bad because it prevents us from adequately\nconstraining the lifetime of the library. Additionally, we want to\nminimize the amount of global state floating around.\n\nThis patch moves the R&R support into a plugin member like everything\nelse. This means there will be multiple copies of the R&R implementation\nfloating around, but this was already the case given the fact that we\ncurrently handle everything with dynamic libraries.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/9a0a28f8384b2cb534953df33bf124f01f0e0d0e"},{"sha":"ed7038ef334eaccdd4104053005cab52804fbfad","author":{"email":"jkun@google.com","name":"Jeremy Kun"},"message":"specify dialect in polynomial docs (#88933)\n\nI figured out how to test this with `make mlir-doc doxygen-mlir`","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/ed7038ef334eaccdd4104053005cab52804fbfad"},{"sha":"13ea36db166b7007f8b1e84e0827faaf24eb448e","author":{"email":"juan.vazquez.test@gmail.com","name":"juan.vazquez"},"message":"Fix UPCAddressofArraySubscriptGadget::getClaimedVarUseSites() (#88406)\n\nUPCAddressofArraySubscriptGadget::getClaimedVarUseSites should skip\r\nparentheses when accessing the DeclRefExpr, otherwise a crash happens\r\nwith parenthesized references.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/13ea36db166b7007f8b1e84e0827faaf24eb448e"},{"sha":"f430e374462efd94d891fcf9fa09d606343c780f","author":{"email":"kazu@google.com","name":"Kazu Hirata"},"message":"[llvm] Drop unaligned from calls to readNext (NFC) (#88841)\n\nNow readNext defaults to unaligned accesses.  This patch drops\r\nunaligned to improve readability.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/f430e374462efd94d891fcf9fa09d606343c780f"},{"sha":"281d71604f418eb952e967d9dc4b26241b7f96aa","author":{"email":"aeubanks@google.com","name":"Arthur Eubanks"},"message":"[X86] Change how we treat functions with explicit sections as small/large (#88172)\n\nFollowing #78348, we should treat functions with an explicit section as\r\nsmall, unless the section name is (or has the prefix) \".ltext\".\r\n\r\nClang emits global initializers into a \".text.startup\" section on Linux.\r\nIf we mix small/medium code model object files with large code model\r\nobject files, we'll end up mixing sections with and without the large\r\nsection flag.\r\n\r\nReland of #87838 with a check for non-ELF platforms in\r\nTargetMachine::isLargeGlobalValue(), otherwise MCJIT on Windows tests\r\nfail.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/281d71604f418eb952e967d9dc4b26241b7f96aa"},{"sha":"191be2a8a8531129c779bf23c4eec86f32c69bf9","author":{"email":"nicolai.haehnle@amd.com","name":"Nicolai Hähnle"},"message":"update_test_checks: pre-commit a new test\n\nThe test shows that name preservation doesn't work properly when\n--include-generated-funcs is used.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/191be2a8a8531129c779bf23c4eec86f32c69bf9"},{"sha":"e770249d955e06f205e91017cd394d8670996168","author":{"email":"nicolai.haehnle@amd.com","name":"Nicolai Hähnle"},"message":"update_test_checks: add new test\n\nThis test is meant to demonstrate an upcoming change that replaces basic\nblock labels by FileCheck patterns.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/e770249d955e06f205e91017cd394d8670996168"},{"sha":"377a2767a9951659b5ec7309abb78da719a4f93b","author":{"email":"nicolai.haehnle@amd.com","name":"Nicolai Hähnle"},"message":"update_test_checks: remove an unused function","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/377a2767a9951659b5ec7309abb78da719a4f93b"},{"sha":"9ec6c5d26321f5d32d97218f850ae7cafda32b2e","author":{"email":"clementval@gmail.com","name":"Valentin Clement (バレンタイン クレメン)"},"message":"[flang][cuda] Add fir.deallocate operation (#88839)\n\nAdd the fir.cuda_deallocate operation that perform device deallocation\r\nof data hold by a descriptor. This will replace the call to\r\nAllocatableDeallocate from the runtime.\r\n\r\nThis is a companion operation to the one added in #88586","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/9ec6c5d26321f5d32d97218f850ae7cafda32b2e"},{"sha":"34777c238b117b52dd41a9d12e8b54fb83677a12","author":{"email":"flo@fhahn.com","name":"Florian Hahn"},"message":"[VPlan] Don't mark VPBlendRecipe as phi-like.\n\nVPBlendRecipes don't get lowered to phis and usually do not appear at\nthe beginning of blocks, due to their masks appearing before them.\n\nThis effectively relaxes an over-eager verifier message.\n\nFixes https://github.com/llvm/llvm-project/issues/88297.\nFixes https://github.com/llvm/llvm-project/issues/88804.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/34777c238b117b52dd41a9d12e8b54fb83677a12"},{"sha":"b6bd41db31c798f3fc82368381fad6d42795f512","author":{"email":"goldstein.w.n@gmail.com","name":"Noah Goldstein"},"message":"[InstCombine] Add canonicalization of `sitofp` -> `uitofp nneg`\n\nThis is essentially the same as #82404 but has the `nneg` flag which\nallows the backend to reliably undo the transform.\n\nCloses #88299","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/b6bd41db31c798f3fc82368381fad6d42795f512"},{"sha":"885b8d9bb5192267cb2449a9ddec28e20ac9300e","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Enable mul strength reduction for XTheadBa\n\nThis vendor extension has the same shift_add as zba, and most of the same\npatterns are duplicated.  Enable it here too so the configurations don't\ndiverge.","distinct":false,"url":"https://api.github.com/repos/topperc/llvm-project/commits/885b8d9bb5192267cb2449a9ddec28e20ac9300e"}]},"public":true,"created_at":"2024-04-17T18:05:51Z"}
{"id":"37554166293","type":"WatchEvent","actor":{"id":350021,"login":"gildesmarais","display_login":"gildesmarais","gravatar_id":"","url":"https://api.github.com/users/gildesmarais","avatar_url":"https://avatars.githubusercontent.com/u/350021?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"action":"started"},"public":true,"created_at":"2024-04-17T18:31:59Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
