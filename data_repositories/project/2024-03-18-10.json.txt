{"id":"36639228477","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553669853,"name":"tukaani-project/xz-embedded","url":"https://api.github.com/repos/tukaani-project/xz-embedded"},"payload":{"repository_id":553669853,"push_id":17589039836,"size":20,"distinct_size":20,"ref":"refs/heads/misc","head":"6501c2dc9d563bf272e44fe91b0cbf3926ad225c","before":"899434b42f364638e429923ec38cfddd924b04d1","commits":[{"sha":"88f20cd6e0d8e42241fa3188dbda1d50bb081866","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Sync decompress_unxz.c and unxz.h from Linux 6.8.\n\nThis changes the API to use long instead of int,\nincludes <linux/decompress/unxz.h> to avoid a missing prototype,\nreplaces the \"decompress\" macro with __decompress function,\nand removes IA-64 support. These are all extremely simple changes.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/88f20cd6e0d8e42241fa3188dbda1d50bb081866"},{"sha":"bdbf4ad7a5931c1c9822a262fab7981fef2658c8","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Sync xz_wrap.sh from Linux 6.8.\n\nIA-64 support was removed from Linux.\n\nThe xz command name is now provided via the environment variable XZ.\nThis adds slight extra hassle for testing this script outside the\nkernel but it's best to keep the script the same as in Linux source.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/bdbf4ad7a5931c1c9822a262fab7981fef2658c8"},{"sha":"ab7ce0164bd98ae9662bff2e231d8c6d7b6c36d9","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Add linux/MAINTAINERS.\n\nIt includes only the lines that are relevant to this project.\nHaving the file here works as a reminder that those lines need\nto be updated in Linux if the information becomes outdated.\n\nNote that the file list (F: entries) must be in case-insensitive\nalphabetical order to make checkpatch.pl happy.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/ab7ce0164bd98ae9662bff2e231d8c6d7b6c36d9"},{"sha":"724ac4d179b2a61774fa9e838816f5a99ad80ea1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Switch to BSD Zero Clause License.\n\nThis adds the file AUTHORS. The file COPYING now contains\nonly the copyright notice and license text.\n\nThe switch to 0BSD is done because public domain has\n(real or perceived) legal issues in some jurisdictions.\nAll people mentioned in AUTHORS have confirmed that\ntheir works included in this project can be distributed\nunder the 0BSD license.\n\nThe SPDX license identifiers use /* */ or // comments\nas required by Documentation/process/license-rules.rst\nin Linux: // for .c files, /* */ for .h files.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/724ac4d179b2a61774fa9e838816f5a99ad80ea1"},{"sha":"3d9b8e40a81d2d8bf225e4792136f74c791bb549","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"userspace/Makefile: Switch from -std=gnu89 to -std=gnu11.\n\nLinux moved from -std=gnu89 to -std=gnu11 in 2022 so now we need\nmuch fewer extensions than in the past (long long, stdint.h, and\nstdbool.h are standard C99 and later).\n\nThe option is -Wdeclaration-after-statement there for now because\nmixed declarations and statements aren't used at the moment\n(even though I like those) but it's not worth it to change those\nat this point.\n\nThese are the known things that don't conform to C99/C11:\n\n  - Null pointer + 0 is assumed to be well defined:\n\n        char *p = NULL; p += 0; assert(p == NULL);\n\n    It's required if a pointer in struct xz_buf is NULL\n    and thus the matching foo_size is 0.\n\n  - LZMA decoder accesses arrays inside structures in a way that\n    goes beyond the array bounds (while still staying within\n    the structure). The initialization thing could be neatly\n    cleaned up with C11's anonymous union.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/3d9b8e40a81d2d8bf225e4792136f74c791bb549"},{"sha":"f951e43192762ec4dd1ab299fbc32c0925db769c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"userspace/xz_config.h: Remove the stdbool.h workaround for MSVC.\n\nMSVC 2013 and newer have stdbool.h. Support for the older versions\nhas ended.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/f951e43192762ec4dd1ab299fbc32c0925db769c"},{"sha":"eb2eb1f7a2a93ba72aeb074a9a65ea7f59775905","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"lib/decompress_unxz.c: Fix style and comments.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/eb2eb1f7a2a93ba72aeb074a9a65ea7f59775905"},{"sha":"96eda21ff38dc85262672799a964b631e99b07bd","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"userspace/boottest.c: Make it build with the new __decompress API.\n\nThe __decompress() function takes a new extra argument to specify\noutput buffer size. Some decompressors in Linux use it, some don't.\nThose that don't, assume that output buffer is SIZE_MAX. It's not\na security problem because the code is used for decompressing the\nkernel image only but it was still one of odd things in the API design.\n\nBuffer sizes are now long instead of int (but not size_t)\nso that initramfs larger than 2 GiB works too.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/96eda21ff38dc85262672799a964b631e99b07bd"},{"sha":"44c6176e2c057c897ee9fd672f274da6a6d696b7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"userspace/boottest.c: #undef XZ_DEC_ANY_CHECK.\n\nIt's not defined in Linux and decompress_unxz.c doesn't check for it.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/44c6176e2c057c897ee9fd672f274da6a6d696b7"},{"sha":"b878323a52d1f7243f578de3bab6306604e7545d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Use a fallthrough macro instead of a fall through comment.\n\nThis change was made in Linux in 2020.\n\nThe macro name \"fallthrough\" might be problematic outside of Linux\nif XZ Embedded code is mixed with C23 code that uses [[fallthrough]]\nbut let's not worry about that for now.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/b878323a52d1f7243f578de3bab6306604e7545d"},{"sha":"35bc01201a555c7a0c3abf420539712bcd320dec","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Replace xz.txt with xz.rst and update the contents.\n\nThe old xz.txt had been moved and trivially converted to xz.rst\nin Linux already without changing the contents. This updates\nthe content too as some of it was outdated. The SPDX license\nidentifier was added too.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/35bc01201a555c7a0c3abf420539712bcd320dec"},{"sha":"442bbd877c5a9d1edcfeccc0c12a2a6563cf968b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update the path to xz.rst in Kconfig.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/442bbd877c5a9d1edcfeccc0c12a2a6563cf968b"},{"sha":"8f1e9d9d6a03d77fffe0c614c5b4dd795496aff9","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update the path to xz.rst in README.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/8f1e9d9d6a03d77fffe0c614c5b4dd795496aff9"},{"sha":"d430d5483c4789632ad85a430cacbe795f564fd6","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Optimize the ARM64 BCJ decoder for-loop condition.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/d430d5483c4789632ad85a430cacbe795f564fd6"},{"sha":"86245ea6c4fab98099538c6c69d5b315c7350823","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Optimize five other BCJ decoder for-loop conditions.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/86245ea6c4fab98099538c6c69d5b315c7350823"},{"sha":"b09187b0867584faa70bf08b3a9d8b2c7b599218","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Add RISC-V BCJ decoder.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/b09187b0867584faa70bf08b3a9d8b2c7b599218"},{"sha":"5e68a44007e658dd4fdaebab45ce744a0e2fd78a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update xz_dec.ko MODULE_AUTHOR and MODULE_VERSION.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/5e68a44007e658dd4fdaebab45ce744a0e2fd78a"},{"sha":"74e5a5112af5d4dc2c93f8a49be72fc68db4f684","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz_wrap.sh: Use 128 MiB dictionary and force single-threaded mode.\n\nDesktop kernels on x86-64 are already around 60 MiB. Using a dictionary\nlarger than 32 MiB should have no downsides nowadays as anyone building\nthe kernel should have plenty of RAM. 128 MiB dictionary needs 1346 MiB\nof RAM with xz versions 5.0.x - 5.6.x in single-threaded mode. On archs\nthat use xz_wrap.sh, kernel decompression is done in single-call mode so\na larger dictionary doesn't affect boot-time memory requirements.\n\nxz >= 5.6.0 uses multithreaded mode by default which compresses slightly\nworse than single-threaded mode. Kernel compression rarely used more\nthan one thread anyway because with 32 MiB dictionary size the default\nblock size was 96 MiB in multithreaded mode. So only a single thread\nwas used anyway unless the kernel was over 96 MiB.\n\nEspecially with the new larger dictionary size, the benefit of\nforcing single-threaded mode is reduced RAM usage.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/74e5a5112af5d4dc2c93f8a49be72fc68db4f684"},{"sha":"8238f7e34116fbc8c2819d12e529f8407e2ef35d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz_wrap.sh: Adjust arch-specific options for better compression.\n\nUse LZMA2 options that match the arch-specific alignment of instructions.\nFor example, RISC-V without the C extension is 4-byte aligned but with\nthe C extension it's 2-byte aligned.\n\nUse the ARM-Thumb filter for ARM-Thumb2 kernels. Previously such kernels\nwere compressed using the ARM filter which didn't do anything useful with\nARM-Thumb2 code.\n\nAdd BCJ support for ARM64 and RISC-V. These require new enough version of\nthe xz tool from XZ Utils. With an old xz version a message is printed to\nstderr and the kernel is compressed without the filter.\n\nRemove PowerPC and SPARC support as those don't use this script. PowerPC\nhas its own standalone wrapper script which has basic xz support.\n\nThanks to Jubin Zhong for pointing out that CONFIG_THUMB2_KERNEL\nshould be used to detect which BCJ filter is used on 32-bit ARM.\n\n    https://lore.kernel.org/lkml/1637379771-39449-1-git-send-email-zhongjubin@huawei.com/\n\nIt never got accepted into Linux, no feedback either. But it\nwill be tried again with a bit different code this time.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/8238f7e34116fbc8c2819d12e529f8407e2ef35d"},{"sha":"6501c2dc9d563bf272e44fe91b0cbf3926ad225c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update README and xz.rst.\n\nOmit xz_dec_test paragraph from xz.rst as no one needs to care\nabout that module unless they plan to modify the code and then\nthey will spot the xz_dec_test.c file too (and the Kconfig option).\n\nOmit the separate paragraph about xz_wrap.sh as it shouldn't be\ncalled directly. Mention it in the bullet point of xzkern instead.\n\nUse bullet points also for the single-call vs. multi-call description.\n\nIndent the example with spaces intead of a tab.\n\nMove the .xz conformance section from xz.rst to README as that\ninfo isn't that useful in Linux docs.\n\nAdd a note to README that some features are missing from the\nversion in the Linux kernel.\n\nOmit out-of-tree kernel module build instructions from README.\nIt's unlikely to be useful at this point.\n\nUpdate the C standard info in README.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/6501c2dc9d563bf272e44fe91b0cbf3926ad225c"}]},"public":true,"created_at":"2024-03-18T10:20:40Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"36639574302","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553669853,"name":"tukaani-project/xz-embedded","url":"https://api.github.com/repos/tukaani-project/xz-embedded"},"payload":{"repository_id":553669853,"push_id":17589205901,"size":2,"distinct_size":2,"ref":"refs/heads/misc","head":"f78a9d23f7b109dd011e5a23c643510c8b892b95","before":"6501c2dc9d563bf272e44fe91b0cbf3926ad225c","commits":[{"sha":"0c2e2b50a464f7f31f4422081eb795b942223ac0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz_wrap.sh: Adjust arch-specific options for better compression.\n\nUse the ARM-Thumb filter for ARM-Thumb2 kernels. Previously such kernels\nwere compressed using the ARM filter which didn't do anything useful with\nARM-Thumb2 code.\n\nAdd BCJ support for ARM64 and RISC-V. These require new enough version of\nthe xz tool from XZ Utils. With an old xz version a message is printed to\nstandard error and the kernel is compressed without the filter.\n\nRemove PowerPC and SPARC support as those don't use this script. PowerPC\nhas its own standalone wrapper script which has basic xz support.\n\nUse LZMA2 options that match the arch-specific alignment of instructions.\nFor example, RISC-V without the C extension is 4-byte aligned but with\nthe C extension it's 2-byte aligned.\n\nThanks to Jubin Zhong for pointing out that CONFIG_THUMB2_KERNEL\nshould be used to detect which BCJ filter is used on 32-bit ARM.\n\n    https://lore.kernel.org/lkml/1637379771-39449-1-git-send-email-zhongjubin@huawei.com/\n\nIt never got accepted into Linux, no feedback either. But it\nwill be tried again with a bit different code this time.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/0c2e2b50a464f7f31f4422081eb795b942223ac0"},{"sha":"f78a9d23f7b109dd011e5a23c643510c8b892b95","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update README and xz.rst.\n\nOmit xz_dec_test paragraph from xz.rst as no one needs to care\nabout that module unless they plan to modify the code and then\nthey will spot the xz_dec_test.c file too (and the Kconfig option).\n\nOmit the separate paragraph about xz_wrap.sh as it shouldn't be\ncalled directly. Mention it in the bullet point of xzkern instead.\n\nUse bullet points also for the single-call vs. multi-call description.\n\nIndent the example with spaces intead of a tab.\n\nMove the .xz conformance section from xz.rst to README as that\ninfo isn't that useful in Linux docs.\n\nAdd a note to README that some features are missing from the\nversion in the Linux kernel.\n\nOmit out-of-tree kernel module build instructions from README.\nIt's unlikely to be useful at this point.\n\nUpdate the C standard info in README.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/f78a9d23f7b109dd011e5a23c643510c8b892b95"}]},"public":true,"created_at":"2024-03-18T10:30:06Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
