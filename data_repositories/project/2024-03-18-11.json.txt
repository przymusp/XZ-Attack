{"id":"36640787524","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553669853,"name":"tukaani-project/xz-embedded","url":"https://api.github.com/repos/tukaani-project/xz-embedded"},"payload":{"repository_id":553669853,"push_id":17589750739,"size":1,"distinct_size":1,"ref":"refs/heads/misc","head":"968a6ddff2b90f7fcb345d589d6117c6ed517629","before":"f78a9d23f7b109dd011e5a23c643510c8b892b95","commits":[{"sha":"968a6ddff2b90f7fcb345d589d6117c6ed517629","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Move contact info from xz.rst to README.\n\nThe contact info will be in MAINTAINERS in Linux.\nFew will look at xz.rst for maintainer contact info.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/968a6ddff2b90f7fcb345d589d6117c6ed517629"}]},"public":true,"created_at":"2024-03-18T11:06:34Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"36640972905","type":"PushEvent","actor":{"id":120408189,"login":"Larhzu","display_login":"Larhzu","gravatar_id":"","url":"https://api.github.com/users/Larhzu","avatar_url":"https://avatars.githubusercontent.com/u/120408189?"},"repo":{"id":553669853,"name":"tukaani-project/xz-embedded","url":"https://api.github.com/repos/tukaani-project/xz-embedded"},"payload":{"repository_id":553669853,"push_id":17589835691,"size":8,"distinct_size":8,"ref":"refs/heads/misc","head":"7dbdccc55a407daefeffe23c82e1e77202ae2533","before":"968a6ddff2b90f7fcb345d589d6117c6ed517629","commits":[{"sha":"a4907fb01ee8249e30c2516bbede331c8f2881cb","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Optimize the ARM64 BCJ decoder for-loop condition.\n\nCompilers cannot optimize the addition \"i + 4\" away since\ntheoretically it could overflow.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/a4907fb01ee8249e30c2516bbede331c8f2881cb"},{"sha":"43c4fc6f36e4044436bef452fdd0e71ccc36cb55","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Optimize five other BCJ decoder for-loop conditions.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/43c4fc6f36e4044436bef452fdd0e71ccc36cb55"},{"sha":"75a9b14297f015edf789553e3b7e8daa326b3e6c","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Add RISC-V BCJ decoder.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/75a9b14297f015edf789553e3b7e8daa326b3e6c"},{"sha":"e66d7837e0d9dcbecb893ae10a422c460e67bf73","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update xz_dec.ko MODULE_AUTHOR and MODULE_VERSION.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/e66d7837e0d9dcbecb893ae10a422c460e67bf73"},{"sha":"2b2309f8db43a650a62fb1f7cd9ba18ccff9804d","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz_wrap.sh: Use 128 MiB dictionary and force single-threaded mode.\n\nDesktop kernels on x86-64 are already around 60 MiB. Using a dictionary\nlarger than 32 MiB should have no downsides nowadays as anyone building\nthe kernel should have plenty of RAM. 128 MiB dictionary needs 1346 MiB\nof RAM with xz versions 5.0.x - 5.6.x in single-threaded mode. On archs\nthat use xz_wrap.sh, kernel decompression is done in single-call mode so\na larger dictionary doesn't affect boot-time memory requirements.\n\nxz >= 5.6.0 uses multithreaded mode by default which compresses slightly\nworse than single-threaded mode. Kernel compression rarely used more\nthan one thread anyway because with 32 MiB dictionary size the default\nblock size was 96 MiB in multithreaded mode. So only a single thread\nwas used anyway unless the kernel was over 96 MiB.\n\nEspecially with the new larger dictionary size, the benefit of\nforcing single-threaded mode is reduced RAM usage.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/2b2309f8db43a650a62fb1f7cd9ba18ccff9804d"},{"sha":"2f1803e8ce6b76f3002529fe621d59e3288a3c8f","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"xz_wrap.sh: Adjust arch-specific options for better compression.\n\nUse the ARM-Thumb filter for ARM-Thumb2 kernels. Previously such kernels\nwere compressed using the ARM filter which didn't do anything useful with\nARM-Thumb2 code.\n\nAdd BCJ support for ARM64 and RISC-V. These require new enough version of\nthe xz tool from XZ Utils. With an old xz version a message is printed to\nstandard error and the kernel is compressed without the filter.\n\nRemove PowerPC and SPARC support as those don't use this script. PowerPC\nhas its own standalone wrapper script which has basic xz support.\n\nUse LZMA2 options that match the arch-specific alignment of instructions.\nFor example, RISC-V without the C extension is 4-byte aligned but with\nthe C extension it's 2-byte aligned.\n\nThanks to Jubin Zhong for pointing out that CONFIG_THUMB2_KERNEL\nshould be used to detect which BCJ filter is used on 32-bit ARM.\n\n    https://lore.kernel.org/lkml/1637379771-39449-1-git-send-email-zhongjubin@huawei.com/\n\nIt never got accepted into Linux, no feedback either. But it\nwill be tried again with a bit different code this time.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/2f1803e8ce6b76f3002529fe621d59e3288a3c8f"},{"sha":"bfdb3ceee911da5bdc864a9895f59f37d0d6b594","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update README and xz.rst.\n\nOmit xz_dec_test paragraph from xz.rst as no one needs to care\nabout that module unless they plan to modify the code and then\nthey will spot the xz_dec_test.c file too (and the Kconfig option).\n\nOmit the separate paragraph about xz_wrap.sh as it shouldn't be\ncalled directly. Mention it in the bullet point of xzkern instead.\n\nUse bullet points also for the single-call vs. multi-call description.\n\nIndent the example with spaces intead of a tab.\n\nMove the .xz conformance section from xz.rst to README as that\ninfo isn't that useful in Linux docs.\n\nAdd a note to README that some features are missing from the\nversion in the Linux kernel.\n\nOmit out-of-tree kernel module build instructions from README.\nIt's unlikely to be useful at this point.\n\nUpdate the C standard info in README.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/bfdb3ceee911da5bdc864a9895f59f37d0d6b594"},{"sha":"7dbdccc55a407daefeffe23c82e1e77202ae2533","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Move contact info from xz.rst to README.\n\nThe contact info will be in MAINTAINERS in Linux.\nFew will look at xz.rst for maintainer contact info.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz-embedded/commits/7dbdccc55a407daefeffe23c82e1e77202ae2533"}]},"public":true,"created_at":"2024-03-18T11:12:16Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
