{"id":"37529280488","type":"PushEvent","actor":{"id":144883899,"login":"iagarwa","display_login":"iagarwa","gravatar_id":"","url":"https://api.github.com/users/iagarwa","avatar_url":"https://avatars.githubusercontent.com/u/144883899?"},"repo":{"id":786669765,"name":"iagarwa/llvm-project","url":"https://api.github.com/repos/iagarwa/llvm-project"},"payload":{"repository_id":786669765,"push_id":18031713469,"size":85,"distinct_size":85,"ref":"refs/heads/iagarwa/added-more-cet-test","head":"1e6b06618bded816a386b2d42272bd538b20c3ad","before":"abf183e7dfcfb4349ba75d43105e56e382c40317","commits":[{"sha":"6b83fe552990966fdad0e5693a79b02b87d9526e","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Strength reduce mul by 2^n + 2/4/8 + 1 (#88911)\n\nWith zba, we can expand this to (add (shl X, C1), (shXadd X, X)).\r\n\r\nNote that this is our first expansion to a three instruction sequence. I\r\nbelieve this to general be a reasonable tradeoff for most architectures,\r\nbut we may want to (someday) consider a tuning flag here.\r\n\r\nI plan to support 2^n + (2/4/8 + 1) eventually as well, but that comes\r\nbehind 2^N - 2^M. Both are also three instruction sequences.\r\n\r\n---------\r\n\r\nCo-authored-by: Min-Yih Hsu <min@myhsu.dev>","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/6b83fe552990966fdad0e5693a79b02b87d9526e"},{"sha":"1c2afbae9af22b58190c10e3517242d01d89d612","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[CodeGen,test] Test llvm-libc style alias attribute with UsingShadowDecl\n\nThe pattern is quite involved and deserves a specific codegen test.\nThis test would catch the bug in the first attempt of #87130","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/1c2afbae9af22b58190c10e3517242d01d89d612"},{"sha":"5462b27026dee886fb896980d6ad9487200a6cbe","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[NFC][libc++][TZDB] Refactors argument order. (#85781)\n\nPutting the output reference argument first looks more sensible.","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/5462b27026dee886fb896980d6ad9487200a6cbe"},{"sha":"a75c9d059791f5d175f6c263d114d59e51b46120","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[NFC][libc++] Moves ios_base's forward declaration. (#88027)\n\nAccording to our synopsis it belonged to ios_fwd. This is not true in\r\nthe C++11 version of the Standard, I did not validate against C++98.\r\n\r\nMoving this to ios's forward where it's declared in the standard allows\r\nremoving a module quirk. An earlier removal of std::vectors forward\r\ndeclaration allows to remove all quirks for the iosfwd module part.\r\n\r\nSince iosfwd includes __fwd/ios.h this does not change the required\r\nincludes.","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/a75c9d059791f5d175f6c263d114d59e51b46120"},{"sha":"9cd3e92f05fcc2c9168a7abc56d08f0d33bfdfdf","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][modules] Removes some validation quirks. (#88031)\n\nRecent unrelated header cleanups caused these quirks to become obsolete.","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/9cd3e92f05fcc2c9168a7abc56d08f0d33bfdfdf"},{"sha":"41a830500aa5556a65198607ec751d8e3254c949","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++] Removes deprecated _LIBCPP_ENABLE_<VERSION>_REMOVED_FEATURES macros (#88548)\n\nWe marked those macros as deprecated in the last release with the intent\r\nof\r\nremoving them in LLVM 19. This commit performs the removal.","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/41a830500aa5556a65198607ec751d8e3254c949"},{"sha":"388da6a31b7ba3062f9306b894656e265b9b33eb","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][test] Removes Clang 16 validation. (#88558)","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/388da6a31b7ba3062f9306b894656e265b9b33eb"},{"sha":"8e0a4a89f940d17b520bbca040981f54195d3ea4","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][doc] Documents -DLIBCXX_INSTALL_MODULES=ON. (#88547)\n\nCo-authored-by: Louis Dionne <ldionne.2@gmail.com>","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/8e0a4a89f940d17b520bbca040981f54195d3ea4"},{"sha":"002297bdaa63f3f9f56b0051110ccf48f31c6825","author":{"email":"thakis@chromium.org","name":"Nico Weber"},"message":"[gn] port 22629bb22a1b","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/002297bdaa63f3f9f56b0051110ccf48f31c6825"},{"sha":"8debcf03c535e14ee47b14fddfcaeae3f32d1317","author":{"email":"peiming@google.com","name":"Peiming Liu"},"message":"[mlir][sparse] introduce sparse_tensor.iterate operation (#88807)\n\nA `sparse_tensor.iterate` iterates over a sparse iteration space\r\nextracted from `sparse_tensor.extract_iteration_space` operation\r\nintroduced in https://github.com/llvm/llvm-project/pull/88554.\r\n\r\n*DO NOT MERGE* before https://github.com/llvm/llvm-project/pull/88554","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/8debcf03c535e14ee47b14fddfcaeae3f32d1317"},{"sha":"b9556532c7391a2acb77ab0f7d7b36e1dc382b24","author":{"email":"peiming@google.com","name":"Peiming Liu"},"message":"Revert \"[mlir][sparse] introduce sparse_tensor.iterate operation\" (#88953)\n\nReverts llvm/llvm-project#88807 (merged by mistake)","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/b9556532c7391a2acb77ab0f7d7b36e1dc382b24"},{"sha":"481bd5d416df7a1d24e18cc81ae782e8701de965","author":{"email":"peiming@google.com","name":"Peiming Liu"},"message":"[mlir][sparse] introduce `sparse_tensor.extract_iteration_space` operation. (#88554)\n\nA `sparse_tensor.extract_space %tensor at %iterator` extracts a *sparse*\r\niteration space defined `%tensor`, the operation to traverse the\r\niteration space will be introduced in following PRs.","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/481bd5d416df7a1d24e18cc81ae782e8701de965"},{"sha":"edb711d2f318b17489692b5f85028fab7ed85b83","author":{"email":"goldstein.w.n@gmail.com","name":"Noah Goldstein"},"message":"[InstCombine] Update `vector_reduce_and` tests to actually use `llvm.vector.reduce.and`; NFC","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/edb711d2f318b17489692b5f85028fab7ed85b83"},{"sha":"5c6af605b307213453a9a043532b9293db21b5c6","author":{"email":"Happy.Kumar@Windriver.com","name":"mahtohappy"},"message":"[Clang][Sema] placement new initializes typedef array with correct size (#88902)\n\nBuild Failure Fix\r\nFixes build failures due to #83124","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/5c6af605b307213453a9a043532b9293db21b5c6"},{"sha":"b01879ec1ffbd249f9bf3c4f32308443be6ac36b","author":{"email":"116223022+chencha3@users.noreply.github.com","name":"Chao Chen"},"message":"[MLIR][XeGPU] Add XeGPU scattered ops (#86594)\n\n- Extended TensorDescAttr with scattered attribute\r\n- Add scattered ops: CreateDescOp, PrefetchOp, LoadGatherOp,\r\nStoreScatterOp, UpdateOffsetOp\r\n- Add a block op: UpdateNdOffsetOp\r\n\r\n---------\r\n\r\nCo-authored-by: Mehdi Amini <joker.eph@gmail.com>\r\nCo-authored-by: Adam Siemieniuk <adam.siemieniuk@intel.com>","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/b01879ec1ffbd249f9bf3c4f32308443be6ac36b"},{"sha":"9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb","author":{"email":"bazuzi@google.com","name":"Samira Bazuzi"},"message":"[clang][dataflow] Expose getReferencedDecls and relocate free functions. (#88754)\n\nMoves free functions from DataflowEnvironment.h/cc and\r\nDataflowAnalysisContext.h/cc to RecordOps and a new ASTOps and exposes\r\nthem as needed for current use and to expose getReferencedDecls for\r\nout-of-tree use.\r\n\r\nMinimal change in functionality, only to modify the return type of\r\ngetReferenceDecls to return the collected decls instead of using output\r\nparams.\r\n\r\nTested with `ninja check-clang-tooling`.","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb"},{"sha":"bbd64c4ddf08be468ab4eb4c161e28bdab6808bb","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Add coverage for strength reduction of mul as 2^N - 2^M","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/bbd64c4ddf08be468ab4eb4c161e28bdab6808bb"},{"sha":"8885813ebb0a61014d99ac776b8118d935848cc9","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][chrono] Disables a test.\n\nThis tests seems problematic on different platforms. There is still a\ntest that ensures coverage, but in an automatic fashion. This test needs\nto be investigated.","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/8885813ebb0a61014d99ac776b8118d935848cc9"},{"sha":"0665669876cd7f51f7572cff3bb97485d78f5de5","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Sema] Mark alias/ifunc targets used and consider mangled names\n\nhttps://reviews.llvm.org/D54188 marked \"alias\" targets as used in C to\nfix -Wunused false positives. This patch extends the approach to handle\nmangled names to support global scope names in C++ and the\n`overloadable` attribute in C.\n\n(Note: we should skip `UsingShadowDecl`, which would trigger an\nassertion failure in `ItaniumMangleContextImpl::mangleCXXName`.\nSee regression test added by commit 1c2afbae9af22b58190c10e3517242d01d89d612.)\n\nIn addition, we mark ifunc targets as used to fix #63957 (temporarily\nused by xz; ifunc was removed by\nhttps://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)\n\nWhile our approach has false negatives for namespace scope names, the\nmajority of alias/ifunc C++ uses (global scope with no overloads) are\nhandled.\n\nNote: The following function with internal linkage but C language\nlinkage type is mangled in Clang but not in GCC. This inconsistency\nmakes alias/ifunc difficult to use in C++ with portability (#88593).\n```\nextern \"C\" {\nstatic void f0() {}\n// GCC: void g0() __attribute__((alias(\"_ZL2f0v\")));\n// Clang: void g0() __attribute__((alias(\"f0\")));\n}\n```\n\nPull Request: https://github.com/llvm/llvm-project/pull/87130","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/0665669876cd7f51f7572cff3bb97485d78f5de5"},{"sha":"5422eb0b841521908c2fc60bd9c7fdc11ded12a1","author":{"email":"kazu@google.com","name":"Kazu Hirata"},"message":"[memprof] Add another constructor to MemProfReader (#88952)\n\nThis patch enables users of MemProfReader to directly supply mappings\r\nfrom CallStackId to actual call stacks.\r\n\r\nOnce the users of the current constructor without CSIdMap switch to\r\nthe new constructor, we'll have fewer users of:\r\n\r\n- IndexedAllocationInfo::CallStack\r\n- IndexedMemProfRecord::CallSites\r\n\r\nbringing us one step closer to the removal of these fields in favor\r\nof:\r\n\r\n- IndexedAllocationInfo::CSId\r\n- IndexedMemProfRecord::CallSiteIds","distinct":true,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/5422eb0b841521908c2fc60bd9c7fdc11ded12a1"}]},"public":true,"created_at":"2024-04-17T07:22:57Z"}
{"id":"37530379267","type":"PushEvent","actor":{"id":144883899,"login":"iagarwa","display_login":"iagarwa","gravatar_id":"","url":"https://api.github.com/users/iagarwa","avatar_url":"https://avatars.githubusercontent.com/u/144883899?"},"repo":{"id":786669765,"name":"iagarwa/llvm-project","url":"https://api.github.com/repos/iagarwa/llvm-project"},"payload":{"repository_id":786669765,"push_id":18032169498,"size":85,"distinct_size":0,"ref":"refs/heads/main","head":"9f3334e9932fc9b55cd3590b140913222454c031","before":"4082a7554521572a65a5a0008c4661a534df659d","commits":[{"sha":"aefff774a0d6f75565243263555f2513ac3c9fdf","author":{"email":"serebrennikov.vladislav@gmail.com","name":"Vlad Serebrennikov"},"message":"[clang] Migrate DR tests to `static_assert` (#88611)\n\nThis patch touches a number of tests that run in C++98 mode that have\r\nbeen using array size as a context that requires a constant expression,\r\nreplacing it with a `static_assert` backported via a macro. This reduces\r\nnoise in expected directives that comes from diagnostics around VLAs.\r\n\r\nThis patch also showcases that DR tests would benefit from folding in\r\nconstant expressions in C++98 mode, but I'm not sure it's even on the\r\ntable. If it is, I'd be happy to prepare a PR for that, and rebase this\r\nPR on top of it.\r\n\r\nCC @AaronBallman","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/aefff774a0d6f75565243263555f2513ac3c9fdf"},{"sha":"6b83fe552990966fdad0e5693a79b02b87d9526e","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Strength reduce mul by 2^n + 2/4/8 + 1 (#88911)\n\nWith zba, we can expand this to (add (shl X, C1), (shXadd X, X)).\r\n\r\nNote that this is our first expansion to a three instruction sequence. I\r\nbelieve this to general be a reasonable tradeoff for most architectures,\r\nbut we may want to (someday) consider a tuning flag here.\r\n\r\nI plan to support 2^n + (2/4/8 + 1) eventually as well, but that comes\r\nbehind 2^N - 2^M. Both are also three instruction sequences.\r\n\r\n---------\r\n\r\nCo-authored-by: Min-Yih Hsu <min@myhsu.dev>","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/6b83fe552990966fdad0e5693a79b02b87d9526e"},{"sha":"1c2afbae9af22b58190c10e3517242d01d89d612","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[CodeGen,test] Test llvm-libc style alias attribute with UsingShadowDecl\n\nThe pattern is quite involved and deserves a specific codegen test.\nThis test would catch the bug in the first attempt of #87130","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/1c2afbae9af22b58190c10e3517242d01d89d612"},{"sha":"5462b27026dee886fb896980d6ad9487200a6cbe","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[NFC][libc++][TZDB] Refactors argument order. (#85781)\n\nPutting the output reference argument first looks more sensible.","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/5462b27026dee886fb896980d6ad9487200a6cbe"},{"sha":"a75c9d059791f5d175f6c263d114d59e51b46120","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[NFC][libc++] Moves ios_base's forward declaration. (#88027)\n\nAccording to our synopsis it belonged to ios_fwd. This is not true in\r\nthe C++11 version of the Standard, I did not validate against C++98.\r\n\r\nMoving this to ios's forward where it's declared in the standard allows\r\nremoving a module quirk. An earlier removal of std::vectors forward\r\ndeclaration allows to remove all quirks for the iosfwd module part.\r\n\r\nSince iosfwd includes __fwd/ios.h this does not change the required\r\nincludes.","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/a75c9d059791f5d175f6c263d114d59e51b46120"},{"sha":"9cd3e92f05fcc2c9168a7abc56d08f0d33bfdfdf","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][modules] Removes some validation quirks. (#88031)\n\nRecent unrelated header cleanups caused these quirks to become obsolete.","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/9cd3e92f05fcc2c9168a7abc56d08f0d33bfdfdf"},{"sha":"41a830500aa5556a65198607ec751d8e3254c949","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++] Removes deprecated _LIBCPP_ENABLE_<VERSION>_REMOVED_FEATURES macros (#88548)\n\nWe marked those macros as deprecated in the last release with the intent\r\nof\r\nremoving them in LLVM 19. This commit performs the removal.","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/41a830500aa5556a65198607ec751d8e3254c949"},{"sha":"388da6a31b7ba3062f9306b894656e265b9b33eb","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][test] Removes Clang 16 validation. (#88558)","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/388da6a31b7ba3062f9306b894656e265b9b33eb"},{"sha":"8e0a4a89f940d17b520bbca040981f54195d3ea4","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][doc] Documents -DLIBCXX_INSTALL_MODULES=ON. (#88547)\n\nCo-authored-by: Louis Dionne <ldionne.2@gmail.com>","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/8e0a4a89f940d17b520bbca040981f54195d3ea4"},{"sha":"002297bdaa63f3f9f56b0051110ccf48f31c6825","author":{"email":"thakis@chromium.org","name":"Nico Weber"},"message":"[gn] port 22629bb22a1b","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/002297bdaa63f3f9f56b0051110ccf48f31c6825"},{"sha":"8debcf03c535e14ee47b14fddfcaeae3f32d1317","author":{"email":"peiming@google.com","name":"Peiming Liu"},"message":"[mlir][sparse] introduce sparse_tensor.iterate operation (#88807)\n\nA `sparse_tensor.iterate` iterates over a sparse iteration space\r\nextracted from `sparse_tensor.extract_iteration_space` operation\r\nintroduced in https://github.com/llvm/llvm-project/pull/88554.\r\n\r\n*DO NOT MERGE* before https://github.com/llvm/llvm-project/pull/88554","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/8debcf03c535e14ee47b14fddfcaeae3f32d1317"},{"sha":"b9556532c7391a2acb77ab0f7d7b36e1dc382b24","author":{"email":"peiming@google.com","name":"Peiming Liu"},"message":"Revert \"[mlir][sparse] introduce sparse_tensor.iterate operation\" (#88953)\n\nReverts llvm/llvm-project#88807 (merged by mistake)","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/b9556532c7391a2acb77ab0f7d7b36e1dc382b24"},{"sha":"481bd5d416df7a1d24e18cc81ae782e8701de965","author":{"email":"peiming@google.com","name":"Peiming Liu"},"message":"[mlir][sparse] introduce `sparse_tensor.extract_iteration_space` operation. (#88554)\n\nA `sparse_tensor.extract_space %tensor at %iterator` extracts a *sparse*\r\niteration space defined `%tensor`, the operation to traverse the\r\niteration space will be introduced in following PRs.","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/481bd5d416df7a1d24e18cc81ae782e8701de965"},{"sha":"edb711d2f318b17489692b5f85028fab7ed85b83","author":{"email":"goldstein.w.n@gmail.com","name":"Noah Goldstein"},"message":"[InstCombine] Update `vector_reduce_and` tests to actually use `llvm.vector.reduce.and`; NFC","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/edb711d2f318b17489692b5f85028fab7ed85b83"},{"sha":"5c6af605b307213453a9a043532b9293db21b5c6","author":{"email":"Happy.Kumar@Windriver.com","name":"mahtohappy"},"message":"[Clang][Sema] placement new initializes typedef array with correct size (#88902)\n\nBuild Failure Fix\r\nFixes build failures due to #83124","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/5c6af605b307213453a9a043532b9293db21b5c6"},{"sha":"b01879ec1ffbd249f9bf3c4f32308443be6ac36b","author":{"email":"116223022+chencha3@users.noreply.github.com","name":"Chao Chen"},"message":"[MLIR][XeGPU] Add XeGPU scattered ops (#86594)\n\n- Extended TensorDescAttr with scattered attribute\r\n- Add scattered ops: CreateDescOp, PrefetchOp, LoadGatherOp,\r\nStoreScatterOp, UpdateOffsetOp\r\n- Add a block op: UpdateNdOffsetOp\r\n\r\n---------\r\n\r\nCo-authored-by: Mehdi Amini <joker.eph@gmail.com>\r\nCo-authored-by: Adam Siemieniuk <adam.siemieniuk@intel.com>","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/b01879ec1ffbd249f9bf3c4f32308443be6ac36b"},{"sha":"9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb","author":{"email":"bazuzi@google.com","name":"Samira Bazuzi"},"message":"[clang][dataflow] Expose getReferencedDecls and relocate free functions. (#88754)\n\nMoves free functions from DataflowEnvironment.h/cc and\r\nDataflowAnalysisContext.h/cc to RecordOps and a new ASTOps and exposes\r\nthem as needed for current use and to expose getReferencedDecls for\r\nout-of-tree use.\r\n\r\nMinimal change in functionality, only to modify the return type of\r\ngetReferenceDecls to return the collected decls instead of using output\r\nparams.\r\n\r\nTested with `ninja check-clang-tooling`.","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb"},{"sha":"bbd64c4ddf08be468ab4eb4c161e28bdab6808bb","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Add coverage for strength reduction of mul as 2^N - 2^M","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/bbd64c4ddf08be468ab4eb4c161e28bdab6808bb"},{"sha":"8885813ebb0a61014d99ac776b8118d935848cc9","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][chrono] Disables a test.\n\nThis tests seems problematic on different platforms. There is still a\ntest that ensures coverage, but in an automatic fashion. This test needs\nto be investigated.","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/8885813ebb0a61014d99ac776b8118d935848cc9"},{"sha":"0665669876cd7f51f7572cff3bb97485d78f5de5","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Sema] Mark alias/ifunc targets used and consider mangled names\n\nhttps://reviews.llvm.org/D54188 marked \"alias\" targets as used in C to\nfix -Wunused false positives. This patch extends the approach to handle\nmangled names to support global scope names in C++ and the\n`overloadable` attribute in C.\n\n(Note: we should skip `UsingShadowDecl`, which would trigger an\nassertion failure in `ItaniumMangleContextImpl::mangleCXXName`.\nSee regression test added by commit 1c2afbae9af22b58190c10e3517242d01d89d612.)\n\nIn addition, we mark ifunc targets as used to fix #63957 (temporarily\nused by xz; ifunc was removed by\nhttps://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)\n\nWhile our approach has false negatives for namespace scope names, the\nmajority of alias/ifunc C++ uses (global scope with no overloads) are\nhandled.\n\nNote: The following function with internal linkage but C language\nlinkage type is mangled in Clang but not in GCC. This inconsistency\nmakes alias/ifunc difficult to use in C++ with portability (#88593).\n```\nextern \"C\" {\nstatic void f0() {}\n// GCC: void g0() __attribute__((alias(\"_ZL2f0v\")));\n// Clang: void g0() __attribute__((alias(\"f0\")));\n}\n```\n\nPull Request: https://github.com/llvm/llvm-project/pull/87130","distinct":false,"url":"https://api.github.com/repos/iagarwa/llvm-project/commits/0665669876cd7f51f7572cff3bb97485d78f5de5"}]},"public":true,"created_at":"2024-04-17T07:55:04Z"}
