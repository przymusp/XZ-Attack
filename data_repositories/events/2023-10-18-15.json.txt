{"id":"32663037968","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":15470803584,"size":8,"distinct_size":8,"ref":"refs/heads/crc_clmul","head":"e383d9d97bd08bd09a40dbac72cf7025a44934c2","before":"5450aa5c0ca5e3e7917d8b303e3a718ea74b36fd","commits":[{"sha":"b44837ddf7352835a7185a2ef54bf5e9dcdd184a","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Create crc_clmul.c.\n\nBoth crc32_clmul() and crc64_clmul() are now exported from\ncrc32_clmul.c as lzma_crc32_clmul() and lzma_crc64_clmul(). This\nensures that is_clmul_supported() (now lzma_is_clmul_supported()) is\nnot duplicated between crc32_fast.c and crc64_fast.c.\n\nAlso, it encapsulates the complexity of the CLMUL implementations into a\nsingle file and reduces the complexity of crc32_fast.c and crc64_fast.c.\nBefore, CLMUL code was present in crc32_fast.c, crc64_fast.c, and\ncrc_common.h.\n\nDuring the conversion, various cleanups were applied to code (thanks to\nLasse Collin) including:\n\n- Require using semicolons with MASK_/L/H/LH macros.\n- Variable typing and const handling improvements.\n- Improvements to comments.\n- Fixes to the pragmas used.\n- Removed unneeded variables.\n- Whitespace improvements.\n- Fixed CRC_USE_GENERIC_FOR_SMALL_INPUTS handling.\n- Silenced warnings and removed the need for some #pragmas\n\nsquash\n\nsquash","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/b44837ddf7352835a7185a2ef54bf5e9dcdd184a"},{"sha":"fa38e4c7ebb3d3ff407d037f25c098e1ced1ec5a","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Refactor CRC comments.\n\nA detailed description of the three dispatch methods was added. Also,\nduplicated comments now only appear in crc32_fast.c or were removed from\nboth crc32_fast.c and crc64_fast.c if they appeared in crc_clmul.c.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/fa38e4c7ebb3d3ff407d037f25c098e1ced1ec5a"},{"sha":"6252220c6ee5ebe33dd0f508d3793c2ceb483fef","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Create crc_always_inline macro.\n\nThis macro must be used instead of the inline keyword. On MSVC, it is\na replacement for __forceinline which is an MSVC specific keyword that\nshould not be used with inline (it will issue a warning if it is).\n\nIt does not use a build system check to determine if\n__attribute__((__always_inline__)) since all compilers that can use\nCLMUL extensions (except the special case for MSVC) should support this\nattribute. If this assumption is incorrect then it will result in a bug\nreport instead of silently producing slow code.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/6252220c6ee5ebe33dd0f508d3793c2ceb483fef"},{"sha":"33245511b620682d538ddaad5fa8a5c108960779","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Add the crc_always_inline macro to crc_simd_body().\n\nForcing this to be inline has a significant speed improvement at the\ncost of a few repeated instructions. The compilers tested on did not\ninline this function since it is large and is used twice in the same\ntranslation unit.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/33245511b620682d538ddaad5fa8a5c108960779"},{"sha":"3b799a381021558eee537738e2cca004331509e0","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Add include guards to crc_common.h.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3b799a381021558eee537738e2cca004331509e0"},{"sha":"a95ea0207ca80b8ff6a02e49b4da7cdc2e8f0f6a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Include common.h in crc_common.h.\n\ncrc_common.h depends on common.h. The headers include common.h except\nwhen there is a reason to not do so.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/a95ea0207ca80b8ff6a02e49b4da7cdc2e8f0f6a"},{"sha":"275191f04e3b313538cf2cba1e596e2fbf98cbcb","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC_USE_GENERIC_FOR_SMALL_INPUTS cannot be used with ifunc.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/275191f04e3b313538cf2cba1e596e2fbf98cbcb"},{"sha":"e383d9d97bd08bd09a40dbac72cf7025a44934c2","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Set the MSVC optimization fix to only cover lzma_crc64_clmul().\n\nAfter testing a 32-bit Release build on MSVC, only lzma_crc64_clmul()\nhas the bug. crc_simd_body() and lzma_crc32_clmul() do not need the\noptimizations disabled.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/e383d9d97bd08bd09a40dbac72cf7025a44934c2"}]},"public":true,"created_at":"2023-10-18T15:34:48Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
