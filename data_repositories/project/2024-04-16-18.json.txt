{"id":"37513605964","type":"PushEvent","actor":{"id":416322,"login":"MaskRay","display_login":"MaskRay","gravatar_id":"","url":"https://api.github.com/users/MaskRay","avatar_url":"https://avatars.githubusercontent.com/u/416322?"},"repo":{"id":75821432,"name":"llvm/llvm-project","url":"https://api.github.com/repos/llvm/llvm-project"},"payload":{"repository_id":75821432,"push_id":18024494605,"size":1,"distinct_size":1,"ref":"refs/heads/main","head":"0665669876cd7f51f7572cff3bb97485d78f5de5","before":"8885813ebb0a61014d99ac776b8118d935848cc9","commits":[{"sha":"0665669876cd7f51f7572cff3bb97485d78f5de5","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Sema] Mark alias/ifunc targets used and consider mangled names\n\nhttps://reviews.llvm.org/D54188 marked \"alias\" targets as used in C to\nfix -Wunused false positives. This patch extends the approach to handle\nmangled names to support global scope names in C++ and the\n`overloadable` attribute in C.\n\n(Note: we should skip `UsingShadowDecl`, which would trigger an\nassertion failure in `ItaniumMangleContextImpl::mangleCXXName`.\nSee regression test added by commit 1c2afbae9af22b58190c10e3517242d01d89d612.)\n\nIn addition, we mark ifunc targets as used to fix #63957 (temporarily\nused by xz; ifunc was removed by\nhttps://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)\n\nWhile our approach has false negatives for namespace scope names, the\nmajority of alias/ifunc C++ uses (global scope with no overloads) are\nhandled.\n\nNote: The following function with internal linkage but C language\nlinkage type is mangled in Clang but not in GCC. This inconsistency\nmakes alias/ifunc difficult to use in C++ with portability (#88593).\n```\nextern \"C\" {\nstatic void f0() {}\n// GCC: void g0() __attribute__((alias(\"_ZL2f0v\")));\n// Clang: void g0() __attribute__((alias(\"f0\")));\n}\n```\n\nPull Request: https://github.com/llvm/llvm-project/pull/87130","distinct":true,"url":"https://api.github.com/repos/llvm/llvm-project/commits/0665669876cd7f51f7572cff3bb97485d78f5de5"}]},"public":true,"created_at":"2024-04-16T18:49:29Z","org":{"id":17149993,"login":"llvm","gravatar_id":"","url":"https://api.github.com/orgs/llvm","avatar_url":"https://avatars.githubusercontent.com/u/17149993?"}}
{"id":"37513617642","type":"PushEvent","actor":{"id":1373879,"login":"linux4life798","display_login":"linux4life798","gravatar_id":"","url":"https://api.github.com/users/linux4life798","avatar_url":"https://avatars.githubusercontent.com/u/1373879?"},"repo":{"id":739197285,"name":"linux4life798/llvm-project-ci-test","url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test"},"payload":{"repository_id":739197285,"push_id":18024500356,"size":10,"distinct_size":10,"ref":"refs/heads/main","head":"cd1203a754923dfcf7101729df68ef3666c3ed3b","before":"7b4ced21257804d7829adae16622c4a82e9a0c41","commits":[{"sha":"edb711d2f318b17489692b5f85028fab7ed85b83","author":{"email":"goldstein.w.n@gmail.com","name":"Noah Goldstein"},"message":"[InstCombine] Update `vector_reduce_and` tests to actually use `llvm.vector.reduce.and`; NFC","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/edb711d2f318b17489692b5f85028fab7ed85b83"},{"sha":"5c6af605b307213453a9a043532b9293db21b5c6","author":{"email":"Happy.Kumar@Windriver.com","name":"mahtohappy"},"message":"[Clang][Sema] placement new initializes typedef array with correct size (#88902)\n\nBuild Failure Fix\r\nFixes build failures due to #83124","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/5c6af605b307213453a9a043532b9293db21b5c6"},{"sha":"b01879ec1ffbd249f9bf3c4f32308443be6ac36b","author":{"email":"116223022+chencha3@users.noreply.github.com","name":"Chao Chen"},"message":"[MLIR][XeGPU] Add XeGPU scattered ops (#86594)\n\n- Extended TensorDescAttr with scattered attribute\r\n- Add scattered ops: CreateDescOp, PrefetchOp, LoadGatherOp,\r\nStoreScatterOp, UpdateOffsetOp\r\n- Add a block op: UpdateNdOffsetOp\r\n\r\n---------\r\n\r\nCo-authored-by: Mehdi Amini <joker.eph@gmail.com>\r\nCo-authored-by: Adam Siemieniuk <adam.siemieniuk@intel.com>","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/b01879ec1ffbd249f9bf3c4f32308443be6ac36b"},{"sha":"9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb","author":{"email":"bazuzi@google.com","name":"Samira Bazuzi"},"message":"[clang][dataflow] Expose getReferencedDecls and relocate free functions. (#88754)\n\nMoves free functions from DataflowEnvironment.h/cc and\r\nDataflowAnalysisContext.h/cc to RecordOps and a new ASTOps and exposes\r\nthem as needed for current use and to expose getReferencedDecls for\r\nout-of-tree use.\r\n\r\nMinimal change in functionality, only to modify the return type of\r\ngetReferenceDecls to return the collected decls instead of using output\r\nparams.\r\n\r\nTested with `ninja check-clang-tooling`.","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb"},{"sha":"bbd64c4ddf08be468ab4eb4c161e28bdab6808bb","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Add coverage for strength reduction of mul as 2^N - 2^M","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/bbd64c4ddf08be468ab4eb4c161e28bdab6808bb"},{"sha":"8885813ebb0a61014d99ac776b8118d935848cc9","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][chrono] Disables a test.\n\nThis tests seems problematic on different platforms. There is still a\ntest that ensures coverage, but in an automatic fashion. This test needs\nto be investigated.","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/8885813ebb0a61014d99ac776b8118d935848cc9"},{"sha":"0665669876cd7f51f7572cff3bb97485d78f5de5","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Sema] Mark alias/ifunc targets used and consider mangled names\n\nhttps://reviews.llvm.org/D54188 marked \"alias\" targets as used in C to\nfix -Wunused false positives. This patch extends the approach to handle\nmangled names to support global scope names in C++ and the\n`overloadable` attribute in C.\n\n(Note: we should skip `UsingShadowDecl`, which would trigger an\nassertion failure in `ItaniumMangleContextImpl::mangleCXXName`.\nSee regression test added by commit 1c2afbae9af22b58190c10e3517242d01d89d612.)\n\nIn addition, we mark ifunc targets as used to fix #63957 (temporarily\nused by xz; ifunc was removed by\nhttps://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)\n\nWhile our approach has false negatives for namespace scope names, the\nmajority of alias/ifunc C++ uses (global scope with no overloads) are\nhandled.\n\nNote: The following function with internal linkage but C language\nlinkage type is mangled in Clang but not in GCC. This inconsistency\nmakes alias/ifunc difficult to use in C++ with portability (#88593).\n```\nextern \"C\" {\nstatic void f0() {}\n// GCC: void g0() __attribute__((alias(\"_ZL2f0v\")));\n// Clang: void g0() __attribute__((alias(\"f0\")));\n}\n```\n\nPull Request: https://github.com/llvm/llvm-project/pull/87130","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/0665669876cd7f51f7572cff3bb97485d78f5de5"},{"sha":"2f5b9214630ba22393c8309ddc12414ae94489a2","author":{"email":"craig@hesling.com","name":"Craig Hesling"},"message":"[GitHub] Add repo-sync and build workflows\n\nThis commit will always stay on top of main\nbecause the repo-sync workflow will pull in\nupstrem changes with rebase.\n\nThe build workflow will build as much as possible on\nall pushes.","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/2f5b9214630ba22393c8309ddc12414ae94489a2"},{"sha":"19e0621f726e7bc1c29b26fbe9e0a9b9d7714d5f","author":{"email":"craig@hesling.com","name":"Craig Hesling"},"message":"DNS: Set sccache to verbose","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/19e0621f726e7bc1c29b26fbe9e0a9b9d7714d5f"},{"sha":"cd1203a754923dfcf7101729df68ef3666c3ed3b","author":{"email":"craig@hesling.com","name":"Craig Hesling"},"message":"DNS: Change to use native sccache GitHub cache interface\n\nhttps://github.com/Mozilla-Actions/sccache-action","distinct":true,"url":"https://api.github.com/repos/linux4life798/llvm-project-ci-test/commits/cd1203a754923dfcf7101729df68ef3666c3ed3b"}]},"public":true,"created_at":"2024-04-16T18:49:56Z"}
{"id":"37513620946","type":"PushEvent","actor":{"id":8181081,"login":"alanzhao1","display_login":"alanzhao1","gravatar_id":"","url":"https://api.github.com/users/alanzhao1","avatar_url":"https://avatars.githubusercontent.com/u/8181081?"},"repo":{"id":633614723,"name":"alanzhao1/llvm-project","url":"https://api.github.com/repos/alanzhao1/llvm-project"},"payload":{"repository_id":633614723,"push_id":18024502045,"size":4,"distinct_size":4,"ref":"refs/heads/main","head":"0665669876cd7f51f7572cff3bb97485d78f5de5","before":"b01879ec1ffbd249f9bf3c4f32308443be6ac36b","commits":[{"sha":"9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb","author":{"email":"bazuzi@google.com","name":"Samira Bazuzi"},"message":"[clang][dataflow] Expose getReferencedDecls and relocate free functions. (#88754)\n\nMoves free functions from DataflowEnvironment.h/cc and\r\nDataflowAnalysisContext.h/cc to RecordOps and a new ASTOps and exposes\r\nthem as needed for current use and to expose getReferencedDecls for\r\nout-of-tree use.\r\n\r\nMinimal change in functionality, only to modify the return type of\r\ngetReferenceDecls to return the collected decls instead of using output\r\nparams.\r\n\r\nTested with `ninja check-clang-tooling`.","distinct":true,"url":"https://api.github.com/repos/alanzhao1/llvm-project/commits/9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb"},{"sha":"bbd64c4ddf08be468ab4eb4c161e28bdab6808bb","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Add coverage for strength reduction of mul as 2^N - 2^M","distinct":true,"url":"https://api.github.com/repos/alanzhao1/llvm-project/commits/bbd64c4ddf08be468ab4eb4c161e28bdab6808bb"},{"sha":"8885813ebb0a61014d99ac776b8118d935848cc9","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][chrono] Disables a test.\n\nThis tests seems problematic on different platforms. There is still a\ntest that ensures coverage, but in an automatic fashion. This test needs\nto be investigated.","distinct":true,"url":"https://api.github.com/repos/alanzhao1/llvm-project/commits/8885813ebb0a61014d99ac776b8118d935848cc9"},{"sha":"0665669876cd7f51f7572cff3bb97485d78f5de5","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Sema] Mark alias/ifunc targets used and consider mangled names\n\nhttps://reviews.llvm.org/D54188 marked \"alias\" targets as used in C to\nfix -Wunused false positives. This patch extends the approach to handle\nmangled names to support global scope names in C++ and the\n`overloadable` attribute in C.\n\n(Note: we should skip `UsingShadowDecl`, which would trigger an\nassertion failure in `ItaniumMangleContextImpl::mangleCXXName`.\nSee regression test added by commit 1c2afbae9af22b58190c10e3517242d01d89d612.)\n\nIn addition, we mark ifunc targets as used to fix #63957 (temporarily\nused by xz; ifunc was removed by\nhttps://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)\n\nWhile our approach has false negatives for namespace scope names, the\nmajority of alias/ifunc C++ uses (global scope with no overloads) are\nhandled.\n\nNote: The following function with internal linkage but C language\nlinkage type is mangled in Clang but not in GCC. This inconsistency\nmakes alias/ifunc difficult to use in C++ with portability (#88593).\n```\nextern \"C\" {\nstatic void f0() {}\n// GCC: void g0() __attribute__((alias(\"_ZL2f0v\")));\n// Clang: void g0() __attribute__((alias(\"f0\")));\n}\n```\n\nPull Request: https://github.com/llvm/llvm-project/pull/87130","distinct":true,"url":"https://api.github.com/repos/alanzhao1/llvm-project/commits/0665669876cd7f51f7572cff3bb97485d78f5de5"}]},"public":true,"created_at":"2024-04-16T18:50:04Z"}
{"id":"37513625038","type":"PushEvent","actor":{"id":15467072,"login":"swift-ci","display_login":"swift-ci","gravatar_id":"","url":"https://api.github.com/users/swift-ci","avatar_url":"https://avatars.githubusercontent.com/u/15467072?"},"repo":{"id":215875945,"name":"apple/llvm-project","url":"https://api.github.com/repos/apple/llvm-project"},"payload":{"repository_id":215875945,"push_id":18024504154,"size":5,"distinct_size":5,"ref":"refs/heads/llvm.org/main","head":"0665669876cd7f51f7572cff3bb97485d78f5de5","before":"5c6af605b307213453a9a043532b9293db21b5c6","commits":[{"sha":"b01879ec1ffbd249f9bf3c4f32308443be6ac36b","author":{"email":"116223022+chencha3@users.noreply.github.com","name":"Chao Chen"},"message":"[MLIR][XeGPU] Add XeGPU scattered ops (#86594)\n\n- Extended TensorDescAttr with scattered attribute\r\n- Add scattered ops: CreateDescOp, PrefetchOp, LoadGatherOp,\r\nStoreScatterOp, UpdateOffsetOp\r\n- Add a block op: UpdateNdOffsetOp\r\n\r\n---------\r\n\r\nCo-authored-by: Mehdi Amini <joker.eph@gmail.com>\r\nCo-authored-by: Adam Siemieniuk <adam.siemieniuk@intel.com>","distinct":true,"url":"https://api.github.com/repos/apple/llvm-project/commits/b01879ec1ffbd249f9bf3c4f32308443be6ac36b"},{"sha":"9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb","author":{"email":"bazuzi@google.com","name":"Samira Bazuzi"},"message":"[clang][dataflow] Expose getReferencedDecls and relocate free functions. (#88754)\n\nMoves free functions from DataflowEnvironment.h/cc and\r\nDataflowAnalysisContext.h/cc to RecordOps and a new ASTOps and exposes\r\nthem as needed for current use and to expose getReferencedDecls for\r\nout-of-tree use.\r\n\r\nMinimal change in functionality, only to modify the return type of\r\ngetReferenceDecls to return the collected decls instead of using output\r\nparams.\r\n\r\nTested with `ninja check-clang-tooling`.","distinct":true,"url":"https://api.github.com/repos/apple/llvm-project/commits/9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb"},{"sha":"bbd64c4ddf08be468ab4eb4c161e28bdab6808bb","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Add coverage for strength reduction of mul as 2^N - 2^M","distinct":true,"url":"https://api.github.com/repos/apple/llvm-project/commits/bbd64c4ddf08be468ab4eb4c161e28bdab6808bb"},{"sha":"8885813ebb0a61014d99ac776b8118d935848cc9","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][chrono] Disables a test.\n\nThis tests seems problematic on different platforms. There is still a\ntest that ensures coverage, but in an automatic fashion. This test needs\nto be investigated.","distinct":true,"url":"https://api.github.com/repos/apple/llvm-project/commits/8885813ebb0a61014d99ac776b8118d935848cc9"},{"sha":"0665669876cd7f51f7572cff3bb97485d78f5de5","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Sema] Mark alias/ifunc targets used and consider mangled names\n\nhttps://reviews.llvm.org/D54188 marked \"alias\" targets as used in C to\nfix -Wunused false positives. This patch extends the approach to handle\nmangled names to support global scope names in C++ and the\n`overloadable` attribute in C.\n\n(Note: we should skip `UsingShadowDecl`, which would trigger an\nassertion failure in `ItaniumMangleContextImpl::mangleCXXName`.\nSee regression test added by commit 1c2afbae9af22b58190c10e3517242d01d89d612.)\n\nIn addition, we mark ifunc targets as used to fix #63957 (temporarily\nused by xz; ifunc was removed by\nhttps://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)\n\nWhile our approach has false negatives for namespace scope names, the\nmajority of alias/ifunc C++ uses (global scope with no overloads) are\nhandled.\n\nNote: The following function with internal linkage but C language\nlinkage type is mangled in Clang but not in GCC. This inconsistency\nmakes alias/ifunc difficult to use in C++ with portability (#88593).\n```\nextern \"C\" {\nstatic void f0() {}\n// GCC: void g0() __attribute__((alias(\"_ZL2f0v\")));\n// Clang: void g0() __attribute__((alias(\"f0\")));\n}\n```\n\nPull Request: https://github.com/llvm/llvm-project/pull/87130","distinct":true,"url":"https://api.github.com/repos/apple/llvm-project/commits/0665669876cd7f51f7572cff3bb97485d78f5de5"}]},"public":true,"created_at":"2024-04-16T18:50:13Z","org":{"id":10639145,"login":"apple","gravatar_id":"","url":"https://api.github.com/orgs/apple","avatar_url":"https://avatars.githubusercontent.com/u/10639145?"}}
{"id":"37513696609","type":"PushEvent","actor":{"id":77512843,"login":"iclsrc","display_login":"iclsrc","gravatar_id":"","url":"https://api.github.com/users/iclsrc","avatar_url":"https://avatars.githubusercontent.com/u/77512843?"},"repo":{"id":166008577,"name":"intel/llvm","url":"https://api.github.com/repos/intel/llvm"},"payload":{"repository_id":166008577,"push_id":18024537890,"size":6,"distinct_size":6,"ref":"refs/heads/main","head":"5422eb0b841521908c2fc60bd9c7fdc11ded12a1","before":"5c6af605b307213453a9a043532b9293db21b5c6","commits":[{"sha":"b01879ec1ffbd249f9bf3c4f32308443be6ac36b","author":{"email":"116223022+chencha3@users.noreply.github.com","name":"Chao Chen"},"message":"[MLIR][XeGPU] Add XeGPU scattered ops (#86594)\n\n- Extended TensorDescAttr with scattered attribute\r\n- Add scattered ops: CreateDescOp, PrefetchOp, LoadGatherOp,\r\nStoreScatterOp, UpdateOffsetOp\r\n- Add a block op: UpdateNdOffsetOp\r\n\r\n---------\r\n\r\nCo-authored-by: Mehdi Amini <joker.eph@gmail.com>\r\nCo-authored-by: Adam Siemieniuk <adam.siemieniuk@intel.com>","distinct":true,"url":"https://api.github.com/repos/intel/llvm/commits/b01879ec1ffbd249f9bf3c4f32308443be6ac36b"},{"sha":"9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb","author":{"email":"bazuzi@google.com","name":"Samira Bazuzi"},"message":"[clang][dataflow] Expose getReferencedDecls and relocate free functions. (#88754)\n\nMoves free functions from DataflowEnvironment.h/cc and\r\nDataflowAnalysisContext.h/cc to RecordOps and a new ASTOps and exposes\r\nthem as needed for current use and to expose getReferencedDecls for\r\nout-of-tree use.\r\n\r\nMinimal change in functionality, only to modify the return type of\r\ngetReferenceDecls to return the collected decls instead of using output\r\nparams.\r\n\r\nTested with `ninja check-clang-tooling`.","distinct":true,"url":"https://api.github.com/repos/intel/llvm/commits/9ec8c961664de3b3fcc1cbd5238e40ec8c9bdddb"},{"sha":"bbd64c4ddf08be468ab4eb4c161e28bdab6808bb","author":{"email":"preames@rivosinc.com","name":"Philip Reames"},"message":"[RISCV] Add coverage for strength reduction of mul as 2^N - 2^M","distinct":true,"url":"https://api.github.com/repos/intel/llvm/commits/bbd64c4ddf08be468ab4eb4c161e28bdab6808bb"},{"sha":"8885813ebb0a61014d99ac776b8118d935848cc9","author":{"email":"koraq@xs4all.nl","name":"Mark de Wever"},"message":"[libc++][chrono] Disables a test.\n\nThis tests seems problematic on different platforms. There is still a\ntest that ensures coverage, but in an automatic fashion. This test needs\nto be investigated.","distinct":true,"url":"https://api.github.com/repos/intel/llvm/commits/8885813ebb0a61014d99ac776b8118d935848cc9"},{"sha":"0665669876cd7f51f7572cff3bb97485d78f5de5","author":{"email":"i@maskray.me","name":"Fangrui Song"},"message":"[Sema] Mark alias/ifunc targets used and consider mangled names\n\nhttps://reviews.llvm.org/D54188 marked \"alias\" targets as used in C to\nfix -Wunused false positives. This patch extends the approach to handle\nmangled names to support global scope names in C++ and the\n`overloadable` attribute in C.\n\n(Note: we should skip `UsingShadowDecl`, which would trigger an\nassertion failure in `ItaniumMangleContextImpl::mangleCXXName`.\nSee regression test added by commit 1c2afbae9af22b58190c10e3517242d01d89d612.)\n\nIn addition, we mark ifunc targets as used to fix #63957 (temporarily\nused by xz; ifunc was removed by\nhttps://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)\n\nWhile our approach has false negatives for namespace scope names, the\nmajority of alias/ifunc C++ uses (global scope with no overloads) are\nhandled.\n\nNote: The following function with internal linkage but C language\nlinkage type is mangled in Clang but not in GCC. This inconsistency\nmakes alias/ifunc difficult to use in C++ with portability (#88593).\n```\nextern \"C\" {\nstatic void f0() {}\n// GCC: void g0() __attribute__((alias(\"_ZL2f0v\")));\n// Clang: void g0() __attribute__((alias(\"f0\")));\n}\n```\n\nPull Request: https://github.com/llvm/llvm-project/pull/87130","distinct":true,"url":"https://api.github.com/repos/intel/llvm/commits/0665669876cd7f51f7572cff3bb97485d78f5de5"},{"sha":"5422eb0b841521908c2fc60bd9c7fdc11ded12a1","author":{"email":"kazu@google.com","name":"Kazu Hirata"},"message":"[memprof] Add another constructor to MemProfReader (#88952)\n\nThis patch enables users of MemProfReader to directly supply mappings\r\nfrom CallStackId to actual call stacks.\r\n\r\nOnce the users of the current constructor without CSIdMap switch to\r\nthe new constructor, we'll have fewer users of:\r\n\r\n- IndexedAllocationInfo::CallStack\r\n- IndexedMemProfRecord::CallSites\r\n\r\nbringing us one step closer to the removal of these fields in favor\r\nof:\r\n\r\n- IndexedAllocationInfo::CSId\r\n- IndexedMemProfRecord::CallSiteIds","distinct":true,"url":"https://api.github.com/repos/intel/llvm/commits/5422eb0b841521908c2fc60bd9c7fdc11ded12a1"}]},"public":true,"created_at":"2024-04-16T18:52:49Z","org":{"id":17888862,"login":"intel","gravatar_id":"","url":"https://api.github.com/orgs/intel","avatar_url":"https://avatars.githubusercontent.com/u/17888862?"}}
