commit 3a401b0e0c7a2658af7801dd0690256ef24149e0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 1 21:36:22 2023 +0800

    CI: Upload test logs as artifacts if a test fails.

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 25716873..19391ec4 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -1,159 +1,185 @@
 #############################################################################
 #
 # Author: Jia Tan
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 #############################################################################
 
 name: CI
 
 on:
   # Triggers the workflow on push or pull request events but only for the master branch
   push:
     branches: [ master ]
   pull_request:
     branches: [ master ]
 
   # Allows running workflow manually
   workflow_dispatch:
 
 jobs:
   # When CMake can support disabling check types and
   # encoders/decoders/threads, it will be combined to one Linux job
   # and another matrix list.
   Linux-Autotools:
     # Just run on latest ubuntu
     runs-on: ubuntu-latest
     steps:
       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/checkout@v2
       - name: Install Dependencies
         run: sudo apt-get install -y autoconf automake build-essential po4a autopoint gcc-multilib
 
       # -b specifies the build system to use.
       # -p specifies the phase (build or test) to help narrow down an error
       #    if one occurs.
       #
       # Start with the 32-bit build because the autoconf cache must be reset
       # after the build because the 32-bit build sets the CFLAGS env variable.
       # By starting with the 32-bit build, we only have to clear the
       # cache once.
       - name: Build 32-bit
         run: ./build-aux/ci_build.sh -b autotools -p build -f "-m32"
       - name: Test 32-bit
         run: |
-            ./build-aux/ci_build.sh -b autotools -p test -f "-m32"
+            ./build-aux/ci_build.sh -b autotools -p test -f "-m32" -n 32_bit
             cd ../xz_build && make distclean
 
       - name: Build with full features
         run: ./build-aux/ci_build.sh -b autotools -p build
       - name: Test with full features
-        run: ./build-aux/ci_build.sh -b autotools -p test
+        run: ./build-aux/ci_build.sh -b autotools -p test -n full_features
 
       - name: Build without encoders
         run: ./build-aux/ci_build.sh -b autotools -d encoders,shared -p build
       - name: Test without encoders
-        run: ./build-aux/ci_build.sh -b autotools -d encoders,shared -p test
+        run: ./build-aux/ci_build.sh -b autotools -d encoders,shared -p test -n no_encoders
 
       - name: Build without decoders
         run: ./build-aux/ci_build.sh -b autotools -d decoders,shared -p build
       - name: Test without decoders
-        run: ./build-aux/ci_build.sh -b autotools -d decoders,shared -p test
+        run: ./build-aux/ci_build.sh -b autotools -d decoders,shared -p test -n no_decoders
 
       - name: Build without threads
         run: ./build-aux/ci_build.sh -b autotools -d threads,shared -p build
       - name: Test without threads
-        run: ./build-aux/ci_build.sh -b autotools -d threads,shared -p test
+        run: ./build-aux/ci_build.sh -b autotools -d threads,shared -p test -n no_threads
 
       - name: Build without BCJ filters
         run: ./build-aux/ci_build.sh -b autotools -d bcj,shared,nls -p build
       - name: Test without BCJ filters
-        run: ./build-aux/ci_build.sh -b autotools -d bcj,shared,nls -p test
+        run: ./build-aux/ci_build.sh -b autotools -d bcj,shared,nls -p test -n no_bcj
 
       - name: Build without Delta filters
         run: ./build-aux/ci_build.sh -b autotools -d delta,shared,nls -p build
       - name: Test without Delta filters
-        run: ./build-aux/ci_build.sh -b autotools -d delta,shared,nls -p test
+        run: ./build-aux/ci_build.sh -b autotools -d delta,shared,nls -p test -n no_delta
 
       - name: Build without sha256 check
         run: ./build-aux/ci_build.sh -b autotools -c crc32,crc64 -d shared,nls -p build
       - name: Test without sha256 check
-        run: ./build-aux/ci_build.sh -b autotools -c crc32,crc64 -d shared,nls -p test
+        run: ./build-aux/ci_build.sh -b autotools -c crc32,crc64 -d shared,nls -p test -n no_sha256
 
       - name: Build without crc64 check
         run: ./build-aux/ci_build.sh -b autotools -c crc32,sha256 -d shared,nls -p build
       - name: Test without crc64 check
-        run: ./build-aux/ci_build.sh -b autotools -c crc32,sha256 -d shared,nls -p test
+        run: ./build-aux/ci_build.sh -b autotools -c crc32,sha256 -d shared,nls -p test -n no_crc64
+
+      # Attempt to upload the test logs as artifacts if any step has failed
+      - uses: actions/upload-artifact@v3
+        if: ${{ failure() }}
+        with:
+          name: Linux Autotools Test Logs
+          path: build-aux/artifacts
 
   Linux-CMake:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - name: Install Dependencies
         run: sudo apt-get install -y build-essential cmake
       - name: Build
         run: ./build-aux/ci_build.sh -b cmake -p build
       - name: Test
         run: ./build-aux/ci_build.sh -b cmake -p test
+      # Attempt to upload the test logs as artifacts if any step has failed
+      - uses: actions/upload-artifact@v3
+        if: ${{ failure() }}
+        with:
+          name: Linux CMake Test Logs
+          path: build-aux/artifacts
 
   MacOS-Autotools:
     runs-on: macos-latest
     steps:
       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/checkout@v2
       - name: Install Dependencies
         run: brew install autoconf automake libtool po4a
 
       - name: Build with full features
         run: ./build-aux/ci_build.sh -b autotools -p build
       - name: Test with full features
-        run: ./build-aux/ci_build.sh -b autotools -p test
+        run: ./build-aux/ci_build.sh -b autotools -p test -n full_features
 
       - name: Build without encoders
         run: ./build-aux/ci_build.sh -b autotools -d encoders,shared -p build
       - name: Test without encoders
-        run: ./build-aux/ci_build.sh -b autotools -d encoders,shared -p test
+        run: ./build-aux/ci_build.sh -b autotools -d encoders,shared -p test -n no_encoders
 
       - name: Build without decoders
         run: ./build-aux/ci_build.sh -b autotools -d decoders,shared -p build
       - name: Test without decoders
-        run: ./build-aux/ci_build.sh -b autotools -d decoders,shared -p test
+        run: ./build-aux/ci_build.sh -b autotools -d decoders,shared -p test -n no_decoders
 
       - name: Build without threads
         run: ./build-aux/ci_build.sh -b autotools -d threads,shared -p build
       - name: Test without threads
-        run: ./build-aux/ci_build.sh -b autotools -d threads,shared -p test
+        run: ./build-aux/ci_build.sh -b autotools -d threads,shared -p test -n no_threads
 
       - name: Build without BCJ filters
         run: ./build-aux/ci_build.sh -b autotools -d bcj,shared,nls -p build
       - name: Test without BCJ filters
-        run: ./build-aux/ci_build.sh -b autotools -d bcj,shared,nls -p test
+        run: ./build-aux/ci_build.sh -b autotools -d bcj,shared,nls -p test -n no_bcj
 
       - name: Build without Delta filters
         run: ./build-aux/ci_build.sh -b autotools -d delta,shared,nls -p build
       - name: Test without Delta filters
-        run: ./build-aux/ci_build.sh -b autotools -d delta,shared,nls -p test
+        run: ./build-aux/ci_build.sh -b autotools -d delta,shared,nls -p test -n no_delta
 
       - name: Build without sha256 check
         run: ./build-aux/ci_build.sh -b autotools -c crc32,crc64 -d shared,nls -p build
       - name: Test without sha256 check
-        run: ./build-aux/ci_build.sh -b autotools -c crc32,crc64 -d shared,nls -p test
+        run: ./build-aux/ci_build.sh -b autotools -c crc32,crc64 -d shared,nls -p test -n no_sha256
 
       - name: Build without crc64 check
         run: ./build-aux/ci_build.sh -b autotools -c crc32,sha256 -d shared,nls -p build
       - name: Test without crc64 check
-        run: ./build-aux/ci_build.sh -b autotools -c crc32,sha256 -d shared,nls -p test
+        run: ./build-aux/ci_build.sh -b autotools -c crc32,sha256 -d shared,nls -p test -n no_crc64
+
+      # Attempt to upload the test logs as artifacts if any step has failed
+      - uses: actions/upload-artifact@v3
+        if: ${{ failure() }}
+        with:
+          name: MacOS Autotools Test Logs
+          path: build-aux/artifacts
 
   MacOS-CMake:
     runs-on: macos-latest
     steps:
       - uses: actions/checkout@v2
       - name: Install Dependencies
         run: brew install cmake
       - name: Build
         run: ./build-aux/ci_build.sh -b cmake -p build
       - name: Test
         run: ./build-aux/ci_build.sh -b cmake -p test
+      # Attempt to upload the test logs as artifacts if any step has failed
+      - uses: actions/upload-artifact@v3
+        if: ${{ failure() }}
+        with:
+          name: MacOS CMake Test Logs
+          path: build-aux/artifacts
     
\ No newline at end of file
diff --git a/build-aux/ci_build.sh b/build-aux/ci_build.sh
index 2d0f8643..85542c9b 100755
--- a/build-aux/ci_build.sh
+++ b/build-aux/ci_build.sh
@@ -1,187 +1,206 @@
 #!/bin/sh
 #
 #############################################################################
 #
 # Script meant to be used for Continuous Integration automation for POSIX
 # systems. On GitHub, this is used by Ubuntu and MacOS builds.
 #
 #############################################################################
 #
 # Author: Jia Tan
 #
 # This file has been put into the public domain.
 # You can do whatever you want with this file.
 #
 #############################################################################
 
 set -e
 
 USAGE="Usage: $0
   -b [autotools|cmake]
   -c [crc32|crc64|sha256]
   -d [encoders|decoders|bcj|delta|threads|shared|nls]
+  -f [CFLAGS]
   -l [destdir]
-  -s [srcdir]
+  -n [ARTIFACTS_DIR_NAME]
   -p [all|build|test]
-  -f [CFLAGS]"
+  -s [srcdir]"
 
 # Absolute path of script directory
 ABS_DIR=$(cd -- "$(dirname -- "$0")" && pwd)
 
 # Default CLI option values
 BUILD_SYSTEM="autotools"
 CHECK_TYPE="crc32,crc64,sha256"
 BCJ="y"
 DELTA="y"
 ENCODERS="y"
 DECODERS="y"
 THREADS="y"
 SHARED="y"
 NATIVE_LANG_SUPPORT="y"
 SRC_DIR="$ABS_DIR/../"
 DEST_DIR="$SRC_DIR/../xz_build"
 PHASE="all"
+ARTIFACTS_DIR_NAME="output"
 
 # Parse arguments
-while getopts b:c:d:l:s:p:f:h opt; do
+while getopts b:c:d:l:n:s:p:f:h opt; do
 	# b option can have either value "autotools" OR "cmake"
 	case ${opt} in
 	h)
 		echo "$USAGE"
 		exit 0
 	;;
 	b)
 		case "$OPTARG" in
 			autotools) ;;
 			cmake) ;;
 			*) echo "Invalid build system: $OPTARG"; exit 1;;
 		esac
 		BUILD_SYSTEM="$OPTARG"
 	;;
 	# c options can be a comma separated list of check types to support
 	c)
 	for crc in $(echo $OPTARG | sed "s/,/ /g"); do 
 		case "$crc" in
 		crc32) ;;
 		crc64) ;;
 		sha256) ;;
 		*) echo "Invalid check type: $crc"; exit 1 ;;
 		esac
 	done
 	CHECK_TYPE="$OPTARG"
 	;;
 	# d options can be a comma separated list of things to disable at
 	# configure time
 	d)
 	for disable_arg in $(echo $OPTARG | sed "s/,/ /g"); do 
 		case "$disable_arg" in
 		encoders) ENCODERS="n" ;;
 		decoders) DECODERS="n" ;;
 		bcj) BCJ="n" ;;
 		delta) DELTA="n" ;;
 		threads) THREADS="n" ;;
 		shared) SHARED="n";;
 		nls) NATIVE_LANG_SUPPORT="n";;
 		*) echo "Invalid disable value: $disable_arg"; exit 1 ;;
 		esac
 	done	
 	;;
 	l) DEST_DIR="$OPTARG"
 	;;
+	n) ARTIFACTS_DIR_NAME="$OPTARG"
+	;;
 	s) SRC_DIR="$OPTARG"
 	;;
 	p) PHASE="$OPTARG"
 	;;
 	f) 
 	CFLAGS="$OPTARG"
 	export CFLAGS
 	;;
 	esac
 done
 
 if [ "$PHASE" = "all" ] || [ "$PHASE" = "build" ]; then
 	# Build based on arguments
 	mkdir -p "$DEST_DIR"
 	case $BUILD_SYSTEM in
 		autotools)
 		cd "$SRC_DIR"
 
 		# Run autogen.sh script if not already run
 		if [ ! -f configure ]
 		then 
 			"./autogen.sh"
 		fi
 
 		cd "$DEST_DIR"
 
 		# Generate configure option values
 		EXTRA_OPTIONS=""
 		FILTER_LIST="lzma1,lzma2"
 
 		if [ "$BCJ" = "y" ]
 		then
 			FILTER_LIST="$FILTER_LIST,x86,powerpc,ia64,arm,armthumb,arm64,sparc"
 		fi
 
 		if [ "$DELTA" = "y" ]
 		then
 			FILTER_LIST="$FILTER_LIST,delta"
 		fi
 
 		if [ "$ENCODERS" = "y" ]
 		then
 			EXTRA_OPTIONS="$EXTRA_OPTIONS --enable-encoders=$FILTER_LIST"
 		else
 			EXTRA_OPTIONS="$EXTRA_OPTIONS --disable-encoders"
 		fi
 
 		if [ "$DECODERS" = "y" ]
 		then
 			EXTRA_OPTIONS="$EXTRA_OPTIONS --enable-decoders=$FILTER_LIST"
 		else
 			EXTRA_OPTIONS="$EXTRA_OPTIONS --disable-decoders"
 		fi
 
 		if [ "$THREADS" = "n" ]
 		then
 			EXTRA_OPTIONS="$EXTRA_OPTIONS --disable-threads"
 		fi
 
 		if [ "$SHARED" = "n" ]
 		then
 			EXTRA_OPTIONS="$EXTRA_OPTIONS --disable-shared"
 		fi
 
 		if [ "$NATIVE_LANG_SUPPORT" = "n" ]
 		then
 			EXTRA_OPTIONS="$EXTRA_OPTIONS --disable-nls"
 		fi
 
 		# Run configure script
 		"$SRC_DIR"/configure --enable-werror --enable-checks=$CHECK_TYPE $EXTRA_OPTIONS --config-cache
 
 		# Build the project
 		make
 		;;
 		cmake)
 		# CMake currently does not support disabling encoders, decoders,
 		# threading, or check types. For now, just run the full build.
 		cd "$DEST_DIR"
 		cmake "$SRC_DIR/CMakeLists.txt" -B "$DEST_DIR"
 		make
 		;;
 	esac
 fi
 
 if [ "$PHASE" = "all" ] || [ "$PHASE" = "test" ]; then
 	case $BUILD_SYSTEM in
 		autotools)
 			cd "$DEST_DIR"
-			make check
+			# If the tests fail, copy the test logs into the artifacts folder
+			if make check
+			then
+				:
+			else
+				mkdir -p "$SRC_DIR/build-aux/artifacts/$ARTIFACTS_DIR_NAME"
+				cp ./tests/*.log "$SRC_DIR/build-aux/artifacts/$ARTIFACTS_DIR_NAME"
+				exit 1
+			fi
 		;;
 		cmake)
 			cd "$DEST_DIR"
-			make "test"
+			if make test
+			then
+				:
+			else
+				mkdir -p "$SRC_DIR/build-aux/artifacts/$ARTIFACTS_DIR_NAME"
+				cp ./Testing/Temporary/*.log "$SRC_DIR/build-aux/artifacts/$ARTIFACTS_DIR_NAME"
+				exit 1
+			fi
 		;;
 	esac
-fi
\ No newline at end of file
+fi