{"id":"27714870522","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":12939850027,"size":29,"distinct_size":4,"ref":"refs/heads/doxygen_install_docs","head":"9034c4c2aaa1daaf344fcf5352bee44713e01bbd","before":"fa1a125fba9ff6d4d012168375d21f6706f3394a","commits":[{"sha":"c9c8bfae3502842dcead85eeb2b951b437c2cd88","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Add LZIP decoder test to list of tests.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/c9c8bfae3502842dcead85eeb2b951b437c2cd88"},{"sha":"14cd30806d69e55906073745bcce3ee50e0ec942","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Improve documentation for container.h\n\nStandardizing each function to always specify parameters and return\nvalues. Also moved the parameters and return values to the end of each\nfunction description.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/14cd30806d69e55906073745bcce3ee50e0ec942"},{"sha":"dbd47622eb99fefb3538a22baec3def002aa56f5","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix typo in documentation in container.h\n\nlzma_microlzma_decoder -> lzma_microlzma_encoder","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/dbd47622eb99fefb3538a22baec3def002aa56f5"},{"sha":"5b1c171d4ffe89ef18fa31509bb0185d6fd11d39","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Convert list of flags in lzma_mt to bulleted list.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5b1c171d4ffe89ef18fa31509bb0185d6fd11d39"},{"sha":"00a721b63d82dfb658dca8d8cb599d8a245c663f","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix small typos and reword a few things in filter.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/00a721b63d82dfb658dca8d8cb599d8a245c663f"},{"sha":"fa9065fac54194fe0407fc7f0cc9633fdce13c21","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Adjust container.h for consistency with filter.h.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/fa9065fac54194fe0407fc7f0cc9633fdce13c21"},{"sha":"30e95bb44c36ae26b2ab12a94343b215fec285e7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Avoid null pointer + 0 (undefined behavior in C).\n\nIn the C99 and C17 standards, section 6.5.6 paragraph 8 means that\nadding 0 to a null pointer is undefined behavior. As of writing,\n\"clang -fsanitize=undefined\" (Clang 15) diagnoses this. However,\nI'm not aware of any compiler that would take advantage of this\nwhen optimizing (Clang 15 included). It's good to avoid this anyway\nsince compilers might some day infer that pointer arithmetic implies\nthat the pointer is not NULL. That is, the following foo() would then\nunconditionally return 0, even for foo(NULL, 0):\n\n    void bar(char *a, char *b);\n\n    int foo(char *a, size_t n)\n    {\n        bar(a, a + n);\n        return a == NULL;\n    }\n\nIn contrast to C, C++ explicitly allows null pointer + 0. So if\nthe above is compiled as C++ then there is no undefined behavior\nin the foo(NULL, 0) call.\n\nTo me it seems that changing the C standard would be the sane\nthing to do (just add one sentence) as it would ensure that a huge\namount of old code won't break in the future. Based on web searches\nit seems that a large number of codebases (where null pointer + 0\noccurs) are being fixed instead to be future-proof in case compilers\nwill some day optimize based on it (like making the above foo(NULL, 0)\nreturn 0) which in the worst case will cause security bugs.\n\nSome projects don't plan to change it. For example, gnulib and thus\nmany GNU tools currently require that null pointer + 0 is defined:\n\n    https://lists.gnu.org/archive/html/bug-gnulib/2021-11/msg00000.html\n\n    https://www.gnu.org/software/gnulib/manual/html_node/Other-portability-assumptions.html\n\nIn XZ Utils null pointer + 0 issue should be fixed after this\ncommit. This adds a few if-statements and thus branches to avoid\nnull pointer + 0. These check for size > 0 instead of ptr != NULL\nbecause this way bugs where size > 0 && ptr == NULL will likely\nget caught quickly. None of them are in hot spots so it shouldn't\nmatter for performance.\n\nA little less readable version would be replacing\n\n    ptr + offset\n\nwith\n\n    offset != 0 ? ptr + offset : ptr\n\nor creating a macro for it:\n\n    #define my_ptr_add(ptr, offset) \\\n            ((offset) != 0 ? ((ptr) + (offset)) : (ptr))\n\nChecking for offset != 0 instead of ptr != NULL allows GCC >= 8.1,\nClang >= 7, and Clang-based ICX to optimize it to the very same code\nas ptr + offset. That is, it won't create a branch. So for hot code\nthis could be a good solution to avoid null pointer + 0. Unfortunately\nother compilers like ICC 2021 or MSVC 19.33 (VS2022) will create a\nbranch from my_ptr_add().\n\nThanks to Marcin Kowalczyk for reporting the problem:\nhttps://github.com/tukaani-project/xz/issues/36","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/30e95bb44c36ae26b2ab12a94343b215fec285e7"},{"sha":"805b45cd60bfd5da3d3d89077de3789df179b324","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/805b45cd60bfd5da3d3d89077de3789df179b324"},{"sha":"01441df92c0fd6a6c02fe5ac27982a54ce887cc0","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Improve documentation in filter.h.\n\nAll functions now explicitly specify parameter and return values.\nThe notes and code annotations were moved before the parameter and\nreturn value descriptions for consistency.\n\nAlso, the description above lzma_filter_encoder_is_supported() about\nnot being able to list available filters was removed since\nlzma_str_list_filters() will do this.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/01441df92c0fd6a6c02fe5ac27982a54ce887cc0"},{"sha":"463d9359b8595f01d44ada1739d75aeb87f36524","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Reword a few lines in filter.h","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/463d9359b8595f01d44ada1739d75aeb87f36524"},{"sha":"002006be62d77c706565fa6ec828bea64be302da","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Shorten return description for two functions in filter.h.\n\nShorten the description for lzma_raw_encoder_memusage() and\nlzma_raw_decoder_memusage().","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/002006be62d77c706565fa6ec828bea64be302da"},{"sha":"3cf72c4bcba5370f07477c9b9b62ae33069ef9a9","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Replace '\\n' -> newline in filter.h documentation.\n\nThe '\\n' renders as a newline when the comments are converted to html\nby Doxygen.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3cf72c4bcba5370f07477c9b9b62ae33069ef9a9"},{"sha":"9aa7fdeb04c486d2700967090956af88fdccab7e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Tests: Small tweak to test-vli.c.\n\nThe static global variables can be disabled if encoders and decoders\nare not built. If they are not disabled and -Werror is used, it will\ncause an usused warning as an error.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/9aa7fdeb04c486d2700967090956af88fdccab7e"},{"sha":"4b7fb3bf41a0ca4c97fad3799949a2aa61b13b99","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"CMake: Require that the C compiler supports C99 or a newer standard.\n\nThanks to autoantwort for reporting the issue and suggesting\na different patch:\nhttps://github.com/tukaani-project/xz/pull/42","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/4b7fb3bf41a0ca4c97fad3799949a2aa61b13b99"},{"sha":"f1ab1f6b339d16a53ac53efeb97779ecd2bae70f","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Clarify lzma_lzma_preset() documentation in lzma12.h.\n\nlzma_lzma_preset() does not guarentee that the lzma_options_lzma are\nusable in an encoder even if it returns false (success). If liblzma\nis built with default configurations, then the options will always be\nusable. However if the match finders hc3, hc4, or bt4 are disabled, then\nthe options may not be usable depending on the preset level requested.\n\nThe documentation was updated to reflect this complexity, since this\nbehavior was unclear before.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f1ab1f6b339d16a53ac53efeb97779ecd2bae70f"},{"sha":"f070722b57ba975a0dff36492d766f03026b1d21","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Reorder cap_enter() to beginning of capsicum sandbox code.\n\ncap_enter() puts the process into the sandbox. If later calls to\ncap_rights_limit() fail, then the process can still have some extra\nprotections.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f070722b57ba975a0dff36492d766f03026b1d21"},{"sha":"61ee82cb1232a402c82282bbae42821f2b952b0d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Skip Capsicum sandbox system calls when they are unsupported.\n\nIf a system has the Capsicum header files but does not actually\nimplement the system calls, then this would render xz unusable. Instead,\nwe can check if errno == ENOSYS and not issue a fatal error.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/61ee82cb1232a402c82282bbae42821f2b952b0d"},{"sha":"5fb936786601a1cd013a5d436adde65982b1e13c","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Add warning if Capsicum sandbox system calls are unsupported.\n\nThe warning is only used when errno == ENOSYS. Otherwise, xz still\nissues a fatal error.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/5fb936786601a1cd013a5d436adde65982b1e13c"},{"sha":"01587dda2a8f13fef7e12fd624e6d05da5f9624f","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Fix -Wunused-label in io_sandbox_enter().\n\nThanks to Xin Li for recommending the fix.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/01587dda2a8f13fef7e12fd624e6d05da5f9624f"},{"sha":"916448d624aaf55cef0fc3e53754affb8c4f309d","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Revert: \"Add warning if Capsicum sandbox system calls are unsupported.\"\n\nThe warning causes the exit status to be 2, so this will cause problems\nfor many scripted use cases for xz. The sandbox usage is already very\nlimited already, so silently disabling this allows it to be more usable.","distinct":false,"url":"https://api.github.com/repos/tukaani-project/xz/commits/916448d624aaf55cef0fc3e53754affb8c4f309d"}]},"public":true,"created_at":"2023-03-14T16:18:54Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"27715222295","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":12940013476,"size":4,"distinct_size":4,"ref":"refs/heads/doxygen_install_docs","head":"2e2e4dae17d13b0a4bfbbbc82fad19bc56bb7183","before":"b3f1ea0901ea0160512a69e5b6b5c9a929e58849","commits":[{"sha":"bf306e02a3a7aeebf583e630f8b4bdf4d98b2f6e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Doxygen: Separate Doxyfile.in into three Doxyfiles.\n\nInstead of having one Doxyfile.in that is configured by Autoconf, the\nDoxyfiles are separated into Doxyfile_base, Doxyfile_all, and\nDoxyfile_liblzma.\n\nDoxyfile_base contains a majority of the Doxygen configurations. It is\na dependency of Doxyfile_all and Doxyfile_liblzma and is included using\nDoxygen's @INCLUDE syntax. Anything shared between Doxyfile_all and\nDoxyfile_liblzma should be configured in Doxyfile_base. This file should\nnot be used to generate Doxygen documentation directly.\n\nDoxyfile_all contains configurations for when one wants to generate\ndocumentation for all source files. To use it, two environment variables\nmust be set:\n- PACKAGE_VERSION. This is used by Doxyfile_base to substitute the\n  PROJECT_NUMBER Doxygen configuration.\n- PACKAGE_NAME. This is used by Doxyfile_all to substitute the\n  PROJECT_NAME Doxygen configuration.\n\nDoxyfile_liblzma contains configurations for when one wants to generate\ndocumentation for just liblzma API header files. The same two\nenvironment variables need to be set as when using Doxyfile_all\n(PACKAGE_VERSION and PACKAGE_NAME).","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/bf306e02a3a7aeebf583e630f8b4bdf4d98b2f6e"},{"sha":"f985724c00c0f48021246f68ae363131c59d17aa","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Install Doxygen docs and include in distribution if generated.\n\nAdded a install-data-local target to install the Doxygen documentation\nonly when it has been generated. In order to correctly remove the docs,\na corresponding uninstall-local target was added.\n\nIf the doxygen docs exist in the source tree, they will also be included\nin the distribution now too.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/f985724c00c0f48021246f68ae363131c59d17aa"},{"sha":"3d503ba7fd8ac8065f7dd2545391d98c585f6da4","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Create doxygen/update-doxygen.sh script.\n\nThis is a helper script to generate the Doxygen documentation. It can be\nrun in 'api' or 'all' mode by setting the first argument. It will\ndefault to 'api' mode and only generate documentation for the liblzma\nAPI header files.\n\nThe helper script will be run during the custom mydist hook when we\ncreate releases. This hook already alters the source directory, so its\nnot any worse to do it here too. This way, we can include the Doxygen\ngenerated files in the distrubtion and when installing.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/3d503ba7fd8ac8065f7dd2545391d98c585f6da4"},{"sha":"2e2e4dae17d13b0a4bfbbbc82fad19bc56bb7183","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Generate doxygen documentation in autogen.sh.\n\nAnother command line option (--no-doxygen) was added to disable\ncreating the doxygen documenation in cases where it not wanted or\nif the doxygen tool is not installed.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/2e2e4dae17d13b0a4bfbbbc82fad19bc56bb7183"}]},"public":true,"created_at":"2023-03-14T16:30:43Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"27715362750","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":12940081567,"size":1,"distinct_size":1,"ref":"refs/heads/doxygen_install_docs","head":"ec3bb497bb70db7d348c6e0bcd1d5c23b4795f31","before":"2e2e4dae17d13b0a4bfbbbc82fad19bc56bb7183","commits":[{"sha":"ec3bb497bb70db7d348c6e0bcd1d5c23b4795f31","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Do not run po4a or doxygen in autogen step.\n\nDocumentation and translations are not tested, so this is unecessary\nand will cause errors if the CI worker does not have these installed.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/ec3bb497bb70db7d348c6e0bcd1d5c23b4795f31"}]},"public":true,"created_at":"2023-03-14T16:35:44Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
{"id":"27715623150","type":"PushEvent","actor":{"id":78042786,"login":"JiaT75","display_login":"JiaT75","gravatar_id":"","url":"https://api.github.com/users/JiaT75","avatar_url":"https://avatars.githubusercontent.com/u/78042786?"},"repo":{"id":553665726,"name":"tukaani-project/xz","url":"https://api.github.com/repos/tukaani-project/xz"},"payload":{"repository_id":553665726,"push_id":12940205486,"size":1,"distinct_size":1,"ref":"refs/heads/doxygen_install_docs","head":"de88afeca4a4cc17c82713bc9e041abff8a3e692","before":"ec3bb497bb70db7d348c6e0bcd1d5c23b4795f31","commits":[{"sha":"de88afeca4a4cc17c82713bc9e041abff8a3e692","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Add doxygen as a dependency.\n\nAutogen now requires --no-doxygen or having doxygen installed to run\nwithout errors.","distinct":true,"url":"https://api.github.com/repos/tukaani-project/xz/commits/de88afeca4a4cc17c82713bc9e041abff8a3e692"}]},"public":true,"created_at":"2023-03-14T16:45:05Z","org":{"id":116083088,"login":"tukaani-project","gravatar_id":"","url":"https://api.github.com/orgs/tukaani-project","avatar_url":"https://avatars.githubusercontent.com/u/116083088?"}}
