<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recent posts to Update of VMS port for GNV project.</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/ed4e6348/</link><description>Recent posts to Update of VMS port for GNV project.</description><language>en</language><lastBuildDate>Fri, 02 Jun 2017 17:06:41 -0000</lastBuildDate><atom:link href="https://sourceforge.net/p/lzmautils/discussion/708858/thread/ed4e6348/feed.rss" rel="self" type="application/rss+xml"></atom:link><item><title>Update of VMS port for GNV project.</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/ed4e6348/?limit=25#72f8</link><description>&lt;div class="markdown_content"&gt;&lt;blockquote&gt;
&lt;p&gt;Secondary buiild target is VAX/VMS 7.3.&lt;br/&gt;
&lt;span&gt;[...]&lt;/span&gt;&lt;br/&gt;
The main compiler limitation is no 64 bit integer support.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the compiler doesn't support 64-bit integers, it's too much work to make XZ Utils compile. You can do it, of course, but I won't include such a patch. Even XZ Embedded uses a few 64-bit integers but making that work without 64-bit integers should be easy (in case you need some sort of .xz decompressor for that system).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In src/xz/file_io.c the code is assuming the default stat structure returned by VMS.&lt;br/&gt;
For VMS 8.2+ when "_USE_STD_STAT" is defined, the st_ino type is a 64 bit integer. A number of other sins of the past are also fixed by that define. For other projects, I have set up macros for st_ino assignment and comparison to hide the difference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using _USE_STD_STAT and changing how st_ino is handled is fine. I suppose treating st_ino as a normal 64-bit int is enough then, and there's no need for special macros to hide the difference if older VMS versions won't be supported anyway. Does it still require its own special case to avoid comparing st_dev?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In src/xz/suffix.c it is a compile time setting for "case-insensitive filename suffix". For 64 bit VMS 7.2+ this is a run-time setting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good to know. However, I think it's good enough if it's always case insensitive on systems where a file system typically is case insensitive. I'm not sure if it matters much even on modern Windows as it preserves file name case. It does matter e.g. on DOS where 8.3 file names are forced to upper case.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is my understanding that this is also a run-time setting on Windows and other platforms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think NTFS supports case-sensitive mode, but there should be no harm in always using case-insensitive comparison on Windows. If you have a file FOO.XZ (perhaps created in case-insensitive mode) and you are now in case-sensitive mode, it's probably best if xz recognizes the suffix in case insensitive way.&lt;/p&gt;
&lt;p&gt;It can consider changing it if you still think it's a good idea.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In src/common/tuklib_physmem.c, I see that it is returning a 64 bit integer, which indicates the eventual building on VAX may be a challenge. The code is also making the assumption that the page size is 8K instead of looking it up with SYS$_PAGE_SIZE value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fixing the page size part would be good.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As I can not currently run autoconf, for this pass, I am building from what was the latest release tarball when I grabbed it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is fine. There aren't any big changes made after that so using it as a base for VMS patches should work well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you interested in the patches for the above issues as soon as I validate them?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, to some of the issues as described above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you interested in a "vms" directory with all files needed to build on VMS using the GNV project, including creating the packages?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Assuming you mean that the VMS-specific files would be isolated in its own directory and I don't need to maintain them, this sounds fine to me. :-)&lt;/p&gt;
&lt;p&gt;The current official VMS port is external (linked from INSTALL) since it puts files in many places and I cannot maintain it.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lasse Collin</dc:creator><pubDate>Fri, 02 Jun 2017 17:06:41 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net35a83dbce9e2021d283d442a6781a5b5b4ad9fa9</guid></item><item><title>Update of VMS port for GNV project.</title><link>https://sourceforge.net/p/lzmautils/discussion/708858/thread/ed4e6348/?limit=25#ab7b</link><description>&lt;div class="markdown_content"&gt;&lt;p&gt;I am updating the &lt;a class="" href="https://sourceforge.net/projects/gnv/"&gt;GNV for VMS&lt;/a&gt; project and am planning to include the XZ utils as part of it.&lt;/p&gt;
&lt;p&gt;The GNV project has now reached the status that it can use GNU configure/make scripts, but not the autoconf tools.&lt;/p&gt;
&lt;p&gt;My current primary build targets are Alpha/VMS 8.3+, and IA64/VMS 8.4+.&lt;/p&gt;
&lt;p&gt;Secondary buiild target is VAX/VMS 7.3.  Currently most of GNV will not build on VAX/VMS 7.3 because the available DECC v6.4 compiler limitations and the file system limitations that I and others on the project have not taken the time to work around.  The main compiler limitation is no 64 bit integer support.&lt;/p&gt;
&lt;p&gt;Support for x86_64/VMS 9.x is planned when it becomes available.&lt;/p&gt;
&lt;p&gt;VAX/VMS 7.3 is the final VAX version with no updates expected.&lt;/p&gt;
&lt;p&gt;Alpha and IA64 8.4 is the final version for those platforms, with updates being provided by HPE and VMS Software, Inc.&lt;/p&gt;
&lt;p&gt;In my first build attempt of xz, I have discovered a couple of isses with the VMS specific code:&lt;/p&gt;
&lt;p&gt;In src/xz/file_io.c the code is assuming the default stat structure returned by VMS.&lt;br/&gt;
For VMS 8.2+ when "_USE_STD_STAT" is defined, the  st_ino type is a 64 bit integer.  A number of other sins of the past are also fixed by that define.&lt;br/&gt;
For other projects, I have set up macros for st_ino assignment and comparison to hide the difference.&lt;/p&gt;
&lt;p&gt;In src/xz/suffix.c it is a compile time setting for "case-insensitive filename suffix".&lt;br/&gt;
For 64 bit VMS 7.2+ this is a run-time setting.&lt;br/&gt;
It is my understanding that this is also a run-time setting on Windows and other platforms.&lt;/p&gt;
&lt;p&gt;In src/common/tuklib_physmem.c, I see that it is returning a 64 bit integer, which indicates the eventual building on VAX may be a challenge.&lt;br/&gt;
The code is also making the assumption that the page size is 8K instead of looking it up with SYS$_PAGE_SIZE value.&lt;/p&gt;
&lt;p&gt;I am sure that I will probably find a few more issues after I get past these.&lt;/p&gt;
&lt;p&gt;For the GNV project, the VMS builds are building installable packages that include the option to install source.&lt;/p&gt;
&lt;p&gt;As I can not currently run autoconf, for this pass, I am building from what was the latest release tarball when I grabbed it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Are you interested in the patches for the above issues as soon as I validate them?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Are you interested in a "vms" directory with all files needed to build on VMS using the GNV project, including creating the packages?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Regards, John Malmberg.&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Malmberg</dc:creator><pubDate>Thu, 25 May 2017 13:40:06 -0000</pubDate><guid isPermaLink="false">https://sourceforge.net34f4552db1f7e7328e662ac820352efa7919dcd6</guid></item></channel></rss>