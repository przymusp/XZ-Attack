{"id":"27299760285","type":"PushEvent","actor":{"id":5138957,"login":"jollaitbot","display_login":"jollaitbot","gravatar_id":"","url":"https://api.github.com/users/jollaitbot","avatar_url":"https://avatars.githubusercontent.com/u/5138957?"},"repo":{"id":251359905,"name":"sailfishos-mirror/xz","url":"https://api.github.com/repos/sailfishos-mirror/xz"},"payload":{"repository_id":251359905,"push_id":12727566940,"size":8,"distinct_size":8,"ref":"refs/heads/master","head":"805b45cd60bfd5da3d3d89077de3789df179b324","before":"b9f171dd00a3cc32b6d41ea8e082cf545640ec2a","commits":[{"sha":"c9c8bfae3502842dcead85eeb2b951b437c2cd88","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Add LZIP decoder test to list of tests.","distinct":true,"url":"https://api.github.com/repos/sailfishos-mirror/xz/commits/c9c8bfae3502842dcead85eeb2b951b437c2cd88"},{"sha":"14cd30806d69e55906073745bcce3ee50e0ec942","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Improve documentation for container.h\n\nStandardizing each function to always specify parameters and return\nvalues. Also moved the parameters and return values to the end of each\nfunction description.","distinct":true,"url":"https://api.github.com/repos/sailfishos-mirror/xz/commits/14cd30806d69e55906073745bcce3ee50e0ec942"},{"sha":"dbd47622eb99fefb3538a22baec3def002aa56f5","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix typo in documentation in container.h\n\nlzma_microlzma_decoder -> lzma_microlzma_encoder","distinct":true,"url":"https://api.github.com/repos/sailfishos-mirror/xz/commits/dbd47622eb99fefb3538a22baec3def002aa56f5"},{"sha":"5b1c171d4ffe89ef18fa31509bb0185d6fd11d39","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Convert list of flags in lzma_mt to bulleted list.","distinct":true,"url":"https://api.github.com/repos/sailfishos-mirror/xz/commits/5b1c171d4ffe89ef18fa31509bb0185d6fd11d39"},{"sha":"00a721b63d82dfb658dca8d8cb599d8a245c663f","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Fix small typos and reword a few things in filter.h.","distinct":true,"url":"https://api.github.com/repos/sailfishos-mirror/xz/commits/00a721b63d82dfb658dca8d8cb599d8a245c663f"},{"sha":"fa9065fac54194fe0407fc7f0cc9633fdce13c21","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Adjust container.h for consistency with filter.h.","distinct":true,"url":"https://api.github.com/repos/sailfishos-mirror/xz/commits/fa9065fac54194fe0407fc7f0cc9633fdce13c21"},{"sha":"30e95bb44c36ae26b2ab12a94343b215fec285e7","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Avoid null pointer + 0 (undefined behavior in C).\n\nIn the C99 and C17 standards, section 6.5.6 paragraph 8 means that\nadding 0 to a null pointer is undefined behavior. As of writing,\n\"clang -fsanitize=undefined\" (Clang 15) diagnoses this. However,\nI'm not aware of any compiler that would take advantage of this\nwhen optimizing (Clang 15 included). It's good to avoid this anyway\nsince compilers might some day infer that pointer arithmetic implies\nthat the pointer is not NULL. That is, the following foo() would then\nunconditionally return 0, even for foo(NULL, 0):\n\n    void bar(char *a, char *b);\n\n    int foo(char *a, size_t n)\n    {\n        bar(a, a + n);\n        return a == NULL;\n    }\n\nIn contrast to C, C++ explicitly allows null pointer + 0. So if\nthe above is compiled as C++ then there is no undefined behavior\nin the foo(NULL, 0) call.\n\nTo me it seems that changing the C standard would be the sane\nthing to do (just add one sentence) as it would ensure that a huge\namount of old code won't break in the future. Based on web searches\nit seems that a large number of codebases (where null pointer + 0\noccurs) are being fixed instead to be future-proof in case compilers\nwill some day optimize based on it (like making the above foo(NULL, 0)\nreturn 0) which in the worst case will cause security bugs.\n\nSome projects don't plan to change it. For example, gnulib and thus\nmany GNU tools currently require that null pointer + 0 is defined:\n\n    https://lists.gnu.org/archive/html/bug-gnulib/2021-11/msg00000.html\n\n    https://www.gnu.org/software/gnulib/manual/html_node/Other-portability-assumptions.html\n\nIn XZ Utils null pointer + 0 issue should be fixed after this\ncommit. This adds a few if-statements and thus branches to avoid\nnull pointer + 0. These check for size > 0 instead of ptr != NULL\nbecause this way bugs where size > 0 && ptr == NULL will likely\nget caught quickly. None of them are in hot spots so it shouldn't\nmatter for performance.\n\nA little less readable version would be replacing\n\n    ptr + offset\n\nwith\n\n    offset != 0 ? ptr + offset : ptr\n\nor creating a macro for it:\n\n    #define my_ptr_add(ptr, offset) \\\n            ((offset) != 0 ? ((ptr) + (offset)) : (ptr))\n\nChecking for offset != 0 instead of ptr != NULL allows GCC >= 8.1,\nClang >= 7, and Clang-based ICX to optimize it to the very same code\nas ptr + offset. That is, it won't create a branch. So for hot code\nthis could be a good solution to avoid null pointer + 0. Unfortunately\nother compilers like ICC 2021 or MSVC 19.33 (VS2022) will create a\nbranch from my_ptr_add().\n\nThanks to Marcin Kowalczyk for reporting the problem:\nhttps://github.com/tukaani-project/xz/issues/36","distinct":true,"url":"https://api.github.com/repos/sailfishos-mirror/xz/commits/30e95bb44c36ae26b2ab12a94343b215fec285e7"},{"sha":"805b45cd60bfd5da3d3d89077de3789df179b324","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/sailfishos-mirror/xz/commits/805b45cd60bfd5da3d3d89077de3789df179b324"}]},"public":true,"created_at":"2023-02-24T00:15:04Z","org":{"id":62875150,"login":"sailfishos-mirror","gravatar_id":"","url":"https://api.github.com/orgs/sailfishos-mirror","avatar_url":"https://avatars.githubusercontent.com/u/62875150?"}}
