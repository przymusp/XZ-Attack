{"id":"34807515905","type":"PushEvent","actor":{"id":1015967,"login":"kiyolee","display_login":"kiyolee","gravatar_id":"","url":"https://api.github.com/users/kiyolee","avatar_url":"https://avatars.githubusercontent.com/u/1015967?"},"repo":{"id":683232130,"name":"kiyolee/xz","url":"https://api.github.com/repos/kiyolee/xz"},"payload":{"repository_id":683232130,"push_id":16629896546,"size":14,"distinct_size":14,"ref":"refs/heads/master","head":"fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b","before":"133c5851eb917c6d99d0b623c1689c8518e65f38","commits":[{"sha":"12c90c00f05e19da3c0c91d8cd8e0d0d45965606","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Check also for __clang__ in memcmplen.h.\n\nThis change hopefully makes no practical difference as Clang\nlikely was detected via __GNUC__ or _MSC_VER already.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/12c90c00f05e19da3c0c91d8cd8e0d0d45965606"},{"sha":"cd64dd70d5665b6048829c45772d08606f44672e","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use 8-byte method in memcmplen.h on ARM64.\n\nIt requires fast unaligned access to 64-bit integers\nand a fast instruction to count leading zeros in\na 64-bit integer (__builtin_ctzll()). This perhaps\nshould be enabled on some other archs too.\n\nThanks to Chenxi Mao for the original patch:\nhttps://github.com/tukaani-project/xz/pull/75 (the first commit)\nAccording to the numbers there, this may improve encoding\nspeed by about 3-5 %.\n\nThis enables the 8-byte method on MSVC ARM64 too which\nshould work but wasn't tested.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/cd64dd70d5665b6048829c45772d08606f44672e"},{"sha":"15cf3f04f270d707a5c91cc0208b23b6db42b774","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/15cf3f04f270d707a5c91cc0208b23b6db42b774"},{"sha":"0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: crc_clmul.c: Tidy up the location of MSVC pragma.\n\nIt makes no difference in practice.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae"},{"sha":"93d144f0930821590524247bd174afd38003d7f0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Add empty lines.\n\nAnd remove one too.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/93d144f0930821590524247bd174afd38003d7f0"},{"sha":"9523c1300d22fa715765c181cf991d14d6112fb1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define crc_attr_no_sanitize_address in crc_common.h.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/9523c1300d22fa715765c181cf991d14d6112fb1"},{"sha":"d164ac0e62904126f7920c25f9a2875c8cd28b97","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Simplify existing cases with lzma_attr_no_sanitize_address.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/d164ac0e62904126f7920c25f9a2875c8cd28b97"},{"sha":"e3833e297dfb5021a197bda34ba2a795e30aaf8a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: crc_clmul.c: Add crc_attr_target macro.\n\nThis reduces the number of the complex #if directives.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/e3833e297dfb5021a197bda34ba2a795e30aaf8a"},{"sha":"419f55f9dfc2df8792902b8953d50690121afeea","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Avoid extern lzma_crc32_clmul() and lzma_crc64_clmul().\n\nA CLMUL-only build will have the crcxx_clmul() inlined into\nlzma_crcxx(). Previously a jump to the extern lzma_crcxx_clmul()\nwas needed. Notes about shared liblzma on ELF platforms:\n\n  - On platforms that support ifunc and -fvisibility=hidden, this\n    was silly because CLMUL-only build would have that single extra\n    jump instruction of extra overhead.\n\n  - On platforms that support neither -fvisibility=hidden nor linker\n    version script (liblzma*.map), jumping to lzma_crcxx_clmul()\n    would go via PLT so a few more instructions of overhead (still\n    not a big issue but silly nevertheless).\n\nThere was a downside with static liblzma too: if an application only\nneeds lzma_crc64(), static linking would make the linker include the\nCLMUL code for both CRC32 and CRC64 from crc_x86_clmul.o even though\nthe CRC32 code wouldn't be needed, thus increasing code size of the\nexecutable (assuming that -ffunction-sections isn't used).\n\nAlso, now compilers are likely to inline crc_simd_body()\neven if they don't support the always_inline attribute\n(or MSVC's __forceinline). Quite possibly all compilers\nthat build the code do support such an attribute. But now\nit likely isn't a problem even if the attribute wasn't supported.\n\nNow all x86-specific stuff is in crc_x86_clmul.h. If other archs\nThe other archs can then have their own headers with their own\nis_clmul_supported() and crcxx_clmul().\n\nAnother bonus is that the build system doesn't need to care if\ncrc_clmul.c is needed.\n\nis_clmul_supported() stays as inline function as it's not needed\nwhen doing a CLMUL-only build (avoids a warning about unused function).","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/419f55f9dfc2df8792902b8953d50690121afeea"},{"sha":"3dbed75b0b9c7087c76fe687acb5cf582cd57b99","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix a comment in crc_common.h.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/3dbed75b0b9c7087c76fe687acb5cf582cd57b99"},{"sha":"66f080e8016129576536482ac377e2ecac7a2b90","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Rename arch-specific CRC functions and macros.\n\nCRC_CLMUL was split to CRC_ARCH_OPTIMIZED and CRC_X86_CLMUL.\nCRC_ARCH_OPTIMIZED is defined when an arch-optimized version is used.\nCurrently the x86 CLMUL implementations are the only arch-optimized\nversions, and these also use the CRC_x86_CLMUL macro to tell when\ncrc_x86_clmul.h needs to be included.\n\nis_clmul_supported() was renamed to is_arch_extension_supported().\ncrc32_clmul() and crc64_clmul() were renamed to\ncrc32_arch_optimized() and crc64_arch_optimized().\nThis way the names make sense with arch-specific non-CLMUL\nimplementations as well.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/66f080e8016129576536482ac377e2ecac7a2b90"},{"sha":"35c03ec6bf66f1b159964c9721a2dce0e2859b20","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Update CLMUL comments to more generic wording.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/35c03ec6bf66f1b159964c9721a2dce0e2859b20"},{"sha":"4f518c1b6b7b7ce5dcefea81acd44d7a086a8882","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Remove crc_always_inline, use lzma_always_inline instead.\n\nNow crc_simd_body() in crc_x86_clmul.h is only called once\nin a translation unit, we no longer need to be so cautious\nabout ensuring the always-inline behavior.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/4f518c1b6b7b7ce5dcefea81acd44d7a086a8882"},{"sha":"fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Add a comment to crc_x86_clmul.h about BUILDING_ macros.","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b"}]},"public":true,"created_at":"2024-01-14T07:23:21Z"}
{"id":"34807516938","type":"PushEvent","actor":{"id":1015967,"login":"kiyolee","display_login":"kiyolee","gravatar_id":"","url":"https://api.github.com/users/kiyolee","avatar_url":"https://avatars.githubusercontent.com/u/1015967?"},"repo":{"id":683232130,"name":"kiyolee/xz","url":"https://api.github.com/repos/kiyolee/xz"},"payload":{"repository_id":683232130,"push_id":16629897232,"size":17,"distinct_size":3,"ref":"refs/heads/win-build","head":"a4241037da2f4feca48949aaabf472248f460892","before":"c0a20f57e88c9963c43ddf78b6df45ed94e2bbd4","commits":[{"sha":"12c90c00f05e19da3c0c91d8cd8e0d0d45965606","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Check also for __clang__ in memcmplen.h.\n\nThis change hopefully makes no practical difference as Clang\nlikely was detected via __GNUC__ or _MSC_VER already.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/12c90c00f05e19da3c0c91d8cd8e0d0d45965606"},{"sha":"cd64dd70d5665b6048829c45772d08606f44672e","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use 8-byte method in memcmplen.h on ARM64.\n\nIt requires fast unaligned access to 64-bit integers\nand a fast instruction to count leading zeros in\na 64-bit integer (__builtin_ctzll()). This perhaps\nshould be enabled on some other archs too.\n\nThanks to Chenxi Mao for the original patch:\nhttps://github.com/tukaani-project/xz/pull/75 (the first commit)\nAccording to the numbers there, this may improve encoding\nspeed by about 3-5 %.\n\nThis enables the 8-byte method on MSVC ARM64 too which\nshould work but wasn't tested.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/cd64dd70d5665b6048829c45772d08606f44672e"},{"sha":"15cf3f04f270d707a5c91cc0208b23b6db42b774","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/15cf3f04f270d707a5c91cc0208b23b6db42b774"},{"sha":"0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: crc_clmul.c: Tidy up the location of MSVC pragma.\n\nIt makes no difference in practice.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae"},{"sha":"93d144f0930821590524247bd174afd38003d7f0","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Add empty lines.\n\nAnd remove one too.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/93d144f0930821590524247bd174afd38003d7f0"},{"sha":"9523c1300d22fa715765c181cf991d14d6112fb1","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: #define crc_attr_no_sanitize_address in crc_common.h.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/9523c1300d22fa715765c181cf991d14d6112fb1"},{"sha":"d164ac0e62904126f7920c25f9a2875c8cd28b97","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Simplify existing cases with lzma_attr_no_sanitize_address.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/d164ac0e62904126f7920c25f9a2875c8cd28b97"},{"sha":"e3833e297dfb5021a197bda34ba2a795e30aaf8a","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: crc_clmul.c: Add crc_attr_target macro.\n\nThis reduces the number of the complex #if directives.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/e3833e297dfb5021a197bda34ba2a795e30aaf8a"},{"sha":"419f55f9dfc2df8792902b8953d50690121afeea","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Avoid extern lzma_crc32_clmul() and lzma_crc64_clmul().\n\nA CLMUL-only build will have the crcxx_clmul() inlined into\nlzma_crcxx(). Previously a jump to the extern lzma_crcxx_clmul()\nwas needed. Notes about shared liblzma on ELF platforms:\n\n  - On platforms that support ifunc and -fvisibility=hidden, this\n    was silly because CLMUL-only build would have that single extra\n    jump instruction of extra overhead.\n\n  - On platforms that support neither -fvisibility=hidden nor linker\n    version script (liblzma*.map), jumping to lzma_crcxx_clmul()\n    would go via PLT so a few more instructions of overhead (still\n    not a big issue but silly nevertheless).\n\nThere was a downside with static liblzma too: if an application only\nneeds lzma_crc64(), static linking would make the linker include the\nCLMUL code for both CRC32 and CRC64 from crc_x86_clmul.o even though\nthe CRC32 code wouldn't be needed, thus increasing code size of the\nexecutable (assuming that -ffunction-sections isn't used).\n\nAlso, now compilers are likely to inline crc_simd_body()\neven if they don't support the always_inline attribute\n(or MSVC's __forceinline). Quite possibly all compilers\nthat build the code do support such an attribute. But now\nit likely isn't a problem even if the attribute wasn't supported.\n\nNow all x86-specific stuff is in crc_x86_clmul.h. If other archs\nThe other archs can then have their own headers with their own\nis_clmul_supported() and crcxx_clmul().\n\nAnother bonus is that the build system doesn't need to care if\ncrc_clmul.c is needed.\n\nis_clmul_supported() stays as inline function as it's not needed\nwhen doing a CLMUL-only build (avoids a warning about unused function).","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/419f55f9dfc2df8792902b8953d50690121afeea"},{"sha":"3dbed75b0b9c7087c76fe687acb5cf582cd57b99","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Fix a comment in crc_common.h.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/3dbed75b0b9c7087c76fe687acb5cf582cd57b99"},{"sha":"66f080e8016129576536482ac377e2ecac7a2b90","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Rename arch-specific CRC functions and macros.\n\nCRC_CLMUL was split to CRC_ARCH_OPTIMIZED and CRC_X86_CLMUL.\nCRC_ARCH_OPTIMIZED is defined when an arch-optimized version is used.\nCurrently the x86 CLMUL implementations are the only arch-optimized\nversions, and these also use the CRC_x86_CLMUL macro to tell when\ncrc_x86_clmul.h needs to be included.\n\nis_clmul_supported() was renamed to is_arch_extension_supported().\ncrc32_clmul() and crc64_clmul() were renamed to\ncrc32_arch_optimized() and crc64_arch_optimized().\nThis way the names make sense with arch-specific non-CLMUL\nimplementations as well.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/66f080e8016129576536482ac377e2ecac7a2b90"},{"sha":"35c03ec6bf66f1b159964c9721a2dce0e2859b20","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Update CLMUL comments to more generic wording.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/35c03ec6bf66f1b159964c9721a2dce0e2859b20"},{"sha":"4f518c1b6b7b7ce5dcefea81acd44d7a086a8882","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Remove crc_always_inline, use lzma_always_inline instead.\n\nNow crc_simd_body() in crc_x86_clmul.h is only called once\nin a translation unit, we no longer need to be so cautious\nabout ensuring the always-inline behavior.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/4f518c1b6b7b7ce5dcefea81acd44d7a086a8882"},{"sha":"fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: CRC: Add a comment to crc_x86_clmul.h about BUILDING_ macros.","distinct":false,"url":"https://api.github.com/repos/kiyolee/xz/commits/fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b"},{"sha":"922310a8bf3d86c6ca4ffd9782b8500bcdb1fead","author":{"email":"kiyolee@gmail.com","name":"Kelvin Lee"},"message":"Import VS2022 solution and projects from xz-win-build","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/922310a8bf3d86c6ca4ffd9782b8500bcdb1fead"},{"sha":"59cdd067c356c06fd26a9230031d8324c0bd91c6","author":{"email":"kiyolee@gmail.com","name":"Kelvin Lee"},"message":"Import test scripts from xz-win-build","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/59cdd067c356c06fd26a9230031d8324c0bd91c6"},{"sha":"a4241037da2f4feca48949aaabf472248f460892","author":{"email":"kiyolee@gmail.com","name":"Kelvin Lee"},"message":"Update header file extensions","distinct":true,"url":"https://api.github.com/repos/kiyolee/xz/commits/a4241037da2f4feca48949aaabf472248f460892"}]},"public":true,"created_at":"2024-01-14T07:23:29Z"}
