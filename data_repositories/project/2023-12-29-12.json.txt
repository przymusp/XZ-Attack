{"id":"34467558617","type":"PushEvent","actor":{"id":39814207,"login":"pull[bot]","display_login":"pull","gravatar_id":"","url":"https://api.github.com/users/pull[bot]","avatar_url":"https://avatars.githubusercontent.com/u/39814207?"},"repo":{"id":722690562,"name":"sysfce2/xz","url":"https://api.github.com/repos/sysfce2/xz"},"payload":{"repository_id":722690562,"push_id":16442547050,"size":16,"distinct_size":16,"ref":"refs/heads/master","head":"15cf3f04f270d707a5c91cc0208b23b6db42b774","before":"d0b24efe6cdc47db5b0fdf6306f70a2e0e63e49e","commits":[{"sha":"f9b82bc64a9405e486575c65c1729229eb0a8198","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CI: Update Upload Artifact Action.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/f9b82bc64a9405e486575c65c1729229eb0a8198"},{"sha":"e1b1a9d6370b788bd6078952c6c201e12bc27cbf","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Docs: Update repository URL in Changelog.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/e1b1a9d6370b788bd6078952c6c201e12bc27cbf"},{"sha":"5dad6f628af742bab826819760deb677597445f7","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Improve lzma encoder init function consistency.\n\nlzma_encoder_init() did not check for NULL options, but\nlzma2_encoder_init() did. This is more of a code style improvement than\nanything else to help make lzma_encoder_init() and lzma2_encoder_init()\nmore similar.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/5dad6f628af742bab826819760deb677597445f7"},{"sha":"55810780e04f759747b02683fb8020b8cd022a85","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Make parameter names in function definition match declaration.\n\nlzma_raw_encoder() and lzma_raw_encoder_init() used \"options\" as the\nparameter name instead of \"filters\" (used by the declaration). \"filters\"\nis more clear since the parameter represents the list of filters passed\nto the raw encoder, each of which contains filter options.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/55810780e04f759747b02683fb8020b8cd022a85"},{"sha":"1a1bb381db7a20cf86cb45a350e5cca35224d017","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Tweak a comment.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/1a1bb381db7a20cf86cb45a350e5cca35224d017"},{"sha":"183a62f0b540ff4d23cc19b2b6bc2525f0bd64df","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Set all values in lzma_lz_encoder to NULL after allocation.\n\nThe first member of lzma_lz_encoder doesn't necessarily need to be set\nto NULL since it will always be set before anything tries to use it.\nHowever the function pointer members must be set to NULL since other\nfunctions rely on this NULL value to determine if this behavior is\nsupported or not.\n\nThis fixes a somewhat serious bug, where the options_update() and\nset_out_limit() function pointers are not set to NULL. This seems to\nhave been forgotten since these function pointers were added many years\nafter the original two (code() and end()).\n\nThe problem is that by not setting this to NULL we are relying on the\nmemory allocation to zero things out if lzma_filters_update() is called\non a LZMA1 encoder. The function pointer for set_out_limit() is less\nserious because there is not an API function that could call this in an\nincorrect way. set_out_limit() is only called by the MicroLZMA encoder,\nwhich must use LZMA1 where set_out_limit() is always set. Its currently\nnot possible to call set_out_limit() on an LZMA2 encoder at this time.\n\nSo calling lzma_filters_update() on an LZMA1 encoder had undefined\nbehavior since its possible that memory could be manipulated so the\noptions_update member pointed to a different instruction sequence.\n\nThis is unlikely to be a bug in an existing application since it relies\non calling lzma_filters_update() on an LZMA1 encoder in the first place.\nFor instance, it does not affect xz because lzma_filters_update() can\nonly be used when encoding to the .xz format.\n\nThis is fixed by using memzero() to set all members of lzma_lz_encoder\nto NULL after it is allocated. This ensures this mistake will not occur\nhere in the future if any additional function pointers are added.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/183a62f0b540ff4d23cc19b2b6bc2525f0bd64df"},{"sha":"b34b6a9912d6165e34ba0db151b7f9941d2e06d5","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"liblzma: Initialize lzma_lz_encoder pointers with NULL.\n\nThis fixes the recent change to lzma_lz_encoder that used memzero\ninstead of the NULL constant. On some compilers the NULL constant\n(always 0) may not equal the NULL pointer (this only needs to guarentee\nto not point to valid memory address).\n\nLater code compares the pointers to the NULL pointer so we must\ninitialize them with the NULL pointer instead of 0 to guarentee\ncode correctness.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/b34b6a9912d6165e34ba0db151b7f9941d2e06d5"},{"sha":"d74fb5f060b76db709b50f5fd37490394e52f975","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xzdec: Add sandbox support for Pledge, Capsicum, and Landlock.\n\nA very strict sandbox is used when the last file is decompressed. The\nlikely most common use case of xzdec is to decompress a single file.\nThe Pledge sandbox is applied to the entire process with slightly more\nrelaxed promises, until the last file is processed.\n\nThanks to Christian Weisgerber for the initial patch adding Pledge\nsandboxing.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/d74fb5f060b76db709b50f5fd37490394e52f975"},{"sha":"5feb09266fd2928ec0a4dcb98c1dc7f053111316","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Build: Allow sandbox to be configured for just xzdec.\n\nIf xz is disabled, then xzdec can still use the sandbox.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/5feb09266fd2928ec0a4dcb98c1dc7f053111316"},{"sha":"ebddf20214143a8e002ab897e95e880bb4c5ac44","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"CMake: Move sandbox detection outside of xz section.\n\nThe sandbox is now enabled for xzdec as well, so it no longer belongs\nin just the xz section. xz and xzdec are always built, except for older\nMSVC versions, so there isn't a need to conditionally show the sandbox\nconfiguration. CMake will do a little unecessary work on older MSVC\nversions that can't build xz or xzdec, but this is a very small\ndownside.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/ebddf20214143a8e002ab897e95e880bb4c5ac44"},{"sha":"4e1c695676bafbaecc9fb307f6ee94138ae72c12","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Docs: Update --enable-sandbox option in INSTALL.\n\nxzdec now also uses the sandbox when its configured.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/4e1c695676bafbaecc9fb307f6ee94138ae72c12"},{"sha":"710cbc186cad0ac601c38bd6bf31167648a5581e","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"xz: Add a comment to Capsicum sandbox setup.\n\nThis comment is repeated in xzdec.c to help remind us why all the\ncapabilities are removed from stdin in certain situations.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/710cbc186cad0ac601c38bd6bf31167648a5581e"},{"sha":"133c5851eb917c6d99d0b623c1689c8518e65f38","author":{"email":"jiat0218@gmail.com","name":"Jia Tan"},"message":"Translations: Update the French translation.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/133c5851eb917c6d99d0b623c1689c8518e65f38"},{"sha":"12c90c00f05e19da3c0c91d8cd8e0d0d45965606","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Check also for __clang__ in memcmplen.h.\n\nThis change hopefully makes no practical difference as Clang\nlikely was detected via __GNUC__ or _MSC_VER already.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/12c90c00f05e19da3c0c91d8cd8e0d0d45965606"},{"sha":"cd64dd70d5665b6048829c45772d08606f44672e","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"liblzma: Use 8-byte method in memcmplen.h on ARM64.\n\nIt requires fast unaligned access to 64-bit integers\nand a fast instruction to count leading zeros in\na 64-bit integer (__builtin_ctzll()). This perhaps\nshould be enabled on some other archs too.\n\nThanks to Chenxi Mao for the original patch:\nhttps://github.com/tukaani-project/xz/pull/75 (the first commit)\nAccording to the numbers there, this may improve encoding\nspeed by about 3-5 %.\n\nThis enables the 8-byte method on MSVC ARM64 too which\nshould work but wasn't tested.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/cd64dd70d5665b6048829c45772d08606f44672e"},{"sha":"15cf3f04f270d707a5c91cc0208b23b6db42b774","author":{"email":"lasse.collin@tukaani.org","name":"Lasse Collin"},"message":"Update THANKS.","distinct":true,"url":"https://api.github.com/repos/sysfce2/xz/commits/15cf3f04f270d707a5c91cc0208b23b6db42b774"}]},"public":true,"created_at":"2023-12-29T12:15:45Z"}
